/* 
 * @(#)DataStores.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.dataStores.DataStore;
import com.airlenet.yang.model.tailfWebui.webui.dataStores.SavedQuery;
import com.airlenet.yang.model.tailfWebui.webui.dataStores.UserProfile;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/data-stores"
 * <p>
 * See line 151 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class DataStores extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty DataStores object.
     */
    public DataStores() {
        super(WebuiPrefix.NAMESPACE, "data-stores");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public DataStores clone() {
        return (DataStores)cloneContent(new DataStores());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public DataStores cloneShallow() {
        return (DataStores)cloneShallowContent(new DataStores());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "user-profile",
            "data-store",
            "saved-query",
        };
    }

    /* Access methods for list child: "user-profile". */

    /**
     * Gets list entry "userProfile", with specified keys.
     * @param usernameValue Key argument of child.
     */
    public UserProfile getUserProfile(com.tailf.jnc.YangString usernameValue)
            throws JNCException {
        String path = "user-profile[username='" + usernameValue + "']";
        return (UserProfile)searchOne(path);
    }

    /**
     * Gets list entry "userProfile", with specified keys.
     * The keys are specified as strings.
     * @param usernameValue Key argument of child.
     */
    public UserProfile getUserProfile(String usernameValue) throws JNCException {
        String path = "user-profile[username='" + usernameValue + "']";
        return (UserProfile)searchOne(path);
    }

    /**
     * Iterator method for the list "user-profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator userProfileIterator() {
        return new ElementChildrenIterator(children, "user-profile");
    }

    /**
     * List method for the list "user-profile".
     * @return An List for the list.
     */
    public List<UserProfile> getUserProfileList() {
        List<UserProfile> list = new ArrayList<>();
        ElementChildrenIterator iterator = userProfileIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            UserProfile next =(UserProfile) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "userProfile", using an existing object.
     * @param userProfile The object to add.
     * @return The added child.
     */
    public UserProfile addUserProfile(UserProfile userProfile)
            throws JNCException {
        insertChild(userProfile, childrenNames());
        return userProfile;
    }

    /**
     * Adds list entry "userProfile", with specified keys.
     * @param usernameValue Key argument of child.
     * @return The added child.
     */
    public UserProfile addUserProfile(com.tailf.jnc.YangString usernameValue)
            throws JNCException {
        UserProfile userProfile = new UserProfile(usernameValue);
        return addUserProfile(userProfile);
    }

    /**
     * Adds list entry "userProfile", with specified keys.
     * The keys are specified as strings.
     * @param usernameValue Key argument of child.
     * @return The added child.
     */
    public UserProfile addUserProfile(String usernameValue) throws JNCException {
        UserProfile userProfile = new UserProfile(usernameValue);
        return addUserProfile(userProfile);
    }

    /**
     * Adds list entry "userProfile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public UserProfile addUserProfile() throws JNCException {
        UserProfile userProfile = new UserProfile();
        insertChild(userProfile, childrenNames());
        return userProfile;
    }

    /**
     * Deletes list entry "userProfile", with specified keys.
     * @param usernameValue Key argument of child.
     */
    public void deleteUserProfile(com.tailf.jnc.YangString usernameValue)
            throws JNCException {
        String path = "user-profile[username='" + usernameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "userProfile", with specified keys.
     * The keys are specified as strings.
     * @param usernameValue Key argument of child.
     */
    public void deleteUserProfile(String usernameValue) throws JNCException {
        String path = "user-profile[username='" + usernameValue + "']";
        delete(path);
    }

    /* Access methods for list child: "data-store". */

    /**
     * Gets list entry "dataStore", with specified keys.
     * @param keyValue Key argument of child.
     */
    public DataStore getDataStore(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        String path = "data-store[key='" + keyValue + "']";
        return (DataStore)searchOne(path);
    }

    /**
     * Gets list entry "dataStore", with specified keys.
     * The keys are specified as strings.
     * @param keyValue Key argument of child.
     */
    public DataStore getDataStore(String keyValue) throws JNCException {
        String path = "data-store[key='" + keyValue + "']";
        return (DataStore)searchOne(path);
    }

    /**
     * Iterator method for the list "data-store".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator dataStoreIterator() {
        return new ElementChildrenIterator(children, "data-store");
    }

    /**
     * List method for the list "data-store".
     * @return An List for the list.
     */
    public List<DataStore> getDataStoreList() {
        List<DataStore> list = new ArrayList<>();
        ElementChildrenIterator iterator = dataStoreIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            DataStore next =(DataStore) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "dataStore", using an existing object.
     * @param dataStore The object to add.
     * @return The added child.
     */
    public DataStore addDataStore(DataStore dataStore) throws JNCException {
        insertChild(dataStore, childrenNames());
        return dataStore;
    }

    /**
     * Adds list entry "dataStore", with specified keys.
     * @param keyValue Key argument of child.
     * @return The added child.
     */
    public DataStore addDataStore(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        DataStore dataStore = new DataStore(keyValue);
        return addDataStore(dataStore);
    }

    /**
     * Adds list entry "dataStore", with specified keys.
     * The keys are specified as strings.
     * @param keyValue Key argument of child.
     * @return The added child.
     */
    public DataStore addDataStore(String keyValue) throws JNCException {
        DataStore dataStore = new DataStore(keyValue);
        return addDataStore(dataStore);
    }

    /**
     * Adds list entry "dataStore".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DataStore addDataStore() throws JNCException {
        DataStore dataStore = new DataStore();
        insertChild(dataStore, childrenNames());
        return dataStore;
    }

    /**
     * Deletes list entry "dataStore", with specified keys.
     * @param keyValue Key argument of child.
     */
    public void deleteDataStore(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        String path = "data-store[key='" + keyValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "dataStore", with specified keys.
     * The keys are specified as strings.
     * @param keyValue Key argument of child.
     */
    public void deleteDataStore(String keyValue) throws JNCException {
        String path = "data-store[key='" + keyValue + "']";
        delete(path);
    }

    /* Access methods for list child: "saved-query". */

    /**
     * Gets list entry "savedQuery", with specified keys.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public SavedQuery getSavedQuery(com.tailf.jnc.YangString listPathValue, com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        return (SavedQuery)searchOne(path);
    }

    /**
     * Gets list entry "savedQuery", with specified keys.
     * The keys are specified as strings.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public SavedQuery getSavedQuery(String listPathValue, String nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        return (SavedQuery)searchOne(path);
    }

    /**
     * Iterator method for the list "saved-query".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator savedQueryIterator() {
        return new ElementChildrenIterator(children, "saved-query");
    }

    /**
     * List method for the list "saved-query".
     * @return An List for the list.
     */
    public List<SavedQuery> getSavedQueryList() {
        List<SavedQuery> list = new ArrayList<>();
        ElementChildrenIterator iterator = savedQueryIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            SavedQuery next =(SavedQuery) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "savedQuery", using an existing object.
     * @param savedQuery The object to add.
     * @return The added child.
     */
    public SavedQuery addSavedQuery(SavedQuery savedQuery) throws JNCException {
        insertChild(savedQuery, childrenNames());
        return savedQuery;
    }

    /**
     * Adds list entry "savedQuery", with specified keys.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public SavedQuery addSavedQuery(com.tailf.jnc.YangString listPathValue, com.tailf.jnc.YangString nameValue)
            throws JNCException {
        SavedQuery savedQuery = new SavedQuery(listPathValue, nameValue);
        return addSavedQuery(savedQuery);
    }

    /**
     * Adds list entry "savedQuery", with specified keys.
     * The keys are specified as strings.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public SavedQuery addSavedQuery(String listPathValue, String nameValue)
            throws JNCException {
        SavedQuery savedQuery = new SavedQuery(listPathValue, nameValue);
        return addSavedQuery(savedQuery);
    }

    /**
     * Adds list entry "savedQuery".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SavedQuery addSavedQuery() throws JNCException {
        SavedQuery savedQuery = new SavedQuery();
        insertChild(savedQuery, childrenNames());
        return savedQuery;
    }

    /**
     * Deletes list entry "savedQuery", with specified keys.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public void deleteSavedQuery(com.tailf.jnc.YangString listPathValue, com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "savedQuery", with specified keys.
     * The keys are specified as strings.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public void deleteSavedQuery(String listPathValue, String nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
