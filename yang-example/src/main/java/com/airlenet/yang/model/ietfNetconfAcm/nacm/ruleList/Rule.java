/* 
 * @(#)Rule.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-acm", revision: "2012-02-22".
 */

package com.airlenet.yang.model.ietfNetconfAcm.nacm.ruleList;

import com.airlenet.yang.model.ietfNetconfAcm.ActionType;
import com.airlenet.yang.model.ietfNetconfAcm.NacmPrefix;
import com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfAcm/nacm/ruleList/rule"
 * <p>
 * See line 337 in
 * src/main/yang/module/ietf/ietf-netconf-acm.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Rule extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Rule object.
     */
    public Rule() {
        super(NacmPrefix.NAMESPACE, "rule");
    }

    /**
     * Constructor for an initialized Rule object,
     * 
     * @param nameValue Key argument of child.
     */
    public Rule(YangString nameValue) throws JNCException {
        super(NacmPrefix.NAMESPACE, "rule");
        Leaf name = new Leaf(NacmPrefix.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized Rule object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public Rule(String nameValue) throws JNCException {
        super(NacmPrefix.NAMESPACE, "rule");
        Leaf name = new Leaf(NacmPrefix.NAMESPACE, "name");
        name.setValue(new com.tailf.jnc.YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Rule clone() {
        Rule copy;
        try {
            copy = new Rule(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Rule)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Rule cloneShallow() {
        Rule copy;
        try {
            copy = new Rule(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Rule)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "module-name",
            "rpc-name",
            "notification-name",
            "path",
            "access-operations",
            "action",
            "comment",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "module-name". */

    /**
     * Gets the value for child leaf "module-name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getModuleNameValue() throws JNCException {
        com.tailf.jnc.YangUnion moduleName = (com.tailf.jnc.YangUnion)getValue("module-name");
        if (moduleName == null) {
            moduleName = new com.tailf.jnc.YangUnion("*", new String[] {  // default
                "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
                "com.tailf.jnc.YangString",
            });
        }
        return moduleName;
    }

    /**
     * Sets the value for child leaf "module-name",
     * using instance of generated typedef class.
     * @param moduleNameValue The value to set.
     * @param moduleNameValue used during instantiation.
     */
    public void setModuleNameValue(com.tailf.jnc.YangUnion moduleNameValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "module-name",
            moduleNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "module-name",
     * using a String value.
     * @param moduleNameValue used during instantiation.
     */
    public void setModuleNameValue(String moduleNameValue) throws JNCException {
        setModuleNameValue(new com.tailf.jnc.YangUnion(moduleNameValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * Unsets the value for child leaf "module-name".
     */
    public void unsetModuleNameValue() throws JNCException {
        delete("module-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "module-name" leaf will not have a value.
     */
    public void addModuleName() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "module-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "module-name" with operation "replace".
     */
    public void markModuleNameReplace() throws JNCException {
        markLeafReplace("module-name");
    }

    /**
     * Marks the leaf "module-name" with operation "merge".
     */
    public void markModuleNameMerge() throws JNCException {
        markLeafMerge("module-name");
    }

    /**
     * Marks the leaf "module-name" with operation "create".
     */
    public void markModuleNameCreate() throws JNCException {
        markLeafCreate("module-name");
    }

    /**
     * Marks the leaf "module-name" with operation "delete".
     */
    public void markModuleNameDelete() throws JNCException {
        markLeafDelete("module-name");
    }

    /**
     * Marks the leaf "module-name" with operation "remove".
     */
    public void markModuleNameRemove() throws JNCException {
        markLeafRemove("module-name");
    }

    /* Access methods for optional leaf child: "rpc-name". */

    /**
     * Gets the value for child leaf "rpc-name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getRpcNameValue() throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("rpc-name");
    }

    /**
     * Sets the value for child leaf "rpc-name",
     * using instance of generated typedef class.
     * @param rpcNameValue The value to set.
     * @param rpcNameValue used during instantiation.
     */
    public void setRpcNameValue(com.tailf.jnc.YangUnion rpcNameValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "rpc-name",
            rpcNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rpc-name",
     * using a String value.
     * @param rpcNameValue used during instantiation.
     */
    public void setRpcNameValue(String rpcNameValue) throws JNCException {
        setRpcNameValue(new com.tailf.jnc.YangUnion(rpcNameValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * Unsets the value for child leaf "rpc-name".
     */
    public void unsetRpcNameValue() throws JNCException {
        delete("rpc-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rpc-name" leaf will not have a value.
     */
    public void addRpcName() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "rpc-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rpc-name" with operation "replace".
     */
    public void markRpcNameReplace() throws JNCException {
        markLeafReplace("rpc-name");
    }

    /**
     * Marks the leaf "rpc-name" with operation "merge".
     */
    public void markRpcNameMerge() throws JNCException {
        markLeafMerge("rpc-name");
    }

    /**
     * Marks the leaf "rpc-name" with operation "create".
     */
    public void markRpcNameCreate() throws JNCException {
        markLeafCreate("rpc-name");
    }

    /**
     * Marks the leaf "rpc-name" with operation "delete".
     */
    public void markRpcNameDelete() throws JNCException {
        markLeafDelete("rpc-name");
    }

    /**
     * Marks the leaf "rpc-name" with operation "remove".
     */
    public void markRpcNameRemove() throws JNCException {
        markLeafRemove("rpc-name");
    }

    /* Access methods for optional leaf child: "notification-name". */

    /**
     * Gets the value for child leaf "notification-name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getNotificationNameValue()
            throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("notification-name");
    }

    /**
     * Sets the value for child leaf "notification-name",
     * using instance of generated typedef class.
     * @param notificationNameValue The value to set.
     * @param notificationNameValue used during instantiation.
     */
    public void setNotificationNameValue(com.tailf.jnc.YangUnion notificationNameValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "notification-name",
            notificationNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "notification-name",
     * using a String value.
     * @param notificationNameValue used during instantiation.
     */
    public void setNotificationNameValue(String notificationNameValue)
            throws JNCException {
        setNotificationNameValue(new com.tailf.jnc.YangUnion(notificationNameValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * Unsets the value for child leaf "notification-name".
     */
    public void unsetNotificationNameValue() throws JNCException {
        delete("notification-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "notification-name" leaf will not have a value.
     */
    public void addNotificationName() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "notification-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "notification-name" with operation "replace".
     */
    public void markNotificationNameReplace() throws JNCException {
        markLeafReplace("notification-name");
    }

    /**
     * Marks the leaf "notification-name" with operation "merge".
     */
    public void markNotificationNameMerge() throws JNCException {
        markLeafMerge("notification-name");
    }

    /**
     * Marks the leaf "notification-name" with operation "create".
     */
    public void markNotificationNameCreate() throws JNCException {
        markLeafCreate("notification-name");
    }

    /**
     * Marks the leaf "notification-name" with operation "delete".
     */
    public void markNotificationNameDelete() throws JNCException {
        markLeafDelete("notification-name");
    }

    /**
     * Marks the leaf "notification-name" with operation "remove".
     */
    public void markNotificationNameRemove() throws JNCException {
        markLeafRemove("notification-name");
    }

    /* Access methods for optional leaf child: "path". */

    /**
     * Gets the value for child leaf "path".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier getPathValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier)getValue("path");
    }

    /**
     * Sets the value for child leaf "path",
     * using a JNC type value.
     * @param pathValue The value to set.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier pathValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "path",
            pathValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path",
     * using a String value.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(String pathValue) throws JNCException {
        setPathValue(new com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier(pathValue));
    }

    /**
     * Unsets the value for child leaf "path".
     */
    public void unsetPathValue() throws JNCException {
        delete("path");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path" leaf will not have a value.
     */
    public void addPath() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "path",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path" with operation "replace".
     */
    public void markPathReplace() throws JNCException {
        markLeafReplace("path");
    }

    /**
     * Marks the leaf "path" with operation "merge".
     */
    public void markPathMerge() throws JNCException {
        markLeafMerge("path");
    }

    /**
     * Marks the leaf "path" with operation "create".
     */
    public void markPathCreate() throws JNCException {
        markLeafCreate("path");
    }

    /**
     * Marks the leaf "path" with operation "delete".
     */
    public void markPathDelete() throws JNCException {
        markLeafDelete("path");
    }

    /**
     * Marks the leaf "path" with operation "remove".
     */
    public void markPathRemove() throws JNCException {
        markLeafRemove("path");
    }

    /* Access methods for optional leaf child: "access-operations". */

    /**
     * Gets the value for child leaf "access-operations".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getAccessOperationsValue()
            throws JNCException {
        com.tailf.jnc.YangUnion accessOperations = (com.tailf.jnc.YangUnion)getValue("access-operations");
        if (accessOperations == null) {
            accessOperations = new com.tailf.jnc.YangUnion("*", new String[] {  // default
                "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
                "com.airlenet.yang.model.ietfNetconfAcm.AccessOperationsType",
            });
        }
        return accessOperations;
    }

    /**
     * Sets the value for child leaf "access-operations",
     * using instance of generated typedef class.
     * @param accessOperationsValue The value to set.
     * @param accessOperationsValue used during instantiation.
     */
    public void setAccessOperationsValue(com.tailf.jnc.YangUnion accessOperationsValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "access-operations",
            accessOperationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "access-operations",
     * using a String value.
     * @param accessOperationsValue used during instantiation.
     */
    public void setAccessOperationsValue(String accessOperationsValue)
            throws JNCException {
        setAccessOperationsValue(new com.tailf.jnc.YangUnion(accessOperationsValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.airlenet.yang.model.ietfNetconfAcm.AccessOperationsType",
        }));
    }

    /**
     * Unsets the value for child leaf "access-operations".
     */
    public void unsetAccessOperationsValue() throws JNCException {
        delete("access-operations");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "access-operations" leaf will not have a value.
     */
    public void addAccessOperations() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "access-operations",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "access-operations" with operation "replace".
     */
    public void markAccessOperationsReplace() throws JNCException {
        markLeafReplace("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "merge".
     */
    public void markAccessOperationsMerge() throws JNCException {
        markLeafMerge("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "create".
     */
    public void markAccessOperationsCreate() throws JNCException {
        markLeafCreate("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "delete".
     */
    public void markAccessOperationsDelete() throws JNCException {
        markLeafDelete("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "remove".
     */
    public void markAccessOperationsRemove() throws JNCException {
        markLeafRemove("access-operations");
    }

    /* Access methods for optional leaf child: "action". */

    /**
     * Gets the value for child leaf "action".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.ActionType getActionValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconfAcm.ActionType)getValue("action");
    }

    /**
     * Sets the value for child leaf "action",
     * using a JNC type value.
     * @param actionValue The value to set.
     * @param actionValue used during instantiation.
     */
    public void setActionValue(com.airlenet.yang.model.ietfNetconfAcm.ActionType actionValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "action",
            actionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "action",
     * using a String value.
     * @param actionValue used during instantiation.
     */
    public void setActionValue(String actionValue) throws JNCException {
        setActionValue(new com.airlenet.yang.model.ietfNetconfAcm.ActionType(actionValue));
    }

    /**
     * Unsets the value for child leaf "action".
     */
    public void unsetActionValue() throws JNCException {
        delete("action");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "action" leaf will not have a value.
     */
    public void addAction() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "action",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "action" with operation "replace".
     */
    public void markActionReplace() throws JNCException {
        markLeafReplace("action");
    }

    /**
     * Marks the leaf "action" with operation "merge".
     */
    public void markActionMerge() throws JNCException {
        markLeafMerge("action");
    }

    /**
     * Marks the leaf "action" with operation "create".
     */
    public void markActionCreate() throws JNCException {
        markLeafCreate("action");
    }

    /**
     * Marks the leaf "action" with operation "delete".
     */
    public void markActionDelete() throws JNCException {
        markLeafDelete("action");
    }

    /**
     * Marks the leaf "action" with operation "remove".
     */
    public void markActionRemove() throws JNCException {
        markLeafRemove("action");
    }

    /* Access methods for optional leaf child: "comment". */

    /**
     * Gets the value for child leaf "comment".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getCommentValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("comment");
    }

    /**
     * Sets the value for child leaf "comment",
     * using instance of generated typedef class.
     * @param commentValue The value to set.
     * @param commentValue used during instantiation.
     */
    public void setCommentValue(com.tailf.jnc.YangString commentValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "comment",
            commentValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "comment",
     * using a String value.
     * @param commentValue used during instantiation.
     */
    public void setCommentValue(String commentValue) throws JNCException {
        setCommentValue(new com.tailf.jnc.YangString(commentValue));
    }

    /**
     * Unsets the value for child leaf "comment".
     */
    public void unsetCommentValue() throws JNCException {
        delete("comment");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "comment" leaf will not have a value.
     */
    public void addComment() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "comment",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "comment" with operation "replace".
     */
    public void markCommentReplace() throws JNCException {
        markLeafReplace("comment");
    }

    /**
     * Marks the leaf "comment" with operation "merge".
     */
    public void markCommentMerge() throws JNCException {
        markLeafMerge("comment");
    }

    /**
     * Marks the leaf "comment" with operation "create".
     */
    public void markCommentCreate() throws JNCException {
        markLeafCreate("comment");
    }

    /**
     * Marks the leaf "comment" with operation "delete".
     */
    public void markCommentDelete() throws JNCException {
        markLeafDelete("comment");
    }

    /**
     * Marks the leaf "comment" with operation "remove".
     */
    public void markCommentRemove() throws JNCException {
        markLeafRemove("comment");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
