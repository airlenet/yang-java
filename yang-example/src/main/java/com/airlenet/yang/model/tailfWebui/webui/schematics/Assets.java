/* 
 * @(#)Assets.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.schematics.assets.Asset;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/assets"
 * <p>
 * See line 122 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Assets extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Assets object.
     */
    public Assets() {
        super(WebuiPrefix.NAMESPACE, "assets");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Assets clone() {
        return (Assets)cloneContent(new Assets());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Assets cloneShallow() {
        return (Assets)cloneShallowContent(new Assets());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "asset",
        };
    }

    /* Access methods for list child: "asset". */

    /**
     * Gets list entry "asset", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Asset getAsset(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "asset[name='" + nameValue + "']";
        return (Asset)searchOne(path);
    }

    /**
     * Gets list entry "asset", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Asset getAsset(String nameValue) throws JNCException {
        String path = "asset[name='" + nameValue + "']";
        return (Asset)searchOne(path);
    }

    /**
     * Iterator method for the list "asset".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator assetIterator() {
        return new ElementChildrenIterator(children, "asset");
    }

    /**
     * List method for the list "asset".
     * @return An List for the list.
     */
    public List<Asset> getAssetList() {
        List<Asset> list = new ArrayList<>();
        ElementChildrenIterator iterator = assetIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Asset next =(Asset) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "asset", using an existing object.
     * @param asset The object to add.
     * @return The added child.
     */
    public Asset addAsset(Asset asset) throws JNCException {
        insertChild(asset, childrenNames());
        return asset;
    }

    /**
     * Adds list entry "asset", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Asset addAsset(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        Asset asset = new Asset(nameValue);
        return addAsset(asset);
    }

    /**
     * Adds list entry "asset", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Asset addAsset(String nameValue) throws JNCException {
        Asset asset = new Asset(nameValue);
        return addAsset(asset);
    }

    /**
     * Adds list entry "asset".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Asset addAsset() throws JNCException {
        Asset asset = new Asset();
        insertChild(asset, childrenNames());
        return asset;
    }

    /**
     * Deletes list entry "asset", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteAsset(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "asset[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "asset", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteAsset(String nameValue) throws JNCException {
        String path = "asset[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
