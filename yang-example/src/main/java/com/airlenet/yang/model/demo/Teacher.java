/* 
 * @(#)Teacher.java        1.0 31/10/17
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "demo", revision: "unknown".
 */

package com.airlenet.yang.model.demo;

import com.airlenet.yang.model.demo.Demo;
import com.airlenet.yang.model.demo.teacher.User;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/example/demo
 * generated to "/Users/lig/Documents/workspace/play-yang/yang-example/src/main/java/com.airlenet.yang.model/demo/teacher"
 * <p>
 * See line 15 in
 * /Users/lig/Documents/workspace/play-yang/yang-example/src/main/yang/demo.yang
 *
 * @version 1.0 2017-10-31
 * @author Auto Generated
 */
public class Teacher extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Teacher object.
     */
    public Teacher() {
        super(Demo.NAMESPACE, "teacher");
        setDefaultPrefix();
        setPrefix(Demo.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Teacher clone() {
        return (Teacher)cloneContent(new Teacher());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Teacher cloneShallow() {
        return (Teacher)cloneShallowContent(new Teacher());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "user",
        };
    }

    /* Access methods for list child: "user". */

    /**
     * Gets list entry "user", with specified keys.
     * @param idValue Key argument of child.
     */
    public User getUser(YangUInt32 idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        return (User)searchOne(path);
    }

    /**
     * Gets list entry "user", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public User getUser(String idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        return (User)searchOne(path);
    }

    /**
     * Iterator method for the list "user".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator userIterator() {
        return new ElementChildrenIterator(children, "user");
    }

    /**
     * Adds list entry "user", using an existing object.
     * @param user The object to add.
     * @return The added child.
     */
    public User addUser(User user) throws JNCException {
        insertChild(user, childrenNames());
        return user;
    }

    /**
     * Adds list entry "user", with specified keys.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public User addUser(YangUInt32 idValue) throws JNCException {
        User user = new User(idValue);
        return addUser(user);
    }

    /**
     * Adds list entry "user", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public User addUser(String idValue) throws JNCException {
        User user = new User(idValue);
        return addUser(user);
    }

    /**
     * Adds list entry "user".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public User addUser() throws JNCException {
        User user = new User();
        insertChild(user, childrenNames());
        return user;
    }

    /**
     * Deletes list entry "user", with specified keys.
     * @param idValue Key argument of child.
     */
    public void deleteUser(YangUInt32 idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "user", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public void deleteUser(String idValue) throws JNCException {
        String path = "user[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
