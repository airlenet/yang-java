/* 
 * @(#)Cmdrule.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-acm", revision: "2012-02-22".
 */

package com.airlenet.yang.model.ietfNetconfAcm.nacm.ruleList;

import com.airlenet.yang.model.ietfNetconfAcm.ActionType;
import com.airlenet.yang.model.tailfAcm.TacmPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEmpty;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfAcm/nacm/ruleList/cmdrule"
 * <p>
 * See line 73 in
 * src/main/yang/module/tailf/tailf-acm.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Cmdrule extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Cmdrule object.
     */
    public Cmdrule() {
        super(TacmPrefix.NAMESPACE, "cmdrule");
        setDefaultPrefix();
        setPrefix(TacmPrefix.PREFIX);
    }

    /**
     * Constructor for an initialized Cmdrule object,
     * 
     * @param nameValue Key argument of child.
     */
    public Cmdrule(YangString nameValue) throws JNCException {
        super(TacmPrefix.NAMESPACE, "cmdrule");
        setDefaultPrefix();
        setPrefix(TacmPrefix.PREFIX);
        Leaf name = new Leaf(TacmPrefix.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized Cmdrule object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public Cmdrule(String nameValue) throws JNCException {
        super(TacmPrefix.NAMESPACE, "cmdrule");
        setDefaultPrefix();
        setPrefix(TacmPrefix.PREFIX);
        Leaf name = new Leaf(TacmPrefix.NAMESPACE, "name");
        name.setValue(new com.tailf.jnc.YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Cmdrule clone() {
        Cmdrule copy;
        try {
            copy = new Cmdrule(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Cmdrule)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Cmdrule cloneShallow() {
        Cmdrule copy;
        try {
            copy = new Cmdrule(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Cmdrule)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "context",
            "command",
            "access-operations",
            "action",
            "log-if-permit",
            "comment",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "context". */

    /**
     * Gets the value for child leaf "context".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getContextValue() throws JNCException {
        com.tailf.jnc.YangUnion context = (com.tailf.jnc.YangUnion)getValue("context");
        if (context == null) {
            context = new com.tailf.jnc.YangUnion("*", new String[] {  // default
                "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
                "com.tailf.jnc.YangString",
            });
        }
        return context;
    }

    /**
     * Sets the value for child leaf "context",
     * using instance of generated typedef class.
     * @param contextValue The value to set.
     * @param contextValue used during instantiation.
     */
    public void setContextValue(com.tailf.jnc.YangUnion contextValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "context",
            contextValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "context",
     * using a String value.
     * @param contextValue used during instantiation.
     */
    public void setContextValue(String contextValue) throws JNCException {
        setContextValue(new com.tailf.jnc.YangUnion(contextValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * Unsets the value for child leaf "context".
     */
    public void unsetContextValue() throws JNCException {
        delete("context");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "context" leaf will not have a value.
     */
    public void addContext() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "context",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "context" with operation "replace".
     */
    public void markContextReplace() throws JNCException {
        markLeafReplace("context");
    }

    /**
     * Marks the leaf "context" with operation "merge".
     */
    public void markContextMerge() throws JNCException {
        markLeafMerge("context");
    }

    /**
     * Marks the leaf "context" with operation "create".
     */
    public void markContextCreate() throws JNCException {
        markLeafCreate("context");
    }

    /**
     * Marks the leaf "context" with operation "delete".
     */
    public void markContextDelete() throws JNCException {
        markLeafDelete("context");
    }

    /**
     * Marks the leaf "context" with operation "remove".
     */
    public void markContextRemove() throws JNCException {
        markLeafRemove("context");
    }

    /* Access methods for optional leaf child: "command". */

    /**
     * Gets the value for child leaf "command".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getCommandValue() throws JNCException {
        com.tailf.jnc.YangString command = (com.tailf.jnc.YangString)getValue("command");
        if (command == null) {
            command = new com.tailf.jnc.YangString("*");  // default
        }
        return command;
    }

    /**
     * Sets the value for child leaf "command",
     * using instance of generated typedef class.
     * @param commandValue The value to set.
     * @param commandValue used during instantiation.
     */
    public void setCommandValue(com.tailf.jnc.YangString commandValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "command",
            commandValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "command",
     * using a String value.
     * @param commandValue used during instantiation.
     */
    public void setCommandValue(String commandValue) throws JNCException {
        setCommandValue(new com.tailf.jnc.YangString(commandValue));
    }

    /**
     * Unsets the value for child leaf "command".
     */
    public void unsetCommandValue() throws JNCException {
        delete("command");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "command" leaf will not have a value.
     */
    public void addCommand() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "command",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "command" with operation "replace".
     */
    public void markCommandReplace() throws JNCException {
        markLeafReplace("command");
    }

    /**
     * Marks the leaf "command" with operation "merge".
     */
    public void markCommandMerge() throws JNCException {
        markLeafMerge("command");
    }

    /**
     * Marks the leaf "command" with operation "create".
     */
    public void markCommandCreate() throws JNCException {
        markLeafCreate("command");
    }

    /**
     * Marks the leaf "command" with operation "delete".
     */
    public void markCommandDelete() throws JNCException {
        markLeafDelete("command");
    }

    /**
     * Marks the leaf "command" with operation "remove".
     */
    public void markCommandRemove() throws JNCException {
        markLeafRemove("command");
    }

    /* Access methods for optional leaf child: "access-operations". */

    /**
     * Gets the value for child leaf "access-operations".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getAccessOperationsValue()
            throws JNCException {
        com.tailf.jnc.YangUnion accessOperations = (com.tailf.jnc.YangUnion)getValue("access-operations");
        if (accessOperations == null) {
            accessOperations = new com.tailf.jnc.YangUnion("*", new String[] {  // default
                "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
                "com.airlenet.yang.model.ietfNetconfAcm.AccessOperationsType",
            });
        }
        return accessOperations;
    }

    /**
     * Sets the value for child leaf "access-operations",
     * using instance of generated typedef class.
     * @param accessOperationsValue The value to set.
     * @param accessOperationsValue used during instantiation.
     */
    public void setAccessOperationsValue(com.tailf.jnc.YangUnion accessOperationsValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "access-operations",
            accessOperationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "access-operations",
     * using a String value.
     * @param accessOperationsValue used during instantiation.
     */
    public void setAccessOperationsValue(String accessOperationsValue)
            throws JNCException {
        setAccessOperationsValue(new com.tailf.jnc.YangUnion(accessOperationsValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.airlenet.yang.model.ietfNetconfAcm.AccessOperationsType",
        }));
    }

    /**
     * Unsets the value for child leaf "access-operations".
     */
    public void unsetAccessOperationsValue() throws JNCException {
        delete("access-operations");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "access-operations" leaf will not have a value.
     */
    public void addAccessOperations() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "access-operations",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "access-operations" with operation "replace".
     */
    public void markAccessOperationsReplace() throws JNCException {
        markLeafReplace("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "merge".
     */
    public void markAccessOperationsMerge() throws JNCException {
        markLeafMerge("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "create".
     */
    public void markAccessOperationsCreate() throws JNCException {
        markLeafCreate("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "delete".
     */
    public void markAccessOperationsDelete() throws JNCException {
        markLeafDelete("access-operations");
    }

    /**
     * Marks the leaf "access-operations" with operation "remove".
     */
    public void markAccessOperationsRemove() throws JNCException {
        markLeafRemove("access-operations");
    }

    /* Access methods for optional leaf child: "action". */

    /**
     * Gets the value for child leaf "action".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.ActionType getActionValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconfAcm.ActionType)getValue("action");
    }

    /**
     * Sets the value for child leaf "action",
     * using a JNC type value.
     * @param actionValue The value to set.
     * @param actionValue used during instantiation.
     */
    public void setActionValue(com.airlenet.yang.model.ietfNetconfAcm.ActionType actionValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "action",
            actionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "action",
     * using a String value.
     * @param actionValue used during instantiation.
     */
    public void setActionValue(String actionValue) throws JNCException {
        setActionValue(new com.airlenet.yang.model.ietfNetconfAcm.ActionType(actionValue));
    }

    /**
     * Unsets the value for child leaf "action".
     */
    public void unsetActionValue() throws JNCException {
        delete("action");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "action" leaf will not have a value.
     */
    public void addAction() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "action",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "action" with operation "replace".
     */
    public void markActionReplace() throws JNCException {
        markLeafReplace("action");
    }

    /**
     * Marks the leaf "action" with operation "merge".
     */
    public void markActionMerge() throws JNCException {
        markLeafMerge("action");
    }

    /**
     * Marks the leaf "action" with operation "create".
     */
    public void markActionCreate() throws JNCException {
        markLeafCreate("action");
    }

    /**
     * Marks the leaf "action" with operation "delete".
     */
    public void markActionDelete() throws JNCException {
        markLeafDelete("action");
    }

    /**
     * Marks the leaf "action" with operation "remove".
     */
    public void markActionRemove() throws JNCException {
        markLeafRemove("action");
    }

    /* Access methods for optional leaf child: "log-if-permit". */

    /**
     * Searches for leaf "log-if-permit".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getLogIfPermitValue() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("log-if-permit");
    }

    /**
     * Sets the value for child leaf "log-if-permit",
     * using instance of generated typedef class.
     * @param logIfPermitValue The value to set.
     * @param logIfPermitValue used during instantiation.
     */
    public void setLogIfPermitValue(com.tailf.jnc.YangEmpty logIfPermitValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "log-if-permit",
            logIfPermitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "log-if-permit",
     * by instantiating it (value n/a).
     * @param logIfPermitValue ignored.
     */
    public void setLogIfPermitValue(String logIfPermitValue)
            throws JNCException {
        setLogIfPermitValue(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "log-if-permit".
     */
    public void unsetLogIfPermitValue() throws JNCException {
        delete("log-if-permit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "log-if-permit" leaf will not have a value.
     */
    public void addLogIfPermit() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "log-if-permit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "log-if-permit" with operation "replace".
     */
    public void markLogIfPermitReplace() throws JNCException {
        markLeafReplace("log-if-permit");
    }

    /**
     * Marks the leaf "log-if-permit" with operation "merge".
     */
    public void markLogIfPermitMerge() throws JNCException {
        markLeafMerge("log-if-permit");
    }

    /**
     * Marks the leaf "log-if-permit" with operation "create".
     */
    public void markLogIfPermitCreate() throws JNCException {
        markLeafCreate("log-if-permit");
    }

    /**
     * Marks the leaf "log-if-permit" with operation "delete".
     */
    public void markLogIfPermitDelete() throws JNCException {
        markLeafDelete("log-if-permit");
    }

    /**
     * Marks the leaf "log-if-permit" with operation "remove".
     */
    public void markLogIfPermitRemove() throws JNCException {
        markLeafRemove("log-if-permit");
    }

    /* Access methods for optional leaf child: "comment". */

    /**
     * Gets the value for child leaf "comment".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getCommentValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("comment");
    }

    /**
     * Sets the value for child leaf "comment",
     * using instance of generated typedef class.
     * @param commentValue The value to set.
     * @param commentValue used during instantiation.
     */
    public void setCommentValue(com.tailf.jnc.YangString commentValue)
            throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "comment",
            commentValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "comment",
     * using a String value.
     * @param commentValue used during instantiation.
     */
    public void setCommentValue(String commentValue) throws JNCException {
        setCommentValue(new com.tailf.jnc.YangString(commentValue));
    }

    /**
     * Unsets the value for child leaf "comment".
     */
    public void unsetCommentValue() throws JNCException {
        delete("comment");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "comment" leaf will not have a value.
     */
    public void addComment() throws JNCException {
        setLeafValue(TacmPrefix.NAMESPACE,
            "comment",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "comment" with operation "replace".
     */
    public void markCommentReplace() throws JNCException {
        markLeafReplace("comment");
    }

    /**
     * Marks the leaf "comment" with operation "merge".
     */
    public void markCommentMerge() throws JNCException {
        markLeafMerge("comment");
    }

    /**
     * Marks the leaf "comment" with operation "create".
     */
    public void markCommentCreate() throws JNCException {
        markLeafCreate("comment");
    }

    /**
     * Marks the leaf "comment" with operation "delete".
     */
    public void markCommentDelete() throws JNCException {
        markLeafDelete("comment");
    }

    /**
     * Marks the leaf "comment" with operation "remove".
     */
    public void markCommentRemove() throws JNCException {
        markLeafRemove("comment");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
