/* 
 * @(#)Properties.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/panels/panel/properties"
 * <p>
 * See line 39 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Properties extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Properties object.
     */
    public Properties() {
        super(WebuiPrefix.NAMESPACE, "properties");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Properties clone() {
        return (Properties)cloneContent(new Properties());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Properties cloneShallow() {
        return (Properties)cloneShallowContent(new Properties());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "title",
            "description",
            "width",
            "height",
        };
    }

    /* Access methods for optional leaf child: "title". */

    /**
     * Gets the value for child leaf "title".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getTitleValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("title");
    }

    /**
     * Sets the value for child leaf "title",
     * using instance of generated typedef class.
     * @param titleValue The value to set.
     * @param titleValue used during instantiation.
     */
    public void setTitleValue(com.tailf.jnc.YangString titleValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "title",
            titleValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "title",
     * using a String value.
     * @param titleValue used during instantiation.
     */
    public void setTitleValue(String titleValue) throws JNCException {
        setTitleValue(new com.tailf.jnc.YangString(titleValue));
    }

    /**
     * Unsets the value for child leaf "title".
     */
    public void unsetTitleValue() throws JNCException {
        delete("title");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "title" leaf will not have a value.
     */
    public void addTitle() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "title",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "title" with operation "replace".
     */
    public void markTitleReplace() throws JNCException {
        markLeafReplace("title");
    }

    /**
     * Marks the leaf "title" with operation "merge".
     */
    public void markTitleMerge() throws JNCException {
        markLeafMerge("title");
    }

    /**
     * Marks the leaf "title" with operation "create".
     */
    public void markTitleCreate() throws JNCException {
        markLeafCreate("title");
    }

    /**
     * Marks the leaf "title" with operation "delete".
     */
    public void markTitleDelete() throws JNCException {
        markLeafDelete("title");
    }

    /**
     * Marks the leaf "title" with operation "remove".
     */
    public void markTitleRemove() throws JNCException {
        markLeafRemove("title");
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getDescriptionValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(com.tailf.jnc.YangString descriptionValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new com.tailf.jnc.YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /**
     * Marks the leaf "description" with operation "remove".
     */
    public void markDescriptionRemove() throws JNCException {
        markLeafRemove("description");
    }

    /* Access methods for optional leaf child: "width". */

    /**
     * Gets the value for child leaf "width".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getWidthValue() throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("width");
    }

    /**
     * Sets the value for child leaf "width",
     * using instance of generated typedef class.
     * @param widthValue The value to set.
     * @param widthValue used during instantiation.
     */
    public void setWidthValue(com.tailf.jnc.YangUInt16 widthValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "width",
            widthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "width",
     * using Java primitive values.
     * @param widthValue used during instantiation.
     */
    public void setWidthValue(int widthValue) throws JNCException {
        setWidthValue(new com.tailf.jnc.YangUInt16(widthValue));
    }

    /**
     * Sets the value for child leaf "width",
     * using a String value.
     * @param widthValue used during instantiation.
     */
    public void setWidthValue(String widthValue) throws JNCException {
        setWidthValue(new com.tailf.jnc.YangUInt16(widthValue));
    }

    /**
     * Unsets the value for child leaf "width".
     */
    public void unsetWidthValue() throws JNCException {
        delete("width");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "width" leaf will not have a value.
     */
    public void addWidth() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "width",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "width" with operation "replace".
     */
    public void markWidthReplace() throws JNCException {
        markLeafReplace("width");
    }

    /**
     * Marks the leaf "width" with operation "merge".
     */
    public void markWidthMerge() throws JNCException {
        markLeafMerge("width");
    }

    /**
     * Marks the leaf "width" with operation "create".
     */
    public void markWidthCreate() throws JNCException {
        markLeafCreate("width");
    }

    /**
     * Marks the leaf "width" with operation "delete".
     */
    public void markWidthDelete() throws JNCException {
        markLeafDelete("width");
    }

    /**
     * Marks the leaf "width" with operation "remove".
     */
    public void markWidthRemove() throws JNCException {
        markLeafRemove("width");
    }

    /* Access methods for optional leaf child: "height". */

    /**
     * Gets the value for child leaf "height".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getHeightValue() throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("height");
    }

    /**
     * Sets the value for child leaf "height",
     * using instance of generated typedef class.
     * @param heightValue The value to set.
     * @param heightValue used during instantiation.
     */
    public void setHeightValue(com.tailf.jnc.YangUInt16 heightValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "height",
            heightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "height",
     * using Java primitive values.
     * @param heightValue used during instantiation.
     */
    public void setHeightValue(int heightValue) throws JNCException {
        setHeightValue(new com.tailf.jnc.YangUInt16(heightValue));
    }

    /**
     * Sets the value for child leaf "height",
     * using a String value.
     * @param heightValue used during instantiation.
     */
    public void setHeightValue(String heightValue) throws JNCException {
        setHeightValue(new com.tailf.jnc.YangUInt16(heightValue));
    }

    /**
     * Unsets the value for child leaf "height".
     */
    public void unsetHeightValue() throws JNCException {
        delete("height");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "height" leaf will not have a value.
     */
    public void addHeight() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "height",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "height" with operation "replace".
     */
    public void markHeightReplace() throws JNCException {
        markLeafReplace("height");
    }

    /**
     * Marks the leaf "height" with operation "merge".
     */
    public void markHeightMerge() throws JNCException {
        markLeafMerge("height");
    }

    /**
     * Marks the leaf "height" with operation "create".
     */
    public void markHeightCreate() throws JNCException {
        markLeafCreate("height");
    }

    /**
     * Marks the leaf "height" with operation "delete".
     */
    public void markHeightDelete() throws JNCException {
        markLeafDelete("height");
    }

    /**
     * Marks the leaf "height" with operation "remove".
     */
    public void markHeightRemove() throws JNCException {
        markLeafRemove("height");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
