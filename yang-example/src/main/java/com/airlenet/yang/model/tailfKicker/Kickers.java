/* 
 * @(#)Kickers.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-kicker", revision: "2016-11-24".
 */

package com.airlenet.yang.model.tailfKicker;

import com.airlenet.yang.model.tailfKicker.KickerPrefix;
import com.airlenet.yang.model.tailfKicker.kickers.DataKicker;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/kicker
 * generated to "src/main/java/com.airlenet.yang.model/tailfKicker/kickers"
 * <p>
 * See line 42 in
 * src/main/yang/module/tailf/tailf-kicker.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Kickers extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Kickers object.
     */
    public Kickers() {
        super(KickerPrefix.NAMESPACE, "kickers");
        setDefaultPrefix();
        setPrefix(KickerPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Kickers clone() {
        return (Kickers)cloneContent(new Kickers());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Kickers cloneShallow() {
        return (Kickers)cloneShallowContent(new Kickers());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "data-kicker",
        };
    }

    /* Access methods for list child: "data-kicker". */

    /**
     * Gets list entry "dataKicker", with specified keys.
     * @param idValue Key argument of child.
     */
    public DataKicker getDataKicker(com.tailf.jnc.YangString idValue)
            throws JNCException {
        String path = "data-kicker[id='" + idValue + "']";
        return (DataKicker)searchOne(path);
    }

    /**
     * Gets list entry "dataKicker", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public DataKicker getDataKicker(String idValue) throws JNCException {
        String path = "data-kicker[id='" + idValue + "']";
        return (DataKicker)searchOne(path);
    }

    /**
     * Iterator method for the list "data-kicker".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator dataKickerIterator() {
        return new ElementChildrenIterator(children, "data-kicker");
    }

    /**
     * List method for the list "data-kicker".
     * @return An List for the list.
     */
    public List<DataKicker> getDataKickerList() {
        List<DataKicker> list = new ArrayList<>();
        ElementChildrenIterator iterator = dataKickerIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            DataKicker next =(DataKicker) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "dataKicker", using an existing object.
     * @param dataKicker The object to add.
     * @return The added child.
     */
    public DataKicker addDataKicker(DataKicker dataKicker) throws JNCException {
        insertChild(dataKicker, childrenNames());
        return dataKicker;
    }

    /**
     * Adds list entry "dataKicker", with specified keys.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public DataKicker addDataKicker(com.tailf.jnc.YangString idValue)
            throws JNCException {
        DataKicker dataKicker = new DataKicker(idValue);
        return addDataKicker(dataKicker);
    }

    /**
     * Adds list entry "dataKicker", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     * @return The added child.
     */
    public DataKicker addDataKicker(String idValue) throws JNCException {
        DataKicker dataKicker = new DataKicker(idValue);
        return addDataKicker(dataKicker);
    }

    /**
     * Adds list entry "dataKicker".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DataKicker addDataKicker() throws JNCException {
        DataKicker dataKicker = new DataKicker();
        insertChild(dataKicker, childrenNames());
        return dataKicker;
    }

    /**
     * Deletes list entry "dataKicker", with specified keys.
     * @param idValue Key argument of child.
     */
    public void deleteDataKicker(com.tailf.jnc.YangString idValue)
            throws JNCException {
        String path = "data-kicker[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "dataKicker", with specified keys.
     * The keys are specified as strings.
     * @param idValue Key argument of child.
     */
    public void deleteDataKicker(String idValue) throws JNCException {
        String path = "data-kicker[id='" + idValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
