/* 
 * @(#)Session.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.sessions;

import com.airlenet.yang.model.ietfInetTypes.Host;
import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.airlenet.yang.model.ietfYangTypes.DateAndTime;
import com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/sessions/session"
 * <p>
 * See line 405 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Session extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Session object.
     */
    public Session() {
        super(NcmPrefix.NAMESPACE, "session");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Session clone() {
        return (Session)cloneContent(new Session());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Session cloneShallow() {
        return (Session)cloneShallowContent(new Session());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "session-id",
            "transport",
            "username",
            "source-host",
            "login-time",
            "in-rpcs",
            "in-bad-rpcs",
            "out-rpc-errors",
            "out-notifications",
        };
    }

    /* Access methods for leaf child: "session-id". */

    /**
     * Gets the value for child leaf "session-id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt32 getSessionIdValue() throws JNCException {
        return (com.tailf.jnc.YangUInt32)getValue("session-id");
    }

    /**
     * Sets the value for child leaf "session-id",
     * using instance of generated typedef class.
     * @param sessionIdValue The value to set.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(com.tailf.jnc.YangUInt32 sessionIdValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "session-id",
            sessionIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-id",
     * using Java primitive values.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(long sessionIdValue) throws JNCException {
        setSessionIdValue(new com.tailf.jnc.YangUInt32(sessionIdValue));
    }

    /**
     * Sets the value for child leaf "session-id",
     * using a String value.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(String sessionIdValue) throws JNCException {
        setSessionIdValue(new com.tailf.jnc.YangUInt32(sessionIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-id" leaf will not have a value.
     */
    public void addSessionId() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "session-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "transport". */

    /**
     * Gets the value for child leaf "transport".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangIdentityref getTransportValue()
            throws JNCException {
        return (com.tailf.jnc.YangIdentityref)getValue("transport");
    }

    /**
     * Sets the value for child leaf "transport",
     * using instance of generated typedef class.
     * @param transportValue The value to set.
     * @param transportValue used during instantiation.
     */
    public void setTransportValue(com.tailf.jnc.YangIdentityref transportValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "transport",
            transportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "transport",
     * using a String value.
     * @param transportValue used during instantiation.
     */
    public void setTransportValue(String transportValue) throws JNCException {
        setTransportValue(new com.tailf.jnc.YangIdentityref(transportValue));
    }

    /**
     * Unsets the value for child leaf "transport".
     */
    public void unsetTransportValue() throws JNCException {
        delete("transport");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "transport" leaf will not have a value.
     */
    public void addTransport() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "transport",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "transport" with operation "replace".
     */
    public void markTransportReplace() throws JNCException {
        markLeafReplace("transport");
    }

    /**
     * Marks the leaf "transport" with operation "merge".
     */
    public void markTransportMerge() throws JNCException {
        markLeafMerge("transport");
    }

    /**
     * Marks the leaf "transport" with operation "create".
     */
    public void markTransportCreate() throws JNCException {
        markLeafCreate("transport");
    }

    /**
     * Marks the leaf "transport" with operation "delete".
     */
    public void markTransportDelete() throws JNCException {
        markLeafDelete("transport");
    }

    /**
     * Marks the leaf "transport" with operation "remove".
     */
    public void markTransportRemove() throws JNCException {
        markLeafRemove("transport");
    }

    /* Access methods for optional leaf child: "username". */

    /**
     * Gets the value for child leaf "username".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getUsernameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("username");
    }

    /**
     * Sets the value for child leaf "username",
     * using instance of generated typedef class.
     * @param usernameValue The value to set.
     * @param usernameValue used during instantiation.
     */
    public void setUsernameValue(com.tailf.jnc.YangString usernameValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "username",
            usernameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "username",
     * using a String value.
     * @param usernameValue used during instantiation.
     */
    public void setUsernameValue(String usernameValue) throws JNCException {
        setUsernameValue(new com.tailf.jnc.YangString(usernameValue));
    }

    /**
     * Unsets the value for child leaf "username".
     */
    public void unsetUsernameValue() throws JNCException {
        delete("username");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "username" leaf will not have a value.
     */
    public void addUsername() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "username",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "username" with operation "replace".
     */
    public void markUsernameReplace() throws JNCException {
        markLeafReplace("username");
    }

    /**
     * Marks the leaf "username" with operation "merge".
     */
    public void markUsernameMerge() throws JNCException {
        markLeafMerge("username");
    }

    /**
     * Marks the leaf "username" with operation "create".
     */
    public void markUsernameCreate() throws JNCException {
        markLeafCreate("username");
    }

    /**
     * Marks the leaf "username" with operation "delete".
     */
    public void markUsernameDelete() throws JNCException {
        markLeafDelete("username");
    }

    /**
     * Marks the leaf "username" with operation "remove".
     */
    public void markUsernameRemove() throws JNCException {
        markLeafRemove("username");
    }

    /* Access methods for optional leaf child: "source-host". */

    /**
     * Gets the value for child leaf "source-host".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.Host getSourceHostValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.Host)getValue("source-host");
    }

    /**
     * Sets the value for child leaf "source-host",
     * using a JNC type value.
     * @param sourceHostValue The value to set.
     * @param sourceHostValue used during instantiation.
     */
    public void setSourceHostValue(com.airlenet.yang.model.ietfInetTypes.Host sourceHostValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "source-host",
            sourceHostValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "source-host",
     * using a String value.
     * @param sourceHostValue used during instantiation.
     */
    public void setSourceHostValue(String sourceHostValue) throws JNCException {
        setSourceHostValue(new com.airlenet.yang.model.ietfInetTypes.Host(sourceHostValue));
    }

    /**
     * Unsets the value for child leaf "source-host".
     */
    public void unsetSourceHostValue() throws JNCException {
        delete("source-host");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "source-host" leaf will not have a value.
     */
    public void addSourceHost() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "source-host",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "source-host" with operation "replace".
     */
    public void markSourceHostReplace() throws JNCException {
        markLeafReplace("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "merge".
     */
    public void markSourceHostMerge() throws JNCException {
        markLeafMerge("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "create".
     */
    public void markSourceHostCreate() throws JNCException {
        markLeafCreate("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "delete".
     */
    public void markSourceHostDelete() throws JNCException {
        markLeafDelete("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "remove".
     */
    public void markSourceHostRemove() throws JNCException {
        markLeafRemove("source-host");
    }

    /* Access methods for optional leaf child: "login-time". */

    /**
     * Gets the value for child leaf "login-time".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.DateAndTime getLoginTimeValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.DateAndTime)getValue("login-time");
    }

    /**
     * Sets the value for child leaf "login-time",
     * using a JNC type value.
     * @param loginTimeValue The value to set.
     * @param loginTimeValue used during instantiation.
     */
    public void setLoginTimeValue(com.airlenet.yang.model.ietfYangTypes.DateAndTime loginTimeValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "login-time",
            loginTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "login-time",
     * using a String value.
     * @param loginTimeValue used during instantiation.
     */
    public void setLoginTimeValue(String loginTimeValue) throws JNCException {
        setLoginTimeValue(new com.airlenet.yang.model.ietfYangTypes.DateAndTime(loginTimeValue));
    }

    /**
     * Unsets the value for child leaf "login-time".
     */
    public void unsetLoginTimeValue() throws JNCException {
        delete("login-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "login-time" leaf will not have a value.
     */
    public void addLoginTime() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "login-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "login-time" with operation "replace".
     */
    public void markLoginTimeReplace() throws JNCException {
        markLeafReplace("login-time");
    }

    /**
     * Marks the leaf "login-time" with operation "merge".
     */
    public void markLoginTimeMerge() throws JNCException {
        markLeafMerge("login-time");
    }

    /**
     * Marks the leaf "login-time" with operation "create".
     */
    public void markLoginTimeCreate() throws JNCException {
        markLeafCreate("login-time");
    }

    /**
     * Marks the leaf "login-time" with operation "delete".
     */
    public void markLoginTimeDelete() throws JNCException {
        markLeafDelete("login-time");
    }

    /**
     * Marks the leaf "login-time" with operation "remove".
     */
    public void markLoginTimeRemove() throws JNCException {
        markLeafRemove("login-time");
    }

    /* Access methods for optional leaf child: "in-rpcs". */

    /**
     * Gets the value for child leaf "in-rpcs".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getInRpcsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("in-rpcs");
    }

    /**
     * Sets the value for child leaf "in-rpcs",
     * using a JNC type value.
     * @param inRpcsValue The value to set.
     * @param inRpcsValue used during instantiation.
     */
    public void setInRpcsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 inRpcsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-rpcs",
            inRpcsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-rpcs",
     * using Java primitive values.
     * @param inRpcsValue used during instantiation.
     */
    public void setInRpcsValue(long inRpcsValue) throws JNCException {
        setInRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inRpcsValue));
    }

    /**
     * Sets the value for child leaf "in-rpcs",
     * using a String value.
     * @param inRpcsValue used during instantiation.
     */
    public void setInRpcsValue(String inRpcsValue) throws JNCException {
        setInRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inRpcsValue));
    }

    /**
     * Unsets the value for child leaf "in-rpcs".
     */
    public void unsetInRpcsValue() throws JNCException {
        delete("in-rpcs");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-rpcs" leaf will not have a value.
     */
    public void addInRpcs() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-rpcs",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-rpcs" with operation "replace".
     */
    public void markInRpcsReplace() throws JNCException {
        markLeafReplace("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "merge".
     */
    public void markInRpcsMerge() throws JNCException {
        markLeafMerge("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "create".
     */
    public void markInRpcsCreate() throws JNCException {
        markLeafCreate("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "delete".
     */
    public void markInRpcsDelete() throws JNCException {
        markLeafDelete("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "remove".
     */
    public void markInRpcsRemove() throws JNCException {
        markLeafRemove("in-rpcs");
    }

    /* Access methods for optional leaf child: "in-bad-rpcs". */

    /**
     * Gets the value for child leaf "in-bad-rpcs".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getInBadRpcsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("in-bad-rpcs");
    }

    /**
     * Sets the value for child leaf "in-bad-rpcs",
     * using a JNC type value.
     * @param inBadRpcsValue The value to set.
     * @param inBadRpcsValue used during instantiation.
     */
    public void setInBadRpcsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 inBadRpcsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-bad-rpcs",
            inBadRpcsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-bad-rpcs",
     * using Java primitive values.
     * @param inBadRpcsValue used during instantiation.
     */
    public void setInBadRpcsValue(long inBadRpcsValue) throws JNCException {
        setInBadRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inBadRpcsValue));
    }

    /**
     * Sets the value for child leaf "in-bad-rpcs",
     * using a String value.
     * @param inBadRpcsValue used during instantiation.
     */
    public void setInBadRpcsValue(String inBadRpcsValue) throws JNCException {
        setInBadRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inBadRpcsValue));
    }

    /**
     * Unsets the value for child leaf "in-bad-rpcs".
     */
    public void unsetInBadRpcsValue() throws JNCException {
        delete("in-bad-rpcs");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-bad-rpcs" leaf will not have a value.
     */
    public void addInBadRpcs() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-bad-rpcs",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "replace".
     */
    public void markInBadRpcsReplace() throws JNCException {
        markLeafReplace("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "merge".
     */
    public void markInBadRpcsMerge() throws JNCException {
        markLeafMerge("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "create".
     */
    public void markInBadRpcsCreate() throws JNCException {
        markLeafCreate("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "delete".
     */
    public void markInBadRpcsDelete() throws JNCException {
        markLeafDelete("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "remove".
     */
    public void markInBadRpcsRemove() throws JNCException {
        markLeafRemove("in-bad-rpcs");
    }

    /* Access methods for optional leaf child: "out-rpc-errors". */

    /**
     * Gets the value for child leaf "out-rpc-errors".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getOutRpcErrorsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("out-rpc-errors");
    }

    /**
     * Sets the value for child leaf "out-rpc-errors",
     * using a JNC type value.
     * @param outRpcErrorsValue The value to set.
     * @param outRpcErrorsValue used during instantiation.
     */
    public void setOutRpcErrorsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 outRpcErrorsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-rpc-errors",
            outRpcErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-rpc-errors",
     * using Java primitive values.
     * @param outRpcErrorsValue used during instantiation.
     */
    public void setOutRpcErrorsValue(long outRpcErrorsValue)
            throws JNCException {
        setOutRpcErrorsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outRpcErrorsValue));
    }

    /**
     * Sets the value for child leaf "out-rpc-errors",
     * using a String value.
     * @param outRpcErrorsValue used during instantiation.
     */
    public void setOutRpcErrorsValue(String outRpcErrorsValue)
            throws JNCException {
        setOutRpcErrorsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outRpcErrorsValue));
    }

    /**
     * Unsets the value for child leaf "out-rpc-errors".
     */
    public void unsetOutRpcErrorsValue() throws JNCException {
        delete("out-rpc-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-rpc-errors" leaf will not have a value.
     */
    public void addOutRpcErrors() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-rpc-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "replace".
     */
    public void markOutRpcErrorsReplace() throws JNCException {
        markLeafReplace("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "merge".
     */
    public void markOutRpcErrorsMerge() throws JNCException {
        markLeafMerge("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "create".
     */
    public void markOutRpcErrorsCreate() throws JNCException {
        markLeafCreate("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "delete".
     */
    public void markOutRpcErrorsDelete() throws JNCException {
        markLeafDelete("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "remove".
     */
    public void markOutRpcErrorsRemove() throws JNCException {
        markLeafRemove("out-rpc-errors");
    }

    /* Access methods for optional leaf child: "out-notifications". */

    /**
     * Gets the value for child leaf "out-notifications".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getOutNotificationsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("out-notifications");
    }

    /**
     * Sets the value for child leaf "out-notifications",
     * using a JNC type value.
     * @param outNotificationsValue The value to set.
     * @param outNotificationsValue used during instantiation.
     */
    public void setOutNotificationsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 outNotificationsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-notifications",
            outNotificationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-notifications",
     * using Java primitive values.
     * @param outNotificationsValue used during instantiation.
     */
    public void setOutNotificationsValue(long outNotificationsValue)
            throws JNCException {
        setOutNotificationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outNotificationsValue));
    }

    /**
     * Sets the value for child leaf "out-notifications",
     * using a String value.
     * @param outNotificationsValue used during instantiation.
     */
    public void setOutNotificationsValue(String outNotificationsValue)
            throws JNCException {
        setOutNotificationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outNotificationsValue));
    }

    /**
     * Unsets the value for child leaf "out-notifications".
     */
    public void unsetOutNotificationsValue() throws JNCException {
        delete("out-notifications");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-notifications" leaf will not have a value.
     */
    public void addOutNotifications() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-notifications",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-notifications" with operation "replace".
     */
    public void markOutNotificationsReplace() throws JNCException {
        markLeafReplace("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "merge".
     */
    public void markOutNotificationsMerge() throws JNCException {
        markLeafMerge("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "create".
     */
    public void markOutNotificationsCreate() throws JNCException {
        markLeafCreate("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "delete".
     */
    public void markOutNotificationsDelete() throws JNCException {
        markLeafDelete("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "remove".
     */
    public void markOutNotificationsRemove() throws JNCException {
        markLeafRemove("out-notifications");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
