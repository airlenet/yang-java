/* 
 * @(#)NetconfConfirmedCommit.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-notifications", revision: "2012-02-06".
 */

package com.airlenet.yang.model.ietfNetconfNotifications;

import com.airlenet.yang.model.ietfInetTypes.IpAddress;
import com.airlenet.yang.model.ietfNetconf.SessionIdOrZeroType;
import com.airlenet.yang.model.ietfNetconfNotifications.NcnPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-notifications
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfNotifications/netconf-confirmed-commit"
 * <p>
 * See line 274 in
 * src/main/yang/module/ietf/ietf-netconf-notifications.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class NetconfConfirmedCommit extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty NetconfConfirmedCommit object.
     */
    public NetconfConfirmedCommit() {
        super(NcnPrefix.NAMESPACE, "netconf-confirmed-commit");
        setDefaultPrefix();
        setPrefix(NcnPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NetconfConfirmedCommit clone() {
        return (NetconfConfirmedCommit)cloneContent(new NetconfConfirmedCommit());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NetconfConfirmedCommit cloneShallow() {
        return (NetconfConfirmedCommit)cloneShallowContent(new NetconfConfirmedCommit());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "username",
            "session-id",
            "source-host",
            "confirm-event",
            "timeout",
        };
    }

    /* Access methods for optional leaf child: "username". */

    /**
     * Gets the value for child leaf "username".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getUsernameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("username");
    }

    /**
     * Sets the value for child leaf "username",
     * using instance of generated typedef class.
     * @param usernameValue The value to set.
     * @param usernameValue used during instantiation.
     */
    public void setUsernameValue(com.tailf.jnc.YangString usernameValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "username",
            usernameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "username",
     * using a String value.
     * @param usernameValue used during instantiation.
     */
    public void setUsernameValue(String usernameValue) throws JNCException {
        setUsernameValue(new com.tailf.jnc.YangString(usernameValue));
    }

    /**
     * Unsets the value for child leaf "username".
     */
    public void unsetUsernameValue() throws JNCException {
        delete("username");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "username" leaf will not have a value.
     */
    public void addUsername() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "username",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "username" with operation "replace".
     */
    public void markUsernameReplace() throws JNCException {
        markLeafReplace("username");
    }

    /**
     * Marks the leaf "username" with operation "merge".
     */
    public void markUsernameMerge() throws JNCException {
        markLeafMerge("username");
    }

    /**
     * Marks the leaf "username" with operation "create".
     */
    public void markUsernameCreate() throws JNCException {
        markLeafCreate("username");
    }

    /**
     * Marks the leaf "username" with operation "delete".
     */
    public void markUsernameDelete() throws JNCException {
        markLeafDelete("username");
    }

    /**
     * Marks the leaf "username" with operation "remove".
     */
    public void markUsernameRemove() throws JNCException {
        markLeafRemove("username");
    }

    /* Access methods for optional leaf child: "session-id". */

    /**
     * Gets the value for child leaf "session-id".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconf.SessionIdOrZeroType getSessionIdValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconf.SessionIdOrZeroType)getValue("session-id");
    }

    /**
     * Sets the value for child leaf "session-id",
     * using a JNC type value.
     * @param sessionIdValue The value to set.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(com.airlenet.yang.model.ietfNetconf.SessionIdOrZeroType sessionIdValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "session-id",
            sessionIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "session-id",
     * using Java primitive values.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(long sessionIdValue) throws JNCException {
        setSessionIdValue(new com.airlenet.yang.model.ietfNetconf.SessionIdOrZeroType(sessionIdValue));
    }

    /**
     * Sets the value for child leaf "session-id",
     * using a String value.
     * @param sessionIdValue used during instantiation.
     */
    public void setSessionIdValue(String sessionIdValue) throws JNCException {
        setSessionIdValue(new com.airlenet.yang.model.ietfNetconf.SessionIdOrZeroType(sessionIdValue));
    }

    /**
     * Unsets the value for child leaf "session-id".
     */
    public void unsetSessionIdValue() throws JNCException {
        delete("session-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "session-id" leaf will not have a value.
     */
    public void addSessionId() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "session-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "session-id" with operation "replace".
     */
    public void markSessionIdReplace() throws JNCException {
        markLeafReplace("session-id");
    }

    /**
     * Marks the leaf "session-id" with operation "merge".
     */
    public void markSessionIdMerge() throws JNCException {
        markLeafMerge("session-id");
    }

    /**
     * Marks the leaf "session-id" with operation "create".
     */
    public void markSessionIdCreate() throws JNCException {
        markLeafCreate("session-id");
    }

    /**
     * Marks the leaf "session-id" with operation "delete".
     */
    public void markSessionIdDelete() throws JNCException {
        markLeafDelete("session-id");
    }

    /**
     * Marks the leaf "session-id" with operation "remove".
     */
    public void markSessionIdRemove() throws JNCException {
        markLeafRemove("session-id");
    }

    /* Access methods for optional leaf child: "source-host". */

    /**
     * Gets the value for child leaf "source-host".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.IpAddress getSourceHostValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.IpAddress)getValue("source-host");
    }

    /**
     * Sets the value for child leaf "source-host",
     * using a JNC type value.
     * @param sourceHostValue The value to set.
     * @param sourceHostValue used during instantiation.
     */
    public void setSourceHostValue(com.airlenet.yang.model.ietfInetTypes.IpAddress sourceHostValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "source-host",
            sourceHostValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "source-host",
     * using a String value.
     * @param sourceHostValue used during instantiation.
     */
    public void setSourceHostValue(String sourceHostValue) throws JNCException {
        setSourceHostValue(new com.airlenet.yang.model.ietfInetTypes.IpAddress(sourceHostValue));
    }

    /**
     * Unsets the value for child leaf "source-host".
     */
    public void unsetSourceHostValue() throws JNCException {
        delete("source-host");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "source-host" leaf will not have a value.
     */
    public void addSourceHost() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "source-host",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "source-host" with operation "replace".
     */
    public void markSourceHostReplace() throws JNCException {
        markLeafReplace("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "merge".
     */
    public void markSourceHostMerge() throws JNCException {
        markLeafMerge("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "create".
     */
    public void markSourceHostCreate() throws JNCException {
        markLeafCreate("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "delete".
     */
    public void markSourceHostDelete() throws JNCException {
        markLeafDelete("source-host");
    }

    /**
     * Marks the leaf "source-host" with operation "remove".
     */
    public void markSourceHostRemove() throws JNCException {
        markLeafRemove("source-host");
    }

    /* Access methods for optional leaf child: "confirm-event". */

    /**
     * Gets the value for child leaf "confirm-event".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getConfirmEventValue()
            throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("confirm-event");
    }

    /**
     * Sets the value for child leaf "confirm-event",
     * using instance of generated typedef class.
     * @param confirmEventValue The value to set.
     * @param confirmEventValue used during instantiation.
     */
    public void setConfirmEventValue(com.tailf.jnc.YangEnumeration confirmEventValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "confirm-event",
            confirmEventValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "confirm-event",
     * using a String value.
     * @param confirmEventValue used during instantiation.
     */
    public void setConfirmEventValue(String confirmEventValue)
            throws JNCException {
        setConfirmEventValue(new com.tailf.jnc.YangEnumeration(confirmEventValue, new String[] {
             "start",
             "cancel",
             "timeout",
             "extend",
             "complete",
        }));
    }

    /**
     * Unsets the value for child leaf "confirm-event".
     */
    public void unsetConfirmEventValue() throws JNCException {
        delete("confirm-event");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "confirm-event" leaf will not have a value.
     */
    public void addConfirmEvent() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "confirm-event",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "confirm-event" with operation "replace".
     */
    public void markConfirmEventReplace() throws JNCException {
        markLeafReplace("confirm-event");
    }

    /**
     * Marks the leaf "confirm-event" with operation "merge".
     */
    public void markConfirmEventMerge() throws JNCException {
        markLeafMerge("confirm-event");
    }

    /**
     * Marks the leaf "confirm-event" with operation "create".
     */
    public void markConfirmEventCreate() throws JNCException {
        markLeafCreate("confirm-event");
    }

    /**
     * Marks the leaf "confirm-event" with operation "delete".
     */
    public void markConfirmEventDelete() throws JNCException {
        markLeafDelete("confirm-event");
    }

    /**
     * Marks the leaf "confirm-event" with operation "remove".
     */
    public void markConfirmEventRemove() throws JNCException {
        markLeafRemove("confirm-event");
    }

    /* Access methods for optional leaf child: "timeout". */

    /**
     * Gets the value for child leaf "timeout".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt32 getTimeoutValue() throws JNCException {
        return (com.tailf.jnc.YangUInt32)getValue("timeout");
    }

    /**
     * Sets the value for child leaf "timeout",
     * using instance of generated typedef class.
     * @param timeoutValue The value to set.
     * @param timeoutValue used during instantiation.
     */
    public void setTimeoutValue(com.tailf.jnc.YangUInt32 timeoutValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "timeout",
            timeoutValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "timeout",
     * using Java primitive values.
     * @param timeoutValue used during instantiation.
     */
    public void setTimeoutValue(long timeoutValue) throws JNCException {
        setTimeoutValue(new com.tailf.jnc.YangUInt32(timeoutValue));
    }

    /**
     * Sets the value for child leaf "timeout",
     * using a String value.
     * @param timeoutValue used during instantiation.
     */
    public void setTimeoutValue(String timeoutValue) throws JNCException {
        setTimeoutValue(new com.tailf.jnc.YangUInt32(timeoutValue));
    }

    /**
     * Unsets the value for child leaf "timeout".
     */
    public void unsetTimeoutValue() throws JNCException {
        delete("timeout");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "timeout" leaf will not have a value.
     */
    public void addTimeout() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "timeout",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "timeout" with operation "replace".
     */
    public void markTimeoutReplace() throws JNCException {
        markLeafReplace("timeout");
    }

    /**
     * Marks the leaf "timeout" with operation "merge".
     */
    public void markTimeoutMerge() throws JNCException {
        markLeafMerge("timeout");
    }

    /**
     * Marks the leaf "timeout" with operation "create".
     */
    public void markTimeoutCreate() throws JNCException {
        markLeafCreate("timeout");
    }

    /**
     * Marks the leaf "timeout" with operation "delete".
     */
    public void markTimeoutDelete() throws JNCException {
        markLeafDelete("timeout");
    }

    /**
     * Marks the leaf "timeout" with operation "remove".
     */
    public void markTimeoutRemove() throws JNCException {
        markLeafRemove("timeout");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
