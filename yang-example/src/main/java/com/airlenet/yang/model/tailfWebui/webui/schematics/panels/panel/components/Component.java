/* 
 * @(#)Component.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.Properties;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/panels/panel/components/component"
 * <p>
 * See line 61 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Component extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "properties".
     */
    public Properties properties = null;
    public Properties getProperties() {
        return this.properties;
    }

    /**
     * Constructor for an empty Component object.
     */
    public Component() {
        super(WebuiPrefix.NAMESPACE, "component");
    }

    /**
     * Constructor for an initialized Component object,
     * 
     * @param idValue Key argument of child.
     */
    public Component(YangString idValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "component");
        Leaf id = new Leaf(WebuiPrefix.NAMESPACE, "id");
        id.setValue(idValue);
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Component object,
     * with String keys.
     * @param idValue Key argument of child.
     */
    public Component(String idValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "component");
        Leaf id = new Leaf(WebuiPrefix.NAMESPACE, "id");
        id.setValue(new com.tailf.jnc.YangString(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Component clone() {
        Component copy;
        try {
            copy = new Component(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Component)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Component cloneShallow() {
        Component copy;
        try {
            copy = new Component(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Component)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "id",
            "properties",
        };
    }

    /* Access methods for leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getIdValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(com.tailf.jnc.YangString idValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new com.tailf.jnc.YangString(idValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /* Access methods for container child: "properties". */

    /**
     * Adds container entry "properties", using an existing object.
     * @param properties The object to add.
     * @return The added child.
     */
    public Properties addProperties(Properties properties) throws JNCException {
        this.properties = properties;
        insertChild(properties, childrenNames());
        return properties;
    }

    /**
     * Adds container entry "properties".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Properties addProperties() throws JNCException {
        Properties properties = new Properties();
        this.properties = properties;
        insertChild(properties, childrenNames());
        return properties;
    }

    /**
     * Deletes container entry "properties".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteProperties() throws JNCException {
        this.properties = null;
        String path = "properties";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Properties) properties = (Properties)child;
    }

}
