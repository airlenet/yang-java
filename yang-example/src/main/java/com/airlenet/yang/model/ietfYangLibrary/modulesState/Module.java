/* 
 * @(#)Module.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-yang-library", revision: "2016-06-21".
 */

package com.airlenet.yang.model.ietfYangLibrary.modulesState;

import com.airlenet.yang.model.ietfInetTypes.Uri;
import com.airlenet.yang.model.ietfYangLibrary.YanglibPrefix;
import com.airlenet.yang.model.ietfYangLibrary.modulesState.module.Deviation;
import com.airlenet.yang.model.ietfYangLibrary.modulesState.module.Submodule;
import com.airlenet.yang.model.ietfYangTypes.YangIdentifier;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-yang-library
 * generated to "src/main/java/com.airlenet.yang.model/ietfYangLibrary/modulesState/module"
 * <p>
 * See line 117 in
 * src/main/yang/module/ietf/ietf-yang-library.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Module extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Module object.
     */
    public Module() {
        super(YanglibPrefix.NAMESPACE, "module");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Module clone() {
        return (Module)cloneContent(new Module());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Module cloneShallow() {
        return (Module)cloneShallowContent(new Module());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "revision",
            "schema",
            "namespace",
            "feature",
            "deviation",
            "conformance-type",
            "submodule",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.YangIdentifier getNameValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.YangIdentifier)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using a JNC type value.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.airlenet.yang.model.ietfYangTypes.YangIdentifier nameValue)
            throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.airlenet.yang.model.ietfYangTypes.YangIdentifier(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "revision". */

    /**
     * Gets the value for child leaf "revision".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getRevisionValue() throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("revision");
    }

    /**
     * Sets the value for child leaf "revision",
     * using instance of generated typedef class.
     * @param revisionValue The value to set.
     * @param revisionValue used during instantiation.
     */
    public void setRevisionValue(com.tailf.jnc.YangUnion revisionValue)
            throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "revision",
            revisionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "revision",
     * using a String value.
     * @param revisionValue used during instantiation.
     */
    public void setRevisionValue(String revisionValue) throws JNCException {
        setRevisionValue(new com.tailf.jnc.YangUnion(revisionValue, new String[] {
             "com.airlenet.yang.model.ietfYangLibrary.RevisionIdentifier",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "revision" leaf will not have a value.
     */
    public void addRevision() throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "revision",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "schema". */

    /**
     * Gets the value for child leaf "schema".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.Uri getSchemaValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.Uri)getValue("schema");
    }

    /**
     * Sets the value for child leaf "schema",
     * using a JNC type value.
     * @param schemaValue The value to set.
     * @param schemaValue used during instantiation.
     */
    public void setSchemaValue(com.airlenet.yang.model.ietfInetTypes.Uri schemaValue)
            throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "schema",
            schemaValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "schema",
     * using a String value.
     * @param schemaValue used during instantiation.
     */
    public void setSchemaValue(String schemaValue) throws JNCException {
        setSchemaValue(new com.airlenet.yang.model.ietfInetTypes.Uri(schemaValue));
    }

    /**
     * Unsets the value for child leaf "schema".
     */
    public void unsetSchemaValue() throws JNCException {
        delete("schema");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "schema" leaf will not have a value.
     */
    public void addSchema() throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "schema",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "schema" with operation "replace".
     */
    public void markSchemaReplace() throws JNCException {
        markLeafReplace("schema");
    }

    /**
     * Marks the leaf "schema" with operation "merge".
     */
    public void markSchemaMerge() throws JNCException {
        markLeafMerge("schema");
    }

    /**
     * Marks the leaf "schema" with operation "create".
     */
    public void markSchemaCreate() throws JNCException {
        markLeafCreate("schema");
    }

    /**
     * Marks the leaf "schema" with operation "delete".
     */
    public void markSchemaDelete() throws JNCException {
        markLeafDelete("schema");
    }

    /**
     * Marks the leaf "schema" with operation "remove".
     */
    public void markSchemaRemove() throws JNCException {
        markLeafRemove("schema");
    }

    /* Access methods for optional leaf child: "namespace". */

    /**
     * Gets the value for child leaf "namespace".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.Uri getNamespaceValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.Uri)getValue("namespace");
    }

    /**
     * Sets the value for child leaf "namespace",
     * using a JNC type value.
     * @param namespaceValue The value to set.
     * @param namespaceValue used during instantiation.
     */
    public void setNamespaceValue(com.airlenet.yang.model.ietfInetTypes.Uri namespaceValue)
            throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "namespace",
            namespaceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "namespace",
     * using a String value.
     * @param namespaceValue used during instantiation.
     */
    public void setNamespaceValue(String namespaceValue) throws JNCException {
        setNamespaceValue(new com.airlenet.yang.model.ietfInetTypes.Uri(namespaceValue));
    }

    /**
     * Unsets the value for child leaf "namespace".
     */
    public void unsetNamespaceValue() throws JNCException {
        delete("namespace");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "namespace" leaf will not have a value.
     */
    public void addNamespace() throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "namespace",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "namespace" with operation "replace".
     */
    public void markNamespaceReplace() throws JNCException {
        markLeafReplace("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "merge".
     */
    public void markNamespaceMerge() throws JNCException {
        markLeafMerge("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "create".
     */
    public void markNamespaceCreate() throws JNCException {
        markLeafCreate("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "delete".
     */
    public void markNamespaceDelete() throws JNCException {
        markLeafDelete("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "remove".
     */
    public void markNamespaceRemove() throws JNCException {
        markLeafRemove("namespace");
    }

    /* Access methods for optional leaf-list child: "feature". */

    /**
     * Iterator method for the leaf-list "feature".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator featureIterator() {
        return new ElementLeafListValueIterator(children, "feature");
    }

    /**
     * List method for the leaf-list "feature".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfYangTypes.YangIdentifier> getFeatureList() {
        List<com.airlenet.yang.model.ietfYangTypes.YangIdentifier> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = featureIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfYangTypes.YangIdentifier next =(com.airlenet.yang.model.ietfYangTypes.YangIdentifier) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "feature",
     * using a JNC type value.
     * @param featureValue The value to set.
     * @param featureValue used during instantiation.
     */
    public void setFeatureValue(com.airlenet.yang.model.ietfYangTypes.YangIdentifier featureValue)
            throws JNCException {
        setLeafListValue(YanglibPrefix.NAMESPACE,
            "feature",
            featureValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "feature",
     * using a String value.
     * @param featureValue used during instantiation.
     */
    public void setFeatureValue(String featureValue) throws JNCException {
        setFeatureValue(new com.airlenet.yang.model.ietfYangTypes.YangIdentifier(featureValue));
    }

    /**
     * Deletes leaf-list entry "feature".
     * @param featureValue Value to delete.
     */
    public void deleteFeature(YangIdentifier featureValue) throws JNCException {
        String path = "feature[featureValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "feature".
     * The value is specified as a string.
     * @param featureValue Value to delete.
     */
    public void deleteFeature(String featureValue) throws JNCException {
        String path = "feature[featureValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "feature" leaf-list will not have a value.
     */
    public void addFeature() throws JNCException {
        setLeafListValue(YanglibPrefix.NAMESPACE,
            "feature",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "feature" with operation "replace".
     * @param featureValue The value to mark
     */
    public void markFeatureReplace(YangIdentifier featureValue)
            throws JNCException {
        markLeafReplace("feature[name='" + featureValue + "']");
    }

    /**
     * Marks the leaf-list "feature" with operation "merge".
     * @param featureValue The value to mark
     */
    public void markFeatureMerge(YangIdentifier featureValue)
            throws JNCException {
        markLeafMerge("feature[name='" + featureValue + "']");
    }

    /**
     * Marks the leaf-list "feature" with operation "create".
     * @param featureValue The value to mark
     */
    public void markFeatureCreate(YangIdentifier featureValue)
            throws JNCException {
        markLeafCreate("feature[name='" + featureValue + "']");
    }

    /**
     * Marks the leaf-list "feature" with operation "delete".
     * @param featureValue The value to mark
     */
    public void markFeatureDelete(YangIdentifier featureValue)
            throws JNCException {
        markLeafDelete("feature[name='" + featureValue + "']");
    }

    /**
     * Marks the leaf-list "feature" with operation "remove".
     * @param featureValue The value to mark
     */
    public void markFeatureRemove(YangIdentifier featureValue)
            throws JNCException {
        markLeafRemove("feature[name='" + featureValue + "']");
    }

    /* Access methods for list child: "deviation". */

    /**
     * Gets list entry "deviation", with specified keys.
     */
    public Deviation getDeviation() throws JNCException {
        String path = "deviation";
        return (Deviation)searchOne(path);
    }

    /**
     * Iterator method for the list "deviation".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator deviationIterator() {
        return new ElementChildrenIterator(children, "deviation");
    }

    /**
     * List method for the list "deviation".
     * @return An List for the list.
     */
    public List<Deviation> getDeviationList() {
        List<Deviation> list = new ArrayList<>();
        ElementChildrenIterator iterator = deviationIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Deviation next =(Deviation) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "deviation", using an existing object.
     * @param deviation The object to add.
     * @return The added child.
     */
    public Deviation addDeviation(Deviation deviation) throws JNCException {
        insertChild(deviation, childrenNames());
        return deviation;
    }

    /**
     * Adds list entry "deviation".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Deviation addDeviation() throws JNCException {
        Deviation deviation = new Deviation();
        insertChild(deviation, childrenNames());
        return deviation;
    }

    /**
     * Deletes list entry "deviation", with specified keys.
     */
    public void deleteDeviation() throws JNCException {
        String path = "deviation";
        delete(path);
    }

    /* Access methods for optional leaf child: "conformance-type". */

    /**
     * Gets the value for child leaf "conformance-type".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getConformanceTypeValue()
            throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("conformance-type");
    }

    /**
     * Sets the value for child leaf "conformance-type",
     * using instance of generated typedef class.
     * @param conformanceTypeValue The value to set.
     * @param conformanceTypeValue used during instantiation.
     */
    public void setConformanceTypeValue(com.tailf.jnc.YangEnumeration conformanceTypeValue)
            throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "conformance-type",
            conformanceTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "conformance-type",
     * using a String value.
     * @param conformanceTypeValue used during instantiation.
     */
    public void setConformanceTypeValue(String conformanceTypeValue)
            throws JNCException {
        setConformanceTypeValue(new com.tailf.jnc.YangEnumeration(conformanceTypeValue, new String[] {
             "implement",
             "import",
        }));
    }

    /**
     * Unsets the value for child leaf "conformance-type".
     */
    public void unsetConformanceTypeValue() throws JNCException {
        delete("conformance-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "conformance-type" leaf will not have a value.
     */
    public void addConformanceType() throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "conformance-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "conformance-type" with operation "replace".
     */
    public void markConformanceTypeReplace() throws JNCException {
        markLeafReplace("conformance-type");
    }

    /**
     * Marks the leaf "conformance-type" with operation "merge".
     */
    public void markConformanceTypeMerge() throws JNCException {
        markLeafMerge("conformance-type");
    }

    /**
     * Marks the leaf "conformance-type" with operation "create".
     */
    public void markConformanceTypeCreate() throws JNCException {
        markLeafCreate("conformance-type");
    }

    /**
     * Marks the leaf "conformance-type" with operation "delete".
     */
    public void markConformanceTypeDelete() throws JNCException {
        markLeafDelete("conformance-type");
    }

    /**
     * Marks the leaf "conformance-type" with operation "remove".
     */
    public void markConformanceTypeRemove() throws JNCException {
        markLeafRemove("conformance-type");
    }

    /* Access methods for list child: "submodule". */

    /**
     * Gets list entry "submodule", with specified keys.
     */
    public Submodule getSubmodule() throws JNCException {
        String path = "submodule";
        return (Submodule)searchOne(path);
    }

    /**
     * Iterator method for the list "submodule".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator submoduleIterator() {
        return new ElementChildrenIterator(children, "submodule");
    }

    /**
     * List method for the list "submodule".
     * @return An List for the list.
     */
    public List<Submodule> getSubmoduleList() {
        List<Submodule> list = new ArrayList<>();
        ElementChildrenIterator iterator = submoduleIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Submodule next =(Submodule) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "submodule", using an existing object.
     * @param submodule The object to add.
     * @return The added child.
     */
    public Submodule addSubmodule(Submodule submodule) throws JNCException {
        insertChild(submodule, childrenNames());
        return submodule;
    }

    /**
     * Adds list entry "submodule".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Submodule addSubmodule() throws JNCException {
        Submodule submodule = new Submodule();
        insertChild(submodule, childrenNames());
        return submodule;
    }

    /**
     * Deletes list entry "submodule", with specified keys.
     */
    public void deleteSubmodule() throws JNCException {
        String path = "submodule";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
