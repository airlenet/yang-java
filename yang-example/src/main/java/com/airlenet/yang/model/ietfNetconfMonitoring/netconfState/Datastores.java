/* 
 * @(#)Datastores.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState;

import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.datastores.Datastore;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/datastores"
 * <p>
 * See line 211 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Datastores extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Datastores object.
     */
    public Datastores() {
        super(NcmPrefix.NAMESPACE, "datastores");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Datastores clone() {
        return (Datastores)cloneContent(new Datastores());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Datastores cloneShallow() {
        return (Datastores)cloneShallowContent(new Datastores());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "datastore",
        };
    }

    /* Access methods for list child: "datastore". */

    /**
     * Gets list entry "datastore", with specified keys.
     */
    public Datastore getDatastore() throws JNCException {
        String path = "datastore";
        return (Datastore)searchOne(path);
    }

    /**
     * Iterator method for the list "datastore".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator datastoreIterator() {
        return new ElementChildrenIterator(children, "datastore");
    }

    /**
     * List method for the list "datastore".
     * @return An List for the list.
     */
    public List<Datastore> getDatastoreList() {
        List<Datastore> list = new ArrayList<>();
        ElementChildrenIterator iterator = datastoreIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Datastore next =(Datastore) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "datastore", using an existing object.
     * @param datastore The object to add.
     * @return The added child.
     */
    public Datastore addDatastore(Datastore datastore) throws JNCException {
        insertChild(datastore, childrenNames());
        return datastore;
    }

    /**
     * Adds list entry "datastore".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Datastore addDatastore() throws JNCException {
        Datastore datastore = new Datastore();
        insertChild(datastore, childrenNames());
        return datastore;
    }

    /**
     * Deletes list entry "datastore", with specified keys.
     */
    public void deleteDatastore() throws JNCException {
        String path = "datastore";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
