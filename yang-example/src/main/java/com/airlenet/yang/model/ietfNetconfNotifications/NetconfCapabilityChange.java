/* 
 * @(#)NetconfCapabilityChange.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-notifications", revision: "2012-02-06".
 */

package com.airlenet.yang.model.ietfNetconfNotifications;

import com.airlenet.yang.model.ietfInetTypes.Uri;
import com.airlenet.yang.model.ietfNetconfNotifications.NcnPrefix;
import com.airlenet.yang.model.ietfNetconfNotifications.netconfCapabilityChange.ChangedBy;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-notifications
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfNotifications/netconf-capability-change"
 * <p>
 * See line 168 in
 * src/main/yang/module/ietf/ietf-netconf-notifications.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class NetconfCapabilityChange extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "changed-by".
     */
    public ChangedBy changedBy = null;
    public ChangedBy getChangedBy() {
        return this.changedBy;
    }

    /**
     * Constructor for an empty NetconfCapabilityChange object.
     */
    public NetconfCapabilityChange() {
        super(NcnPrefix.NAMESPACE, "netconf-capability-change");
        setDefaultPrefix();
        setPrefix(NcnPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NetconfCapabilityChange clone() {
        return (NetconfCapabilityChange)cloneContent(new NetconfCapabilityChange());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NetconfCapabilityChange cloneShallow() {
        return (NetconfCapabilityChange)cloneShallowContent(new NetconfCapabilityChange());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "changed-by",
            "added-capability",
            "deleted-capability",
            "modified-capability",
        };
    }

    /* Access methods for container child: "changed-by". */

    /**
     * Adds container entry "changedBy", using an existing object.
     * @param changedBy The object to add.
     * @return The added child.
     */
    public ChangedBy addChangedBy(ChangedBy changedBy) throws JNCException {
        this.changedBy = changedBy;
        insertChild(changedBy, childrenNames());
        return changedBy;
    }

    /**
     * Adds container entry "changedBy".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ChangedBy addChangedBy() throws JNCException {
        ChangedBy changedBy = new ChangedBy();
        this.changedBy = changedBy;
        insertChild(changedBy, childrenNames());
        return changedBy;
    }

    /**
     * Deletes container entry "changedBy".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteChangedBy() throws JNCException {
        this.changedBy = null;
        String path = "changed-by";
        return delete(path);
    }

    /* Access methods for optional leaf-list child: "added-capability". */

    /**
     * Iterator method for the leaf-list "added-capability".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator addedCapabilityIterator() {
        return new ElementLeafListValueIterator(children, "added-capability");
    }

    /**
     * List method for the leaf-list "added-capability".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfInetTypes.Uri> getAddedCapabilityList() {
        List<com.airlenet.yang.model.ietfInetTypes.Uri> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = addedCapabilityIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfInetTypes.Uri next =(com.airlenet.yang.model.ietfInetTypes.Uri) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "added-capability",
     * using a JNC type value.
     * @param addedCapabilityValue The value to set.
     * @param addedCapabilityValue used during instantiation.
     */
    public void setAddedCapabilityValue(com.airlenet.yang.model.ietfInetTypes.Uri addedCapabilityValue)
            throws JNCException {
        setLeafListValue(NcnPrefix.NAMESPACE,
            "added-capability",
            addedCapabilityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "added-capability",
     * using a String value.
     * @param addedCapabilityValue used during instantiation.
     */
    public void setAddedCapabilityValue(String addedCapabilityValue)
            throws JNCException {
        setAddedCapabilityValue(new com.airlenet.yang.model.ietfInetTypes.Uri(addedCapabilityValue));
    }

    /**
     * Deletes leaf-list entry "addedCapability".
     * @param addedCapabilityValue Value to delete.
     */
    public void deleteAddedCapability(Uri addedCapabilityValue)
            throws JNCException {
        String path = "added-capability[addedCapabilityValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "addedCapability".
     * The value is specified as a string.
     * @param addedCapabilityValue Value to delete.
     */
    public void deleteAddedCapability(String addedCapabilityValue)
            throws JNCException {
        String path = "added-capability[addedCapabilityValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "added-capability" leaf-list will not have a value.
     */
    public void addAddedCapability() throws JNCException {
        setLeafListValue(NcnPrefix.NAMESPACE,
            "added-capability",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "added-capability" with operation "replace".
     * @param addedCapabilityValue The value to mark
     */
    public void markAddedCapabilityReplace(Uri addedCapabilityValue)
            throws JNCException {
        markLeafReplace("added-capability[name='" + addedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "added-capability" with operation "merge".
     * @param addedCapabilityValue The value to mark
     */
    public void markAddedCapabilityMerge(Uri addedCapabilityValue)
            throws JNCException {
        markLeafMerge("added-capability[name='" + addedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "added-capability" with operation "create".
     * @param addedCapabilityValue The value to mark
     */
    public void markAddedCapabilityCreate(Uri addedCapabilityValue)
            throws JNCException {
        markLeafCreate("added-capability[name='" + addedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "added-capability" with operation "delete".
     * @param addedCapabilityValue The value to mark
     */
    public void markAddedCapabilityDelete(Uri addedCapabilityValue)
            throws JNCException {
        markLeafDelete("added-capability[name='" + addedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "added-capability" with operation "remove".
     * @param addedCapabilityValue The value to mark
     */
    public void markAddedCapabilityRemove(Uri addedCapabilityValue)
            throws JNCException {
        markLeafRemove("added-capability[name='" + addedCapabilityValue + "']");
    }

    /* Access methods for optional leaf-list child: "deleted-capability". */

    /**
     * Iterator method for the leaf-list "deleted-capability".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator deletedCapabilityIterator() {
        return new ElementLeafListValueIterator(children, "deleted-capability");
    }

    /**
     * List method for the leaf-list "deleted-capability".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfInetTypes.Uri> getDeletedCapabilityList() {
        List<com.airlenet.yang.model.ietfInetTypes.Uri> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = deletedCapabilityIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfInetTypes.Uri next =(com.airlenet.yang.model.ietfInetTypes.Uri) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "deleted-capability",
     * using a JNC type value.
     * @param deletedCapabilityValue The value to set.
     * @param deletedCapabilityValue used during instantiation.
     */
    public void setDeletedCapabilityValue(com.airlenet.yang.model.ietfInetTypes.Uri deletedCapabilityValue)
            throws JNCException {
        setLeafListValue(NcnPrefix.NAMESPACE,
            "deleted-capability",
            deletedCapabilityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "deleted-capability",
     * using a String value.
     * @param deletedCapabilityValue used during instantiation.
     */
    public void setDeletedCapabilityValue(String deletedCapabilityValue)
            throws JNCException {
        setDeletedCapabilityValue(new com.airlenet.yang.model.ietfInetTypes.Uri(deletedCapabilityValue));
    }

    /**
     * Deletes leaf-list entry "deletedCapability".
     * @param deletedCapabilityValue Value to delete.
     */
    public void deleteDeletedCapability(Uri deletedCapabilityValue)
            throws JNCException {
        String path = "deleted-capability[deletedCapabilityValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "deletedCapability".
     * The value is specified as a string.
     * @param deletedCapabilityValue Value to delete.
     */
    public void deleteDeletedCapability(String deletedCapabilityValue)
            throws JNCException {
        String path = "deleted-capability[deletedCapabilityValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "deleted-capability" leaf-list will not have a value.
     */
    public void addDeletedCapability() throws JNCException {
        setLeafListValue(NcnPrefix.NAMESPACE,
            "deleted-capability",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "deleted-capability" with operation "replace".
     * @param deletedCapabilityValue The value to mark
     */
    public void markDeletedCapabilityReplace(Uri deletedCapabilityValue)
            throws JNCException {
        markLeafReplace("deleted-capability[name='" + deletedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "deleted-capability" with operation "merge".
     * @param deletedCapabilityValue The value to mark
     */
    public void markDeletedCapabilityMerge(Uri deletedCapabilityValue)
            throws JNCException {
        markLeafMerge("deleted-capability[name='" + deletedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "deleted-capability" with operation "create".
     * @param deletedCapabilityValue The value to mark
     */
    public void markDeletedCapabilityCreate(Uri deletedCapabilityValue)
            throws JNCException {
        markLeafCreate("deleted-capability[name='" + deletedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "deleted-capability" with operation "delete".
     * @param deletedCapabilityValue The value to mark
     */
    public void markDeletedCapabilityDelete(Uri deletedCapabilityValue)
            throws JNCException {
        markLeafDelete("deleted-capability[name='" + deletedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "deleted-capability" with operation "remove".
     * @param deletedCapabilityValue The value to mark
     */
    public void markDeletedCapabilityRemove(Uri deletedCapabilityValue)
            throws JNCException {
        markLeafRemove("deleted-capability[name='" + deletedCapabilityValue + "']");
    }

    /* Access methods for optional leaf-list child: "modified-capability". */

    /**
     * Iterator method for the leaf-list "modified-capability".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator modifiedCapabilityIterator() {
        return new ElementLeafListValueIterator(children, "modified-capability");
    }

    /**
     * List method for the leaf-list "modified-capability".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfInetTypes.Uri> getModifiedCapabilityList() {
        List<com.airlenet.yang.model.ietfInetTypes.Uri> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = modifiedCapabilityIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfInetTypes.Uri next =(com.airlenet.yang.model.ietfInetTypes.Uri) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "modified-capability",
     * using a JNC type value.
     * @param modifiedCapabilityValue The value to set.
     * @param modifiedCapabilityValue used during instantiation.
     */
    public void setModifiedCapabilityValue(com.airlenet.yang.model.ietfInetTypes.Uri modifiedCapabilityValue)
            throws JNCException {
        setLeafListValue(NcnPrefix.NAMESPACE,
            "modified-capability",
            modifiedCapabilityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "modified-capability",
     * using a String value.
     * @param modifiedCapabilityValue used during instantiation.
     */
    public void setModifiedCapabilityValue(String modifiedCapabilityValue)
            throws JNCException {
        setModifiedCapabilityValue(new com.airlenet.yang.model.ietfInetTypes.Uri(modifiedCapabilityValue));
    }

    /**
     * Deletes leaf-list entry "modifiedCapability".
     * @param modifiedCapabilityValue Value to delete.
     */
    public void deleteModifiedCapability(Uri modifiedCapabilityValue)
            throws JNCException {
        String path = "modified-capability[modifiedCapabilityValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "modifiedCapability".
     * The value is specified as a string.
     * @param modifiedCapabilityValue Value to delete.
     */
    public void deleteModifiedCapability(String modifiedCapabilityValue)
            throws JNCException {
        String path = "modified-capability[modifiedCapabilityValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "modified-capability" leaf-list will not have a value.
     */
    public void addModifiedCapability() throws JNCException {
        setLeafListValue(NcnPrefix.NAMESPACE,
            "modified-capability",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "modified-capability" with operation "replace".
     * @param modifiedCapabilityValue The value to mark
     */
    public void markModifiedCapabilityReplace(Uri modifiedCapabilityValue)
            throws JNCException {
        markLeafReplace("modified-capability[name='" + modifiedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "modified-capability" with operation "merge".
     * @param modifiedCapabilityValue The value to mark
     */
    public void markModifiedCapabilityMerge(Uri modifiedCapabilityValue)
            throws JNCException {
        markLeafMerge("modified-capability[name='" + modifiedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "modified-capability" with operation "create".
     * @param modifiedCapabilityValue The value to mark
     */
    public void markModifiedCapabilityCreate(Uri modifiedCapabilityValue)
            throws JNCException {
        markLeafCreate("modified-capability[name='" + modifiedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "modified-capability" with operation "delete".
     * @param modifiedCapabilityValue The value to mark
     */
    public void markModifiedCapabilityDelete(Uri modifiedCapabilityValue)
            throws JNCException {
        markLeafDelete("modified-capability[name='" + modifiedCapabilityValue + "']");
    }

    /**
     * Marks the leaf-list "modified-capability" with operation "remove".
     * @param modifiedCapabilityValue The value to mark
     */
    public void markModifiedCapabilityRemove(Uri modifiedCapabilityValue)
            throws JNCException {
        markLeafRemove("modified-capability[name='" + modifiedCapabilityValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof ChangedBy) changedBy = (ChangedBy)child;
    }

}
