/* 
 * @(#)Validationpoint.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.callpoints;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.callpoints.validationpoint.Daemon;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.callpoints.validationpoint.Range;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/internal/callpoints/validationpoint"
 * <p>
 * See line 516 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Validationpoint extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "daemon".
     */
    public com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.callpoints.validationpoint.Daemon daemon = null;
    public com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.callpoints.validationpoint.Daemon getDaemon() {
        return this.daemon;
    }

    /**
     * Constructor for an empty Validationpoint object.
     */
    public Validationpoint() {
        super(TfcgPrefix.NAMESPACE, "validationpoint");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Validationpoint clone() {
        return (Validationpoint)cloneContent(new Validationpoint());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Validationpoint cloneShallow() {
        return (Validationpoint)cloneShallowContent(new Validationpoint());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "id",
            "daemon",
            "path",
            "range",
            "file",
            "error",
        };
    }

    /* Access methods for leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getIdValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(com.tailf.jnc.YangString idValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new com.tailf.jnc.YangString(idValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /* Access methods for container child: "daemon". */

    /**
     * Adds container entry "daemon", using an existing object.
     * @param daemon The object to add.
     * @return The added child.
     */
    public Daemon addDaemon(Daemon daemon) throws JNCException {
        this.daemon = daemon;
        insertChild(daemon, childrenNames());
        return daemon;
    }

    /**
     * Adds container entry "daemon".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Daemon addDaemon() throws JNCException {
        Daemon daemon = new Daemon();
        this.daemon = daemon;
        insertChild(daemon, childrenNames());
        return daemon;
    }

    /**
     * Deletes container entry "daemon".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDaemon() throws JNCException {
        this.daemon = null;
        String path = "daemon";
        return delete(path);
    }

    /* Access methods for optional leaf child: "path". */

    /**
     * Gets the value for child leaf "path".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getPathValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("path");
    }

    /**
     * Sets the value for child leaf "path",
     * using instance of generated typedef class.
     * @param pathValue The value to set.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(com.tailf.jnc.YangString pathValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "path",
            pathValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "path",
     * using a String value.
     * @param pathValue used during instantiation.
     */
    public void setPathValue(String pathValue) throws JNCException {
        setPathValue(new com.tailf.jnc.YangString(pathValue));
    }

    /**
     * Unsets the value for child leaf "path".
     */
    public void unsetPathValue() throws JNCException {
        delete("path");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "path" leaf will not have a value.
     */
    public void addPath() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "path",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "path" with operation "replace".
     */
    public void markPathReplace() throws JNCException {
        markLeafReplace("path");
    }

    /**
     * Marks the leaf "path" with operation "merge".
     */
    public void markPathMerge() throws JNCException {
        markLeafMerge("path");
    }

    /**
     * Marks the leaf "path" with operation "create".
     */
    public void markPathCreate() throws JNCException {
        markLeafCreate("path");
    }

    /**
     * Marks the leaf "path" with operation "delete".
     */
    public void markPathDelete() throws JNCException {
        markLeafDelete("path");
    }

    /**
     * Marks the leaf "path" with operation "remove".
     */
    public void markPathRemove() throws JNCException {
        markLeafRemove("path");
    }

    /* Access methods for list child: "range". */

    /**
     * Gets list entry "range", with specified keys.
     */
    public Range getRange() throws JNCException {
        String path = "range";
        return (Range)searchOne(path);
    }

    /**
     * Iterator method for the list "range".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator rangeIterator() {
        return new ElementChildrenIterator(children, "range");
    }

    /**
     * List method for the list "range".
     * @return An List for the list.
     */
    public List<Range> getRangeList() {
        List<Range> list = new ArrayList<>();
        ElementChildrenIterator iterator = rangeIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Range next =(Range) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "range", using an existing object.
     * @param range The object to add.
     * @return The added child.
     */
    public Range addRange(Range range) throws JNCException {
        insertChild(range, childrenNames());
        return range;
    }

    /**
     * Adds list entry "range".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Range addRange() throws JNCException {
        Range range = new Range();
        insertChild(range, childrenNames());
        return range;
    }

    /**
     * Deletes list entry "range", with specified keys.
     */
    public void deleteRange() throws JNCException {
        String path = "range";
        delete(path);
    }

    /* Access methods for optional leaf child: "file". */

    /**
     * Gets the value for child leaf "file".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getFileValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("file");
    }

    /**
     * Sets the value for child leaf "file",
     * using instance of generated typedef class.
     * @param fileValue The value to set.
     * @param fileValue used during instantiation.
     */
    public void setFileValue(com.tailf.jnc.YangString fileValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "file",
            fileValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "file",
     * using a String value.
     * @param fileValue used during instantiation.
     */
    public void setFileValue(String fileValue) throws JNCException {
        setFileValue(new com.tailf.jnc.YangString(fileValue));
    }

    /**
     * Unsets the value for child leaf "file".
     */
    public void unsetFileValue() throws JNCException {
        delete("file");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "file" leaf will not have a value.
     */
    public void addFile() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "file",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "file" with operation "replace".
     */
    public void markFileReplace() throws JNCException {
        markLeafReplace("file");
    }

    /**
     * Marks the leaf "file" with operation "merge".
     */
    public void markFileMerge() throws JNCException {
        markLeafMerge("file");
    }

    /**
     * Marks the leaf "file" with operation "create".
     */
    public void markFileCreate() throws JNCException {
        markLeafCreate("file");
    }

    /**
     * Marks the leaf "file" with operation "delete".
     */
    public void markFileDelete() throws JNCException {
        markLeafDelete("file");
    }

    /**
     * Marks the leaf "file" with operation "remove".
     */
    public void markFileRemove() throws JNCException {
        markLeafRemove("file");
    }

    /* Access methods for optional leaf child: "error". */

    /**
     * Gets the value for child leaf "error".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getErrorValue() throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("error");
    }

    /**
     * Sets the value for child leaf "error",
     * using instance of generated typedef class.
     * @param errorValue The value to set.
     * @param errorValue used during instantiation.
     */
    public void setErrorValue(com.tailf.jnc.YangEnumeration errorValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "error",
            errorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "error",
     * using a String value.
     * @param errorValue used during instantiation.
     */
    public void setErrorValue(String errorValue) throws JNCException {
        setErrorValue(new com.tailf.jnc.YangEnumeration(errorValue, new String[] {
             "NOT-REGISTERED",
             "UNKNOWN",
        }));
    }

    /**
     * Unsets the value for child leaf "error".
     */
    public void unsetErrorValue() throws JNCException {
        delete("error");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "error" leaf will not have a value.
     */
    public void addError() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "error",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "error" with operation "replace".
     */
    public void markErrorReplace() throws JNCException {
        markLeafReplace("error");
    }

    /**
     * Marks the leaf "error" with operation "merge".
     */
    public void markErrorMerge() throws JNCException {
        markLeafMerge("error");
    }

    /**
     * Marks the leaf "error" with operation "create".
     */
    public void markErrorCreate() throws JNCException {
        markLeafCreate("error");
    }

    /**
     * Marks the leaf "error" with operation "delete".
     */
    public void markErrorDelete() throws JNCException {
        markLeafDelete("error");
    }

    /**
     * Marks the leaf "error" with operation "remove".
     */
    public void markErrorRemove() throws JNCException {
        markLeafRemove("error");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Daemon) daemon = (Daemon)child;
    }

}
