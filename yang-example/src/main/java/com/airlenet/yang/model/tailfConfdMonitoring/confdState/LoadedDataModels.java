/* 
 * @(#)LoadedDataModels.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.loadedDataModels.DataModel;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/loaded-data-models"
 * <p>
 * See line 317 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class LoadedDataModels extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LoadedDataModels object.
     */
    public LoadedDataModels() {
        super(TfcgPrefix.NAMESPACE, "loaded-data-models");
        setDefaultPrefix();
        setPrefix(TfcgPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LoadedDataModels clone() {
        return (LoadedDataModels)cloneContent(new LoadedDataModels());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LoadedDataModels cloneShallow() {
        return (LoadedDataModels)cloneShallowContent(new LoadedDataModels());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "data-model",
        };
    }

    /* Access methods for list child: "data-model". */

    /**
     * Gets list entry "dataModel", with specified keys.
     */
    public DataModel getDataModel() throws JNCException {
        String path = "data-model";
        return (DataModel)searchOne(path);
    }

    /**
     * Iterator method for the list "data-model".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator dataModelIterator() {
        return new ElementChildrenIterator(children, "data-model");
    }

    /**
     * List method for the list "data-model".
     * @return An List for the list.
     */
    public List<DataModel> getDataModelList() {
        List<DataModel> list = new ArrayList<>();
        ElementChildrenIterator iterator = dataModelIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            DataModel next =(DataModel) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "dataModel", using an existing object.
     * @param dataModel The object to add.
     * @return The added child.
     */
    public DataModel addDataModel(DataModel dataModel) throws JNCException {
        insertChild(dataModel, childrenNames());
        return dataModel;
    }

    /**
     * Adds list entry "dataModel".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DataModel addDataModel() throws JNCException {
        DataModel dataModel = new DataModel();
        insertChild(dataModel, childrenNames());
        return dataModel;
    }

    /**
     * Deletes list entry "dataModel", with specified keys.
     */
    public void deleteDataModel() throws JNCException {
        String path = "data-model";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
