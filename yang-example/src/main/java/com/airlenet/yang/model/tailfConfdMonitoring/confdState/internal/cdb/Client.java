/* 
 * @(#)Client.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.cdb;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.cdb.client.Subscription;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/internal/cdb/client"
 * <p>
 * See line 757 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Client extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Client object.
     */
    public Client() {
        super(TfcgPrefix.NAMESPACE, "client");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Client clone() {
        return (Client)cloneContent(new Client());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Client cloneShallow() {
        return (Client)cloneShallowContent(new Client());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "info",
            "type",
            "datastore",
            "lock",
            "subscription",
        };
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /**
     * Marks the leaf "name" with operation "remove".
     */
    public void markNameRemove() throws JNCException {
        markLeafRemove("name");
    }

    /* Access methods for optional leaf child: "info". */

    /**
     * Gets the value for child leaf "info".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getInfoValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("info");
    }

    /**
     * Sets the value for child leaf "info",
     * using instance of generated typedef class.
     * @param infoValue The value to set.
     * @param infoValue used during instantiation.
     */
    public void setInfoValue(com.tailf.jnc.YangString infoValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "info",
            infoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "info",
     * using a String value.
     * @param infoValue used during instantiation.
     */
    public void setInfoValue(String infoValue) throws JNCException {
        setInfoValue(new com.tailf.jnc.YangString(infoValue));
    }

    /**
     * Unsets the value for child leaf "info".
     */
    public void unsetInfoValue() throws JNCException {
        delete("info");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "info" leaf will not have a value.
     */
    public void addInfo() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "info",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "info" with operation "replace".
     */
    public void markInfoReplace() throws JNCException {
        markLeafReplace("info");
    }

    /**
     * Marks the leaf "info" with operation "merge".
     */
    public void markInfoMerge() throws JNCException {
        markLeafMerge("info");
    }

    /**
     * Marks the leaf "info" with operation "create".
     */
    public void markInfoCreate() throws JNCException {
        markLeafCreate("info");
    }

    /**
     * Marks the leaf "info" with operation "delete".
     */
    public void markInfoDelete() throws JNCException {
        markLeafDelete("info");
    }

    /**
     * Marks the leaf "info" with operation "remove".
     */
    public void markInfoRemove() throws JNCException {
        markLeafRemove("info");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getTypeValue() throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(com.tailf.jnc.YangEnumeration typeValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new com.tailf.jnc.YangEnumeration(typeValue, new String[] {
             "inactive",
             "client",
             "subscriber",
             "waiting",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /**
     * Marks the leaf "type" with operation "remove".
     */
    public void markTypeRemove() throws JNCException {
        markLeafRemove("type");
    }

    /* Access methods for optional leaf child: "datastore". */

    /**
     * Gets the value for child leaf "datastore".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getDatastoreValue() throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("datastore");
    }

    /**
     * Sets the value for child leaf "datastore",
     * using instance of generated typedef class.
     * @param datastoreValue The value to set.
     * @param datastoreValue used during instantiation.
     */
    public void setDatastoreValue(com.tailf.jnc.YangUnion datastoreValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "datastore",
            datastoreValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "datastore",
     * using a String value.
     * @param datastoreValue used during instantiation.
     */
    public void setDatastoreValue(String datastoreValue) throws JNCException {
        setDatastoreValue(new com.tailf.jnc.YangUnion(datastoreValue, new String[] {
             "com.tailf.jnc.YangEnumeration",
             "com.tailf.jnc.YangEnumeration",
        }));
    }

    /**
     * Unsets the value for child leaf "datastore".
     */
    public void unsetDatastoreValue() throws JNCException {
        delete("datastore");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "datastore" leaf will not have a value.
     */
    public void addDatastore() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "datastore",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "datastore" with operation "replace".
     */
    public void markDatastoreReplace() throws JNCException {
        markLeafReplace("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "merge".
     */
    public void markDatastoreMerge() throws JNCException {
        markLeafMerge("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "create".
     */
    public void markDatastoreCreate() throws JNCException {
        markLeafCreate("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "delete".
     */
    public void markDatastoreDelete() throws JNCException {
        markLeafDelete("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "remove".
     */
    public void markDatastoreRemove() throws JNCException {
        markLeafRemove("datastore");
    }

    /* Access methods for optional leaf child: "lock". */

    /**
     * Gets the value for child leaf "lock".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getLockValue() throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("lock");
    }

    /**
     * Sets the value for child leaf "lock",
     * using instance of generated typedef class.
     * @param lockValue The value to set.
     * @param lockValue used during instantiation.
     */
    public void setLockValue(com.tailf.jnc.YangEnumeration lockValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "lock",
            lockValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lock",
     * using a String value.
     * @param lockValue used during instantiation.
     */
    public void setLockValue(String lockValue) throws JNCException {
        setLockValue(new com.tailf.jnc.YangEnumeration(lockValue, new String[] {
             "read",
             "subscription",
             "pending-read",
             "pending-subscription",
        }));
    }

    /**
     * Unsets the value for child leaf "lock".
     */
    public void unsetLockValue() throws JNCException {
        delete("lock");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lock" leaf will not have a value.
     */
    public void addLock() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "lock",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "lock" with operation "replace".
     */
    public void markLockReplace() throws JNCException {
        markLeafReplace("lock");
    }

    /**
     * Marks the leaf "lock" with operation "merge".
     */
    public void markLockMerge() throws JNCException {
        markLeafMerge("lock");
    }

    /**
     * Marks the leaf "lock" with operation "create".
     */
    public void markLockCreate() throws JNCException {
        markLeafCreate("lock");
    }

    /**
     * Marks the leaf "lock" with operation "delete".
     */
    public void markLockDelete() throws JNCException {
        markLeafDelete("lock");
    }

    /**
     * Marks the leaf "lock" with operation "remove".
     */
    public void markLockRemove() throws JNCException {
        markLeafRemove("lock");
    }

    /* Access methods for list child: "subscription". */

    /**
     * Gets list entry "subscription", with specified keys.
     */
    public Subscription getSubscription() throws JNCException {
        String path = "subscription";
        return (Subscription)searchOne(path);
    }

    /**
     * Iterator method for the list "subscription".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator subscriptionIterator() {
        return new ElementChildrenIterator(children, "subscription");
    }

    /**
     * List method for the list "subscription".
     * @return An List for the list.
     */
    public List<Subscription> getSubscriptionList() {
        List<Subscription> list = new ArrayList<>();
        ElementChildrenIterator iterator = subscriptionIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Subscription next =(Subscription) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "subscription", using an existing object.
     * @param subscription The object to add.
     * @return The added child.
     */
    public Subscription addSubscription(Subscription subscription)
            throws JNCException {
        insertChild(subscription, childrenNames());
        return subscription;
    }

    /**
     * Adds list entry "subscription".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Subscription addSubscription() throws JNCException {
        Subscription subscription = new Subscription();
        insertChild(subscription, childrenNames());
        return subscription;
    }

    /**
     * Deletes list entry "subscription", with specified keys.
     */
    public void deleteSubscription() throws JNCException {
        String path = "subscription";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
