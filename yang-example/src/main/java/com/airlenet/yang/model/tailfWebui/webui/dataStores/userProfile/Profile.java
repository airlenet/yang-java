/* 
 * @(#)Profile.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.dataStores.userProfile;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/dataStores/userProfile/profile"
 * <p>
 * See line 164 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Profile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Profile object.
     */
    public Profile() {
        super(WebuiPrefix.NAMESPACE, "profile");
    }

    /**
     * Constructor for an initialized Profile object,
     * 
     * @param keyValue Key argument of child.
     */
    public Profile(YangString keyValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "profile");
        Leaf key = new Leaf(WebuiPrefix.NAMESPACE, "key");
        key.setValue(keyValue);
        insertChild(key, childrenNames());
    }

    /**
     * Constructor for an initialized Profile object,
     * with String keys.
     * @param keyValue Key argument of child.
     */
    public Profile(String keyValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "profile");
        Leaf key = new Leaf(WebuiPrefix.NAMESPACE, "key");
        key.setValue(new com.tailf.jnc.YangString(keyValue));
        insertChild(key, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Profile clone() {
        Profile copy;
        try {
            copy = new Profile(getKeyValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Profile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Profile cloneShallow() {
        Profile copy;
        try {
            copy = new Profile(getKeyValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Profile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "key",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "key",
            "value",
        };
    }

    /* Access methods for leaf child: "key". */

    /**
     * Gets the value for child leaf "key".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getKeyValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("key");
    }

    /**
     * Sets the value for child leaf "key",
     * using instance of generated typedef class.
     * @param keyValue The value to set.
     * @param keyValue used during instantiation.
     */
    public void setKeyValue(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "key",
            keyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "key",
     * using a String value.
     * @param keyValue used during instantiation.
     */
    public void setKeyValue(String keyValue) throws JNCException {
        setKeyValue(new com.tailf.jnc.YangString(keyValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "key" leaf will not have a value.
     */
    public void addKey() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "key",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "value". */

    /**
     * Gets the value for child leaf "value".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getValueValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("value");
    }

    /**
     * Sets the value for child leaf "value",
     * using instance of generated typedef class.
     * @param valueValue The value to set.
     * @param valueValue used during instantiation.
     */
    public void setValueValue(com.tailf.jnc.YangString valueValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "value",
            valueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "value",
     * using a String value.
     * @param valueValue used during instantiation.
     */
    public void setValueValue(String valueValue) throws JNCException {
        setValueValue(new com.tailf.jnc.YangString(valueValue));
    }

    /**
     * Unsets the value for child leaf "value".
     */
    public void unsetValueValue() throws JNCException {
        delete("value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "value" leaf will not have a value.
     */
    public void addValue() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "value" with operation "replace".
     */
    public void markValueReplace() throws JNCException {
        markLeafReplace("value");
    }

    /**
     * Marks the leaf "value" with operation "merge".
     */
    public void markValueMerge() throws JNCException {
        markLeafMerge("value");
    }

    /**
     * Marks the leaf "value" with operation "create".
     */
    public void markValueCreate() throws JNCException {
        markLeafCreate("value");
    }

    /**
     * Marks the leaf "value" with operation "delete".
     */
    public void markValueDelete() throws JNCException {
        markLeafDelete("value");
    }

    /**
     * Marks the leaf "value" with operation "remove".
     */
    public void markValueRemove() throws JNCException {
        markLeafRemove("value");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
