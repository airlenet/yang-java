/* 
 * @(#)Internal.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.Callpoints;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.Cdb;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/internal"
 * <p>
 * See line 507 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Internal extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "callpoints".
     */
    public Callpoints callpoints = null;
    public Callpoints getCallpoints() {
        return this.callpoints;
    }

    /**
     * Field for child container "cdb".
     */
    public Cdb cdb = null;
    public Cdb getCdb() {
        return this.cdb;
    }

    /**
     * Constructor for an empty Internal object.
     */
    public Internal() {
        super(TfcgPrefix.NAMESPACE, "internal");
        setDefaultPrefix();
        setPrefix(TfcgPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Internal clone() {
        return (Internal)cloneContent(new Internal());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Internal cloneShallow() {
        return (Internal)cloneShallowContent(new Internal());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "callpoints",
            "cdb",
        };
    }

    /* Access methods for container child: "callpoints". */

    /**
     * Adds container entry "callpoints", using an existing object.
     * @param callpoints The object to add.
     * @return The added child.
     */
    public Callpoints addCallpoints(Callpoints callpoints) throws JNCException {
        this.callpoints = callpoints;
        insertChild(callpoints, childrenNames());
        return callpoints;
    }

    /**
     * Adds container entry "callpoints".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Callpoints addCallpoints() throws JNCException {
        Callpoints callpoints = new Callpoints();
        this.callpoints = callpoints;
        insertChild(callpoints, childrenNames());
        return callpoints;
    }

    /**
     * Deletes container entry "callpoints".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCallpoints() throws JNCException {
        this.callpoints = null;
        String path = "callpoints";
        return delete(path);
    }

    /* Access methods for container child: "cdb". */

    /**
     * Adds container entry "cdb", using an existing object.
     * @param cdb The object to add.
     * @return The added child.
     */
    public Cdb addCdb(Cdb cdb) throws JNCException {
        this.cdb = cdb;
        insertChild(cdb, childrenNames());
        return cdb;
    }

    /**
     * Adds container entry "cdb".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Cdb addCdb() throws JNCException {
        Cdb cdb = new Cdb();
        this.cdb = cdb;
        insertChild(cdb, childrenNames());
        return cdb;
    }

    /**
     * Deletes container entry "cdb".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCdb() throws JNCException {
        this.cdb = null;
        String path = "cdb";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Callpoints) callpoints = (Callpoints)child;
        else if (child instanceof Cdb) cdb = (Cdb)child;
    }

}
