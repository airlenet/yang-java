/* 
 * @(#)Properties.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties.Image;
import com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties.Link;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangInt16;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/panels/panel/components/component/properties"
 * <p>
 * See line 69 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Properties extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "image".
     */
    public com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties.Image image = null;
    public com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties.Image getImage() {
        return this.image;
    }

    /**
     * Field for child container "link".
     */
    public com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties.Link link = null;
    public com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties.Link getLink() {
        return this.link;
    }

    /**
     * Constructor for an empty Properties object.
     */
    public Properties() {
        super(WebuiPrefix.NAMESPACE, "properties");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Properties clone() {
        return (Properties)cloneContent(new Properties());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Properties cloneShallow() {
        return (Properties)cloneShallowContent(new Properties());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "top",
            "left",
            "width",
            "height",
            "z-index",
            "image",
            "link",
        };
    }

    /* Access methods for optional leaf child: "top". */

    /**
     * Gets the value for child leaf "top".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getTopValue() throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("top");
    }

    /**
     * Sets the value for child leaf "top",
     * using instance of generated typedef class.
     * @param topValue The value to set.
     * @param topValue used during instantiation.
     */
    public void setTopValue(com.tailf.jnc.YangUInt16 topValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "top",
            topValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "top",
     * using Java primitive values.
     * @param topValue used during instantiation.
     */
    public void setTopValue(int topValue) throws JNCException {
        setTopValue(new com.tailf.jnc.YangUInt16(topValue));
    }

    /**
     * Sets the value for child leaf "top",
     * using a String value.
     * @param topValue used during instantiation.
     */
    public void setTopValue(String topValue) throws JNCException {
        setTopValue(new com.tailf.jnc.YangUInt16(topValue));
    }

    /**
     * Unsets the value for child leaf "top".
     */
    public void unsetTopValue() throws JNCException {
        delete("top");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "top" leaf will not have a value.
     */
    public void addTop() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "top",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "top" with operation "replace".
     */
    public void markTopReplace() throws JNCException {
        markLeafReplace("top");
    }

    /**
     * Marks the leaf "top" with operation "merge".
     */
    public void markTopMerge() throws JNCException {
        markLeafMerge("top");
    }

    /**
     * Marks the leaf "top" with operation "create".
     */
    public void markTopCreate() throws JNCException {
        markLeafCreate("top");
    }

    /**
     * Marks the leaf "top" with operation "delete".
     */
    public void markTopDelete() throws JNCException {
        markLeafDelete("top");
    }

    /**
     * Marks the leaf "top" with operation "remove".
     */
    public void markTopRemove() throws JNCException {
        markLeafRemove("top");
    }

    /* Access methods for optional leaf child: "left". */

    /**
     * Gets the value for child leaf "left".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getLeftValue() throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("left");
    }

    /**
     * Sets the value for child leaf "left",
     * using instance of generated typedef class.
     * @param leftValue The value to set.
     * @param leftValue used during instantiation.
     */
    public void setLeftValue(com.tailf.jnc.YangUInt16 leftValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "left",
            leftValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "left",
     * using Java primitive values.
     * @param leftValue used during instantiation.
     */
    public void setLeftValue(int leftValue) throws JNCException {
        setLeftValue(new com.tailf.jnc.YangUInt16(leftValue));
    }

    /**
     * Sets the value for child leaf "left",
     * using a String value.
     * @param leftValue used during instantiation.
     */
    public void setLeftValue(String leftValue) throws JNCException {
        setLeftValue(new com.tailf.jnc.YangUInt16(leftValue));
    }

    /**
     * Unsets the value for child leaf "left".
     */
    public void unsetLeftValue() throws JNCException {
        delete("left");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "left" leaf will not have a value.
     */
    public void addLeft() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "left",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "left" with operation "replace".
     */
    public void markLeftReplace() throws JNCException {
        markLeafReplace("left");
    }

    /**
     * Marks the leaf "left" with operation "merge".
     */
    public void markLeftMerge() throws JNCException {
        markLeafMerge("left");
    }

    /**
     * Marks the leaf "left" with operation "create".
     */
    public void markLeftCreate() throws JNCException {
        markLeafCreate("left");
    }

    /**
     * Marks the leaf "left" with operation "delete".
     */
    public void markLeftDelete() throws JNCException {
        markLeafDelete("left");
    }

    /**
     * Marks the leaf "left" with operation "remove".
     */
    public void markLeftRemove() throws JNCException {
        markLeafRemove("left");
    }

    /* Access methods for optional leaf child: "width". */

    /**
     * Gets the value for child leaf "width".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getWidthValue() throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("width");
    }

    /**
     * Sets the value for child leaf "width",
     * using instance of generated typedef class.
     * @param widthValue The value to set.
     * @param widthValue used during instantiation.
     */
    public void setWidthValue(com.tailf.jnc.YangUInt16 widthValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "width",
            widthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "width",
     * using Java primitive values.
     * @param widthValue used during instantiation.
     */
    public void setWidthValue(int widthValue) throws JNCException {
        setWidthValue(new com.tailf.jnc.YangUInt16(widthValue));
    }

    /**
     * Sets the value for child leaf "width",
     * using a String value.
     * @param widthValue used during instantiation.
     */
    public void setWidthValue(String widthValue) throws JNCException {
        setWidthValue(new com.tailf.jnc.YangUInt16(widthValue));
    }

    /**
     * Unsets the value for child leaf "width".
     */
    public void unsetWidthValue() throws JNCException {
        delete("width");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "width" leaf will not have a value.
     */
    public void addWidth() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "width",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "width" with operation "replace".
     */
    public void markWidthReplace() throws JNCException {
        markLeafReplace("width");
    }

    /**
     * Marks the leaf "width" with operation "merge".
     */
    public void markWidthMerge() throws JNCException {
        markLeafMerge("width");
    }

    /**
     * Marks the leaf "width" with operation "create".
     */
    public void markWidthCreate() throws JNCException {
        markLeafCreate("width");
    }

    /**
     * Marks the leaf "width" with operation "delete".
     */
    public void markWidthDelete() throws JNCException {
        markLeafDelete("width");
    }

    /**
     * Marks the leaf "width" with operation "remove".
     */
    public void markWidthRemove() throws JNCException {
        markLeafRemove("width");
    }

    /* Access methods for optional leaf child: "height". */

    /**
     * Gets the value for child leaf "height".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getHeightValue() throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("height");
    }

    /**
     * Sets the value for child leaf "height",
     * using instance of generated typedef class.
     * @param heightValue The value to set.
     * @param heightValue used during instantiation.
     */
    public void setHeightValue(com.tailf.jnc.YangUInt16 heightValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "height",
            heightValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "height",
     * using Java primitive values.
     * @param heightValue used during instantiation.
     */
    public void setHeightValue(int heightValue) throws JNCException {
        setHeightValue(new com.tailf.jnc.YangUInt16(heightValue));
    }

    /**
     * Sets the value for child leaf "height",
     * using a String value.
     * @param heightValue used during instantiation.
     */
    public void setHeightValue(String heightValue) throws JNCException {
        setHeightValue(new com.tailf.jnc.YangUInt16(heightValue));
    }

    /**
     * Unsets the value for child leaf "height".
     */
    public void unsetHeightValue() throws JNCException {
        delete("height");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "height" leaf will not have a value.
     */
    public void addHeight() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "height",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "height" with operation "replace".
     */
    public void markHeightReplace() throws JNCException {
        markLeafReplace("height");
    }

    /**
     * Marks the leaf "height" with operation "merge".
     */
    public void markHeightMerge() throws JNCException {
        markLeafMerge("height");
    }

    /**
     * Marks the leaf "height" with operation "create".
     */
    public void markHeightCreate() throws JNCException {
        markLeafCreate("height");
    }

    /**
     * Marks the leaf "height" with operation "delete".
     */
    public void markHeightDelete() throws JNCException {
        markLeafDelete("height");
    }

    /**
     * Marks the leaf "height" with operation "remove".
     */
    public void markHeightRemove() throws JNCException {
        markLeafRemove("height");
    }

    /* Access methods for optional leaf child: "z-index". */

    /**
     * Gets the value for child leaf "z-index".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangInt16 getZIndexValue() throws JNCException {
        return (com.tailf.jnc.YangInt16)getValue("z-index");
    }

    /**
     * Sets the value for child leaf "z-index",
     * using instance of generated typedef class.
     * @param zIndexValue The value to set.
     * @param zIndexValue used during instantiation.
     */
    public void setZIndexValue(com.tailf.jnc.YangInt16 zIndexValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "z-index",
            zIndexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "z-index",
     * using Java primitive values.
     * @param zIndexValue used during instantiation.
     */
    public void setZIndexValue(short zIndexValue) throws JNCException {
        setZIndexValue(new com.tailf.jnc.YangInt16(zIndexValue));
    }

    /**
     * Sets the value for child leaf "z-index",
     * using a String value.
     * @param zIndexValue used during instantiation.
     */
    public void setZIndexValue(String zIndexValue) throws JNCException {
        setZIndexValue(new com.tailf.jnc.YangInt16(zIndexValue));
    }

    /**
     * Unsets the value for child leaf "z-index".
     */
    public void unsetZIndexValue() throws JNCException {
        delete("z-index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "z-index" leaf will not have a value.
     */
    public void addZIndex() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "z-index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "z-index" with operation "replace".
     */
    public void markZIndexReplace() throws JNCException {
        markLeafReplace("z-index");
    }

    /**
     * Marks the leaf "z-index" with operation "merge".
     */
    public void markZIndexMerge() throws JNCException {
        markLeafMerge("z-index");
    }

    /**
     * Marks the leaf "z-index" with operation "create".
     */
    public void markZIndexCreate() throws JNCException {
        markLeafCreate("z-index");
    }

    /**
     * Marks the leaf "z-index" with operation "delete".
     */
    public void markZIndexDelete() throws JNCException {
        markLeafDelete("z-index");
    }

    /**
     * Marks the leaf "z-index" with operation "remove".
     */
    public void markZIndexRemove() throws JNCException {
        markLeafRemove("z-index");
    }

    /* Access methods for container child: "image". */

    /**
     * Adds container entry "image", using an existing object.
     * @param image The object to add.
     * @return The added child.
     */
    public Image addImage(Image image) throws JNCException {
        this.image = image;
        insertChild(image, childrenNames());
        return image;
    }

    /**
     * Adds container entry "image".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Image addImage() throws JNCException {
        Image image = new Image();
        this.image = image;
        insertChild(image, childrenNames());
        return image;
    }

    /**
     * Deletes container entry "image".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteImage() throws JNCException {
        this.image = null;
        String path = "image";
        return delete(path);
    }

    /* Access methods for container child: "link". */

    /**
     * Adds container entry "link", using an existing object.
     * @param link The object to add.
     * @return The added child.
     */
    public Link addLink(Link link) throws JNCException {
        this.link = link;
        insertChild(link, childrenNames());
        return link;
    }

    /**
     * Adds container entry "link".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Link addLink() throws JNCException {
        Link link = new Link();
        this.link = link;
        insertChild(link, childrenNames());
        return link;
    }

    /**
     * Deletes container entry "link".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLink() throws JNCException {
        this.link = null;
        String path = "link";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Image) image = (Image)child;
        else if (child instanceof Link) link = (Link)child;
    }

}
