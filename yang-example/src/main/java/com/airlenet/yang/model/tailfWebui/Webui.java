/* 
 * @(#)Webui.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.DataStores;
import com.airlenet.yang.model.tailfWebui.webui.Schematics;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui"
 * <p>
 * See line 25 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Webui extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "schematics".
     */
    public Schematics schematics = null;
    public Schematics getSchematics() {
        return this.schematics;
    }

    /**
     * Field for child container "data-stores".
     */
    public DataStores dataStores = null;
    public DataStores getDataStores() {
        return this.dataStores;
    }

    /**
     * Constructor for an empty Webui object.
     */
    public Webui() {
        super(WebuiPrefix.NAMESPACE, "webui");
        setDefaultPrefix();
        setPrefix(WebuiPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Webui clone() {
        return (Webui)cloneContent(new Webui());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Webui cloneShallow() {
        return (Webui)cloneShallowContent(new Webui());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "schematics",
            "data-stores",
        };
    }

    /* Access methods for container child: "schematics". */

    /**
     * Adds container entry "schematics", using an existing object.
     * @param schematics The object to add.
     * @return The added child.
     */
    public Schematics addSchematics(Schematics schematics) throws JNCException {
        this.schematics = schematics;
        insertChild(schematics, childrenNames());
        return schematics;
    }

    /**
     * Adds container entry "schematics".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Schematics addSchematics() throws JNCException {
        Schematics schematics = new Schematics();
        this.schematics = schematics;
        insertChild(schematics, childrenNames());
        return schematics;
    }

    /**
     * Deletes container entry "schematics".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSchematics() throws JNCException {
        this.schematics = null;
        String path = "schematics";
        return delete(path);
    }

    /* Access methods for container child: "data-stores". */

    /**
     * Adds container entry "dataStores", using an existing object.
     * @param dataStores The object to add.
     * @return The added child.
     */
    public DataStores addDataStores(DataStores dataStores) throws JNCException {
        this.dataStores = dataStores;
        insertChild(dataStores, childrenNames());
        return dataStores;
    }

    /**
     * Adds container entry "dataStores".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public DataStores addDataStores() throws JNCException {
        DataStores dataStores = new DataStores();
        this.dataStores = dataStores;
        insertChild(dataStores, childrenNames());
        return dataStores;
    }

    /**
     * Deletes container entry "dataStores".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDataStores() throws JNCException {
        this.dataStores = null;
        String path = "data-stores";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Schematics) schematics = (Schematics)child;
        else if (child instanceof DataStores) dataStores = (DataStores)child;
    }

}
