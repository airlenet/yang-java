/* 
 * @(#)Link.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.components.component.properties;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/panels/panel/components/component/properties/link"
 * <p>
 * See line 104 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Link extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Link object.
     */
    public Link() {
        super(WebuiPrefix.NAMESPACE, "link");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Link clone() {
        return (Link)cloneContent(new Link());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Link cloneShallow() {
        return (Link)cloneShallowContent(new Link());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "text",
            "link",
        };
    }

    /* Access methods for optional leaf child: "text". */

    /**
     * Gets the value for child leaf "text".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getTextValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("text");
    }

    /**
     * Sets the value for child leaf "text",
     * using instance of generated typedef class.
     * @param textValue The value to set.
     * @param textValue used during instantiation.
     */
    public void setTextValue(com.tailf.jnc.YangString textValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "text",
            textValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "text",
     * using a String value.
     * @param textValue used during instantiation.
     */
    public void setTextValue(String textValue) throws JNCException {
        setTextValue(new com.tailf.jnc.YangString(textValue));
    }

    /**
     * Unsets the value for child leaf "text".
     */
    public void unsetTextValue() throws JNCException {
        delete("text");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "text" leaf will not have a value.
     */
    public void addText() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "text",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "text" with operation "replace".
     */
    public void markTextReplace() throws JNCException {
        markLeafReplace("text");
    }

    /**
     * Marks the leaf "text" with operation "merge".
     */
    public void markTextMerge() throws JNCException {
        markLeafMerge("text");
    }

    /**
     * Marks the leaf "text" with operation "create".
     */
    public void markTextCreate() throws JNCException {
        markLeafCreate("text");
    }

    /**
     * Marks the leaf "text" with operation "delete".
     */
    public void markTextDelete() throws JNCException {
        markLeafDelete("text");
    }

    /**
     * Marks the leaf "text" with operation "remove".
     */
    public void markTextRemove() throws JNCException {
        markLeafRemove("text");
    }

    /* Access methods for optional leaf child: "link". */

    /**
     * Gets the value for child leaf "link".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getLinkValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("link");
    }

    /**
     * Sets the value for child leaf "link",
     * using instance of generated typedef class.
     * @param linkValue The value to set.
     * @param linkValue used during instantiation.
     */
    public void setLinkValue(com.tailf.jnc.YangString linkValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "link",
            linkValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "link",
     * using a String value.
     * @param linkValue used during instantiation.
     */
    public void setLinkValue(String linkValue) throws JNCException {
        setLinkValue(new com.tailf.jnc.YangString(linkValue));
    }

    /**
     * Unsets the value for child leaf "link".
     */
    public void unsetLinkValue() throws JNCException {
        delete("link");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "link" leaf will not have a value.
     */
    public void addLink() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "link",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "link" with operation "replace".
     */
    public void markLinkReplace() throws JNCException {
        markLeafReplace("link");
    }

    /**
     * Marks the leaf "link" with operation "merge".
     */
    public void markLinkMerge() throws JNCException {
        markLeafMerge("link");
    }

    /**
     * Marks the leaf "link" with operation "create".
     */
    public void markLinkCreate() throws JNCException {
        markLeafCreate("link");
    }

    /**
     * Marks the leaf "link" with operation "delete".
     */
    public void markLinkDelete() throws JNCException {
        markLeafDelete("link");
    }

    /**
     * Marks the leaf "link" with operation "remove".
     */
    public void markLinkRemove() throws JNCException {
        markLeafRemove("link");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
