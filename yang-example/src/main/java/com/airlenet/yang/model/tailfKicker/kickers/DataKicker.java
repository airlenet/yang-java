/* 
 * @(#)DataKicker.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-kicker", revision: "2016-11-24".
 */

package com.airlenet.yang.model.tailfKicker.kickers;

import com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier;
import com.airlenet.yang.model.ietfYangTypes.Xpath10;
import com.airlenet.yang.model.ietfYangTypes.YangIdentifier;
import com.airlenet.yang.model.tailfKicker.KickerPrefix;
import com.airlenet.yang.model.tailfKicker.kickers.dataKicker.Variable;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/kicker
 * generated to "src/main/java/com.airlenet.yang.model/tailfKicker/kickers/data-kicker"
 * <p>
 * See line 46 in
 * src/main/yang/module/tailf/tailf-kicker.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class DataKicker extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty DataKicker object.
     */
    public DataKicker() {
        super(KickerPrefix.NAMESPACE, "data-kicker");
    }

    /**
     * Constructor for an initialized DataKicker object,
     * 
     * @param idValue Key argument of child.
     */
    public DataKicker(YangString idValue) throws JNCException {
        super(KickerPrefix.NAMESPACE, "data-kicker");
        Leaf id = new Leaf(KickerPrefix.NAMESPACE, "id");
        id.setValue(idValue);
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized DataKicker object,
     * with String keys.
     * @param idValue Key argument of child.
     */
    public DataKicker(String idValue) throws JNCException {
        super(KickerPrefix.NAMESPACE, "data-kicker");
        Leaf id = new Leaf(KickerPrefix.NAMESPACE, "id");
        id.setValue(new com.tailf.jnc.YangString(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public DataKicker clone() {
        DataKicker copy;
        try {
            copy = new DataKicker(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (DataKicker)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public DataKicker cloneShallow() {
        DataKicker copy;
        try {
            copy = new DataKicker(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (DataKicker)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "id",
            "monitor",
            "trigger-expr",
            "trigger-type",
            "variable",
            "kick-node",
            "action-name",
        };
    }

    /* Access methods for leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getIdValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(com.tailf.jnc.YangString idValue)
            throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new com.tailf.jnc.YangString(idValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "monitor". */

    /**
     * Gets the value for child leaf "monitor".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier getMonitorValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier)getValue("monitor");
    }

    /**
     * Sets the value for child leaf "monitor",
     * using a JNC type value.
     * @param monitorValue The value to set.
     * @param monitorValue used during instantiation.
     */
    public void setMonitorValue(com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier monitorValue)
            throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "monitor",
            monitorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "monitor",
     * using a String value.
     * @param monitorValue used during instantiation.
     */
    public void setMonitorValue(String monitorValue) throws JNCException {
        setMonitorValue(new com.airlenet.yang.model.ietfNetconfAcm.NodeInstanceIdentifier(monitorValue));
    }

    /**
     * Unsets the value for child leaf "monitor".
     */
    public void unsetMonitorValue() throws JNCException {
        delete("monitor");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "monitor" leaf will not have a value.
     */
    public void addMonitor() throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "monitor",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "monitor" with operation "replace".
     */
    public void markMonitorReplace() throws JNCException {
        markLeafReplace("monitor");
    }

    /**
     * Marks the leaf "monitor" with operation "merge".
     */
    public void markMonitorMerge() throws JNCException {
        markLeafMerge("monitor");
    }

    /**
     * Marks the leaf "monitor" with operation "create".
     */
    public void markMonitorCreate() throws JNCException {
        markLeafCreate("monitor");
    }

    /**
     * Marks the leaf "monitor" with operation "delete".
     */
    public void markMonitorDelete() throws JNCException {
        markLeafDelete("monitor");
    }

    /**
     * Marks the leaf "monitor" with operation "remove".
     */
    public void markMonitorRemove() throws JNCException {
        markLeafRemove("monitor");
    }

    /* Access methods for optional leaf child: "trigger-expr". */

    /**
     * Gets the value for child leaf "trigger-expr".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.Xpath10 getTriggerExprValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.Xpath10)getValue("trigger-expr");
    }

    /**
     * Sets the value for child leaf "trigger-expr",
     * using a JNC type value.
     * @param triggerExprValue The value to set.
     * @param triggerExprValue used during instantiation.
     */
    public void setTriggerExprValue(com.airlenet.yang.model.ietfYangTypes.Xpath10 triggerExprValue)
            throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "trigger-expr",
            triggerExprValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "trigger-expr",
     * using a String value.
     * @param triggerExprValue used during instantiation.
     */
    public void setTriggerExprValue(String triggerExprValue)
            throws JNCException {
        setTriggerExprValue(new com.airlenet.yang.model.ietfYangTypes.Xpath10(triggerExprValue));
    }

    /**
     * Unsets the value for child leaf "trigger-expr".
     */
    public void unsetTriggerExprValue() throws JNCException {
        delete("trigger-expr");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "trigger-expr" leaf will not have a value.
     */
    public void addTriggerExpr() throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "trigger-expr",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "trigger-expr" with operation "replace".
     */
    public void markTriggerExprReplace() throws JNCException {
        markLeafReplace("trigger-expr");
    }

    /**
     * Marks the leaf "trigger-expr" with operation "merge".
     */
    public void markTriggerExprMerge() throws JNCException {
        markLeafMerge("trigger-expr");
    }

    /**
     * Marks the leaf "trigger-expr" with operation "create".
     */
    public void markTriggerExprCreate() throws JNCException {
        markLeafCreate("trigger-expr");
    }

    /**
     * Marks the leaf "trigger-expr" with operation "delete".
     */
    public void markTriggerExprDelete() throws JNCException {
        markLeafDelete("trigger-expr");
    }

    /**
     * Marks the leaf "trigger-expr" with operation "remove".
     */
    public void markTriggerExprRemove() throws JNCException {
        markLeafRemove("trigger-expr");
    }

    /* Access methods for optional leaf child: "trigger-type". */

    /**
     * Gets the value for child leaf "trigger-type".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getTriggerTypeValue()
            throws JNCException {
        com.tailf.jnc.YangEnumeration triggerType = (com.tailf.jnc.YangEnumeration)getValue("trigger-type");
        if (triggerType == null) {
            triggerType = new com.tailf.jnc.YangEnumeration("enter-and-leave", new String[] {  // default
                "enter-and-leave",
                "enter",
            });
        }
        return triggerType;
    }

    /**
     * Sets the value for child leaf "trigger-type",
     * using instance of generated typedef class.
     * @param triggerTypeValue The value to set.
     * @param triggerTypeValue used during instantiation.
     */
    public void setTriggerTypeValue(com.tailf.jnc.YangEnumeration triggerTypeValue)
            throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "trigger-type",
            triggerTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "trigger-type",
     * using a String value.
     * @param triggerTypeValue used during instantiation.
     */
    public void setTriggerTypeValue(String triggerTypeValue)
            throws JNCException {
        setTriggerTypeValue(new com.tailf.jnc.YangEnumeration(triggerTypeValue, new String[] {
             "enter-and-leave",
             "enter",
        }));
    }

    /**
     * Unsets the value for child leaf "trigger-type".
     */
    public void unsetTriggerTypeValue() throws JNCException {
        delete("trigger-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "trigger-type" leaf will not have a value.
     */
    public void addTriggerType() throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "trigger-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "trigger-type" with operation "replace".
     */
    public void markTriggerTypeReplace() throws JNCException {
        markLeafReplace("trigger-type");
    }

    /**
     * Marks the leaf "trigger-type" with operation "merge".
     */
    public void markTriggerTypeMerge() throws JNCException {
        markLeafMerge("trigger-type");
    }

    /**
     * Marks the leaf "trigger-type" with operation "create".
     */
    public void markTriggerTypeCreate() throws JNCException {
        markLeafCreate("trigger-type");
    }

    /**
     * Marks the leaf "trigger-type" with operation "delete".
     */
    public void markTriggerTypeDelete() throws JNCException {
        markLeafDelete("trigger-type");
    }

    /**
     * Marks the leaf "trigger-type" with operation "remove".
     */
    public void markTriggerTypeRemove() throws JNCException {
        markLeafRemove("trigger-type");
    }

    /* Access methods for list child: "variable". */

    /**
     * Gets list entry "variable", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Variable getVariable(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "variable[name='" + nameValue + "']";
        return (Variable)searchOne(path);
    }

    /**
     * Gets list entry "variable", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Variable getVariable(String nameValue) throws JNCException {
        String path = "variable[name='" + nameValue + "']";
        return (Variable)searchOne(path);
    }

    /**
     * Iterator method for the list "variable".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator variableIterator() {
        return new ElementChildrenIterator(children, "variable");
    }

    /**
     * List method for the list "variable".
     * @return An List for the list.
     */
    public List<Variable> getVariableList() {
        List<Variable> list = new ArrayList<>();
        ElementChildrenIterator iterator = variableIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Variable next =(Variable) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "variable", using an existing object.
     * @param variable The object to add.
     * @return The added child.
     */
    public Variable addVariable(Variable variable) throws JNCException {
        insertChild(variable, childrenNames());
        return variable;
    }

    /**
     * Adds list entry "variable", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Variable addVariable(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        Variable variable = new Variable(nameValue);
        return addVariable(variable);
    }

    /**
     * Adds list entry "variable", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Variable addVariable(String nameValue) throws JNCException {
        Variable variable = new Variable(nameValue);
        return addVariable(variable);
    }

    /**
     * Adds list entry "variable".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Variable addVariable() throws JNCException {
        Variable variable = new Variable();
        insertChild(variable, childrenNames());
        return variable;
    }

    /**
     * Deletes list entry "variable", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteVariable(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "variable[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "variable", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteVariable(String nameValue) throws JNCException {
        String path = "variable[name='" + nameValue + "']";
        delete(path);
    }

    /* Access methods for optional leaf child: "kick-node". */

    /**
     * Gets the value for child leaf "kick-node".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getKickNodeValue() throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("kick-node");
    }

    /**
     * Sets the value for child leaf "kick-node",
     * using instance of generated typedef class.
     * @param kickNodeValue The value to set.
     * @param kickNodeValue used during instantiation.
     */
    public void setKickNodeValue(com.tailf.jnc.YangUnion kickNodeValue)
            throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "kick-node",
            kickNodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "kick-node",
     * using a String value.
     * @param kickNodeValue used during instantiation.
     */
    public void setKickNodeValue(String kickNodeValue) throws JNCException {
        setKickNodeValue(new com.tailf.jnc.YangUnion(kickNodeValue, new String[] {
             "com.tailf.jnc.YangInstanceIdentifier",
             "com.airlenet.yang.model.ietfYangTypes.Xpath10",
        }));
    }

    /**
     * Unsets the value for child leaf "kick-node".
     */
    public void unsetKickNodeValue() throws JNCException {
        delete("kick-node");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "kick-node" leaf will not have a value.
     */
    public void addKickNode() throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "kick-node",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "kick-node" with operation "replace".
     */
    public void markKickNodeReplace() throws JNCException {
        markLeafReplace("kick-node");
    }

    /**
     * Marks the leaf "kick-node" with operation "merge".
     */
    public void markKickNodeMerge() throws JNCException {
        markLeafMerge("kick-node");
    }

    /**
     * Marks the leaf "kick-node" with operation "create".
     */
    public void markKickNodeCreate() throws JNCException {
        markLeafCreate("kick-node");
    }

    /**
     * Marks the leaf "kick-node" with operation "delete".
     */
    public void markKickNodeDelete() throws JNCException {
        markLeafDelete("kick-node");
    }

    /**
     * Marks the leaf "kick-node" with operation "remove".
     */
    public void markKickNodeRemove() throws JNCException {
        markLeafRemove("kick-node");
    }

    /* Access methods for optional leaf child: "action-name". */

    /**
     * Gets the value for child leaf "action-name".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.YangIdentifier getActionNameValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.YangIdentifier)getValue("action-name");
    }

    /**
     * Sets the value for child leaf "action-name",
     * using a JNC type value.
     * @param actionNameValue The value to set.
     * @param actionNameValue used during instantiation.
     */
    public void setActionNameValue(com.airlenet.yang.model.ietfYangTypes.YangIdentifier actionNameValue)
            throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "action-name",
            actionNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "action-name",
     * using a String value.
     * @param actionNameValue used during instantiation.
     */
    public void setActionNameValue(String actionNameValue) throws JNCException {
        setActionNameValue(new com.airlenet.yang.model.ietfYangTypes.YangIdentifier(actionNameValue));
    }

    /**
     * Unsets the value for child leaf "action-name".
     */
    public void unsetActionNameValue() throws JNCException {
        delete("action-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "action-name" leaf will not have a value.
     */
    public void addActionName() throws JNCException {
        setLeafValue(KickerPrefix.NAMESPACE,
            "action-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "action-name" with operation "replace".
     */
    public void markActionNameReplace() throws JNCException {
        markLeafReplace("action-name");
    }

    /**
     * Marks the leaf "action-name" with operation "merge".
     */
    public void markActionNameMerge() throws JNCException {
        markLeafMerge("action-name");
    }

    /**
     * Marks the leaf "action-name" with operation "create".
     */
    public void markActionNameCreate() throws JNCException {
        markLeafCreate("action-name");
    }

    /**
     * Marks the leaf "action-name" with operation "delete".
     */
    public void markActionNameDelete() throws JNCException {
        markLeafDelete("action-name");
    }

    /**
     * Marks the leaf "action-name" with operation "remove".
     */
    public void markActionNameRemove() throws JNCException {
        markLeafRemove("action-name");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
