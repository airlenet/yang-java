/* 
 * @(#)File.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.files;

import com.airlenet.yang.model.ietfYangTypes.DateAndTime;
import com.airlenet.yang.model.tailfNetconfMonitoring.TncmPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/files/file"
 * <p>
 * See line 144 in
 * src/main/yang/module/tailf/tailf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class File extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty File object.
     */
    public File() {
        super(TncmPrefix.NAMESPACE, "file");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public File clone() {
        return (File)cloneContent(new File());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public File cloneShallow() {
        return (File)cloneShallowContent(new File());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "creator",
            "created",
            "context",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "creator". */

    /**
     * Gets the value for child leaf "creator".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getCreatorValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("creator");
    }

    /**
     * Sets the value for child leaf "creator",
     * using instance of generated typedef class.
     * @param creatorValue The value to set.
     * @param creatorValue used during instantiation.
     */
    public void setCreatorValue(com.tailf.jnc.YangString creatorValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "creator",
            creatorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "creator",
     * using a String value.
     * @param creatorValue used during instantiation.
     */
    public void setCreatorValue(String creatorValue) throws JNCException {
        setCreatorValue(new com.tailf.jnc.YangString(creatorValue));
    }

    /**
     * Unsets the value for child leaf "creator".
     */
    public void unsetCreatorValue() throws JNCException {
        delete("creator");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "creator" leaf will not have a value.
     */
    public void addCreator() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "creator",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "creator" with operation "replace".
     */
    public void markCreatorReplace() throws JNCException {
        markLeafReplace("creator");
    }

    /**
     * Marks the leaf "creator" with operation "merge".
     */
    public void markCreatorMerge() throws JNCException {
        markLeafMerge("creator");
    }

    /**
     * Marks the leaf "creator" with operation "create".
     */
    public void markCreatorCreate() throws JNCException {
        markLeafCreate("creator");
    }

    /**
     * Marks the leaf "creator" with operation "delete".
     */
    public void markCreatorDelete() throws JNCException {
        markLeafDelete("creator");
    }

    /**
     * Marks the leaf "creator" with operation "remove".
     */
    public void markCreatorRemove() throws JNCException {
        markLeafRemove("creator");
    }

    /* Access methods for optional leaf child: "created". */

    /**
     * Gets the value for child leaf "created".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.DateAndTime getCreatedValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.DateAndTime)getValue("created");
    }

    /**
     * Sets the value for child leaf "created",
     * using a JNC type value.
     * @param createdValue The value to set.
     * @param createdValue used during instantiation.
     */
    public void setCreatedValue(com.airlenet.yang.model.ietfYangTypes.DateAndTime createdValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "created",
            createdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "created",
     * using a String value.
     * @param createdValue used during instantiation.
     */
    public void setCreatedValue(String createdValue) throws JNCException {
        setCreatedValue(new com.airlenet.yang.model.ietfYangTypes.DateAndTime(createdValue));
    }

    /**
     * Unsets the value for child leaf "created".
     */
    public void unsetCreatedValue() throws JNCException {
        delete("created");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "created" leaf will not have a value.
     */
    public void addCreated() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "created",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "created" with operation "replace".
     */
    public void markCreatedReplace() throws JNCException {
        markLeafReplace("created");
    }

    /**
     * Marks the leaf "created" with operation "merge".
     */
    public void markCreatedMerge() throws JNCException {
        markLeafMerge("created");
    }

    /**
     * Marks the leaf "created" with operation "create".
     */
    public void markCreatedCreate() throws JNCException {
        markLeafCreate("created");
    }

    /**
     * Marks the leaf "created" with operation "delete".
     */
    public void markCreatedDelete() throws JNCException {
        markLeafDelete("created");
    }

    /**
     * Marks the leaf "created" with operation "remove".
     */
    public void markCreatedRemove() throws JNCException {
        markLeafRemove("created");
    }

    /* Access methods for optional leaf child: "context". */

    /**
     * Gets the value for child leaf "context".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getContextValue() throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("context");
    }

    /**
     * Sets the value for child leaf "context",
     * using instance of generated typedef class.
     * @param contextValue The value to set.
     * @param contextValue used during instantiation.
     */
    public void setContextValue(com.tailf.jnc.YangUnion contextValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "context",
            contextValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "context",
     * using a String value.
     * @param contextValue used during instantiation.
     */
    public void setContextValue(String contextValue) throws JNCException {
        setContextValue(new com.tailf.jnc.YangUnion(contextValue, new String[] {
             "com.tailf.jnc.YangEnumeration",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * Unsets the value for child leaf "context".
     */
    public void unsetContextValue() throws JNCException {
        delete("context");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "context" leaf will not have a value.
     */
    public void addContext() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "context",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "context" with operation "replace".
     */
    public void markContextReplace() throws JNCException {
        markLeafReplace("context");
    }

    /**
     * Marks the leaf "context" with operation "merge".
     */
    public void markContextMerge() throws JNCException {
        markLeafMerge("context");
    }

    /**
     * Marks the leaf "context" with operation "create".
     */
    public void markContextCreate() throws JNCException {
        markLeafCreate("context");
    }

    /**
     * Marks the leaf "context" with operation "delete".
     */
    public void markContextDelete() throws JNCException {
        markLeafDelete("context");
    }

    /**
     * Marks the leaf "context" with operation "remove".
     */
    public void markContextRemove() throws JNCException {
        markLeafRemove("context");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
