/* 
 * @(#)DataModel.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState.loadedDataModels;

import com.airlenet.yang.model.ietfInetTypes.Uri;
import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEmpty;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/loadedDataModels/data-model"
 * <p>
 * See line 318 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class DataModel extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty DataModel object.
     */
    public DataModel() {
        super(TfcgPrefix.NAMESPACE, "data-model");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public DataModel clone() {
        return (DataModel)cloneContent(new DataModel());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public DataModel cloneShallow() {
        return (DataModel)cloneShallowContent(new DataModel());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "revision",
            "namespace",
            "prefix",
            "exported-to-all",
            "exported-to",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "revision". */

    /**
     * Gets the value for child leaf "revision".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getRevisionValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("revision");
    }

    /**
     * Sets the value for child leaf "revision",
     * using instance of generated typedef class.
     * @param revisionValue The value to set.
     * @param revisionValue used during instantiation.
     */
    public void setRevisionValue(com.tailf.jnc.YangString revisionValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "revision",
            revisionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "revision",
     * using a String value.
     * @param revisionValue used during instantiation.
     */
    public void setRevisionValue(String revisionValue) throws JNCException {
        setRevisionValue(new com.tailf.jnc.YangString(revisionValue));
    }

    /**
     * Unsets the value for child leaf "revision".
     */
    public void unsetRevisionValue() throws JNCException {
        delete("revision");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "revision" leaf will not have a value.
     */
    public void addRevision() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "revision",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "revision" with operation "replace".
     */
    public void markRevisionReplace() throws JNCException {
        markLeafReplace("revision");
    }

    /**
     * Marks the leaf "revision" with operation "merge".
     */
    public void markRevisionMerge() throws JNCException {
        markLeafMerge("revision");
    }

    /**
     * Marks the leaf "revision" with operation "create".
     */
    public void markRevisionCreate() throws JNCException {
        markLeafCreate("revision");
    }

    /**
     * Marks the leaf "revision" with operation "delete".
     */
    public void markRevisionDelete() throws JNCException {
        markLeafDelete("revision");
    }

    /**
     * Marks the leaf "revision" with operation "remove".
     */
    public void markRevisionRemove() throws JNCException {
        markLeafRemove("revision");
    }

    /* Access methods for optional leaf child: "namespace". */

    /**
     * Gets the value for child leaf "namespace".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.Uri getNamespaceValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.Uri)getValue("namespace");
    }

    /**
     * Sets the value for child leaf "namespace",
     * using a JNC type value.
     * @param namespaceValue The value to set.
     * @param namespaceValue used during instantiation.
     */
    public void setNamespaceValue(com.airlenet.yang.model.ietfInetTypes.Uri namespaceValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "namespace",
            namespaceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "namespace",
     * using a String value.
     * @param namespaceValue used during instantiation.
     */
    public void setNamespaceValue(String namespaceValue) throws JNCException {
        setNamespaceValue(new com.airlenet.yang.model.ietfInetTypes.Uri(namespaceValue));
    }

    /**
     * Unsets the value for child leaf "namespace".
     */
    public void unsetNamespaceValue() throws JNCException {
        delete("namespace");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "namespace" leaf will not have a value.
     */
    public void addNamespace() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "namespace",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "namespace" with operation "replace".
     */
    public void markNamespaceReplace() throws JNCException {
        markLeafReplace("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "merge".
     */
    public void markNamespaceMerge() throws JNCException {
        markLeafMerge("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "create".
     */
    public void markNamespaceCreate() throws JNCException {
        markLeafCreate("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "delete".
     */
    public void markNamespaceDelete() throws JNCException {
        markLeafDelete("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "remove".
     */
    public void markNamespaceRemove() throws JNCException {
        markLeafRemove("namespace");
    }

    /* Access methods for optional leaf child: "prefix". */

    /**
     * Gets the value for child leaf "prefix".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getPrefixValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("prefix");
    }

    /**
     * Sets the value for child leaf "prefix",
     * using instance of generated typedef class.
     * @param prefixValue The value to set.
     * @param prefixValue used during instantiation.
     */
    public void setPrefixValue(com.tailf.jnc.YangString prefixValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "prefix",
            prefixValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "prefix",
     * using a String value.
     * @param prefixValue used during instantiation.
     */
    public void setPrefixValue(String prefixValue) throws JNCException {
        setPrefixValue(new com.tailf.jnc.YangString(prefixValue));
    }

    /**
     * Unsets the value for child leaf "prefix".
     */
    public void unsetPrefixValue() throws JNCException {
        delete("prefix");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "prefix" leaf will not have a value.
     */
    public void addPrefix() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "prefix",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "prefix" with operation "replace".
     */
    public void markPrefixReplace() throws JNCException {
        markLeafReplace("prefix");
    }

    /**
     * Marks the leaf "prefix" with operation "merge".
     */
    public void markPrefixMerge() throws JNCException {
        markLeafMerge("prefix");
    }

    /**
     * Marks the leaf "prefix" with operation "create".
     */
    public void markPrefixCreate() throws JNCException {
        markLeafCreate("prefix");
    }

    /**
     * Marks the leaf "prefix" with operation "delete".
     */
    public void markPrefixDelete() throws JNCException {
        markLeafDelete("prefix");
    }

    /**
     * Marks the leaf "prefix" with operation "remove".
     */
    public void markPrefixRemove() throws JNCException {
        markLeafRemove("prefix");
    }

    /* Access methods for optional leaf child: "exported-to-all". */

    /**
     * Searches for leaf "exported-to-all".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getExportedToAllValue() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("exported-to-all");
    }

    /**
     * Sets the value for child leaf "exported-to-all",
     * using instance of generated typedef class.
     * @param exportedToAllValue The value to set.
     * @param exportedToAllValue used during instantiation.
     */
    public void setExportedToAllValue(com.tailf.jnc.YangEmpty exportedToAllValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "exported-to-all",
            exportedToAllValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "exported-to-all",
     * by instantiating it (value n/a).
     * @param exportedToAllValue ignored.
     */
    public void setExportedToAllValue(String exportedToAllValue)
            throws JNCException {
        setExportedToAllValue(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "exported-to-all".
     */
    public void unsetExportedToAllValue() throws JNCException {
        delete("exported-to-all");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "exported-to-all" leaf will not have a value.
     */
    public void addExportedToAll() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "exported-to-all",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "exported-to-all" with operation "replace".
     */
    public void markExportedToAllReplace() throws JNCException {
        markLeafReplace("exported-to-all");
    }

    /**
     * Marks the leaf "exported-to-all" with operation "merge".
     */
    public void markExportedToAllMerge() throws JNCException {
        markLeafMerge("exported-to-all");
    }

    /**
     * Marks the leaf "exported-to-all" with operation "create".
     */
    public void markExportedToAllCreate() throws JNCException {
        markLeafCreate("exported-to-all");
    }

    /**
     * Marks the leaf "exported-to-all" with operation "delete".
     */
    public void markExportedToAllDelete() throws JNCException {
        markLeafDelete("exported-to-all");
    }

    /**
     * Marks the leaf "exported-to-all" with operation "remove".
     */
    public void markExportedToAllRemove() throws JNCException {
        markLeafRemove("exported-to-all");
    }

    /* Access methods for optional leaf-list child: "exported-to". */

    /**
     * Iterator method for the leaf-list "exported-to".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator exportedToIterator() {
        return new ElementLeafListValueIterator(children, "exported-to");
    }

    /**
     * List method for the leaf-list "exported-to".
     * @return An List for the leaf-list.
     */
    public List<com.tailf.jnc.YangUnion> getExportedToList() {
        List<com.tailf.jnc.YangUnion> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = exportedToIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.tailf.jnc.YangUnion next =(com.tailf.jnc.YangUnion) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "exported-to",
     * using instance of generated typedef class.
     * @param exportedToValue The value to set.
     * @param exportedToValue used during instantiation.
     */
    public void setExportedToValue(com.tailf.jnc.YangUnion exportedToValue)
            throws JNCException {
        setLeafListValue(TfcgPrefix.NAMESPACE,
            "exported-to",
            exportedToValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "exported-to",
     * using a String value.
     * @param exportedToValue used during instantiation.
     */
    public void setExportedToValue(String exportedToValue) throws JNCException {
        setExportedToValue(new com.tailf.jnc.YangUnion(exportedToValue, new String[] {
             "com.tailf.jnc.YangEnumeration",
             "com.tailf.jnc.YangString",
        }));
    }

    /**
     * Deletes leaf-list entry "exportedTo".
     * @param exportedToValue Value to delete.
     */
    public void deleteExportedTo(YangUnion exportedToValue) throws JNCException {
        String path = "exported-to[exportedToValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "exportedTo".
     * The value is specified as a string.
     * @param exportedToValue Value to delete.
     */
    public void deleteExportedTo(String exportedToValue) throws JNCException {
        String path = "exported-to[exportedToValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "exported-to" leaf-list will not have a value.
     */
    public void addExportedTo() throws JNCException {
        setLeafListValue(TfcgPrefix.NAMESPACE,
            "exported-to",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "exported-to" with operation "replace".
     * @param exportedToValue The value to mark
     */
    public void markExportedToReplace(YangUnion exportedToValue)
            throws JNCException {
        markLeafReplace("exported-to[name='" + exportedToValue + "']");
    }

    /**
     * Marks the leaf-list "exported-to" with operation "merge".
     * @param exportedToValue The value to mark
     */
    public void markExportedToMerge(YangUnion exportedToValue)
            throws JNCException {
        markLeafMerge("exported-to[name='" + exportedToValue + "']");
    }

    /**
     * Marks the leaf-list "exported-to" with operation "create".
     * @param exportedToValue The value to mark
     */
    public void markExportedToCreate(YangUnion exportedToValue)
            throws JNCException {
        markLeafCreate("exported-to[name='" + exportedToValue + "']");
    }

    /**
     * Marks the leaf-list "exported-to" with operation "delete".
     * @param exportedToValue The value to mark
     */
    public void markExportedToDelete(YangUnion exportedToValue)
            throws JNCException {
        markLeafDelete("exported-to[name='" + exportedToValue + "']");
    }

    /**
     * Marks the leaf-list "exported-to" with operation "remove".
     * @param exportedToValue The value to mark
     */
    public void markExportedToRemove(YangUnion exportedToValue)
            throws JNCException {
        markLeafRemove("exported-to[name='" + exportedToValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
