/* 
 * @(#)Smp.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/smp"
 * <p>
 * See line 203 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Smp extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Smp object.
     */
    public Smp() {
        super(TfcgPrefix.NAMESPACE, "smp");
        setDefaultPrefix();
        setPrefix(TfcgPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Smp clone() {
        return (Smp)cloneContent(new Smp());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Smp cloneShallow() {
        return (Smp)cloneShallowContent(new Smp());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "number-of-threads",
        };
    }

    /* Access methods for optional leaf child: "number-of-threads". */

    /**
     * Gets the value for child leaf "number-of-threads".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt16 getNumberOfThreadsValue()
            throws JNCException {
        return (com.tailf.jnc.YangUInt16)getValue("number-of-threads");
    }

    /**
     * Sets the value for child leaf "number-of-threads",
     * using instance of generated typedef class.
     * @param numberOfThreadsValue The value to set.
     * @param numberOfThreadsValue used during instantiation.
     */
    public void setNumberOfThreadsValue(com.tailf.jnc.YangUInt16 numberOfThreadsValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "number-of-threads",
            numberOfThreadsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "number-of-threads",
     * using Java primitive values.
     * @param numberOfThreadsValue used during instantiation.
     */
    public void setNumberOfThreadsValue(int numberOfThreadsValue)
            throws JNCException {
        setNumberOfThreadsValue(new com.tailf.jnc.YangUInt16(numberOfThreadsValue));
    }

    /**
     * Sets the value for child leaf "number-of-threads",
     * using a String value.
     * @param numberOfThreadsValue used during instantiation.
     */
    public void setNumberOfThreadsValue(String numberOfThreadsValue)
            throws JNCException {
        setNumberOfThreadsValue(new com.tailf.jnc.YangUInt16(numberOfThreadsValue));
    }

    /**
     * Unsets the value for child leaf "number-of-threads".
     */
    public void unsetNumberOfThreadsValue() throws JNCException {
        delete("number-of-threads");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "number-of-threads" leaf will not have a value.
     */
    public void addNumberOfThreads() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "number-of-threads",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "number-of-threads" with operation "replace".
     */
    public void markNumberOfThreadsReplace() throws JNCException {
        markLeafReplace("number-of-threads");
    }

    /**
     * Marks the leaf "number-of-threads" with operation "merge".
     */
    public void markNumberOfThreadsMerge() throws JNCException {
        markLeafMerge("number-of-threads");
    }

    /**
     * Marks the leaf "number-of-threads" with operation "create".
     */
    public void markNumberOfThreadsCreate() throws JNCException {
        markLeafCreate("number-of-threads");
    }

    /**
     * Marks the leaf "number-of-threads" with operation "delete".
     */
    public void markNumberOfThreadsDelete() throws JNCException {
        markLeafDelete("number-of-threads");
    }

    /**
     * Marks the leaf "number-of-threads" with operation "remove".
     */
    public void markNumberOfThreadsRemove() throws JNCException {
        markLeafRemove("number-of-threads");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
