/* 
 * @(#)Group.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-acm", revision: "2012-02-22".
 */

package com.airlenet.yang.model.ietfNetconfAcm.nacm.groups;

import com.airlenet.yang.model.ietfNetconfAcm.GroupNameType;
import com.airlenet.yang.model.ietfNetconfAcm.NacmPrefix;
import com.airlenet.yang.model.ietfNetconfAcm.UserNameType;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfAcm/nacm/groups/group"
 * <p>
 * See line 286 in
 * src/main/yang/module/ietf/ietf-netconf-acm.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Group extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Group object.
     */
    public Group() {
        super(NacmPrefix.NAMESPACE, "group");
    }

    /**
     * Constructor for an initialized Group object,
     * 
     * @param nameValue Key argument of child.
     */
    public Group(GroupNameType nameValue) throws JNCException {
        super(NacmPrefix.NAMESPACE, "group");
        Leaf name = new Leaf(NacmPrefix.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized Group object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public Group(String nameValue) throws JNCException {
        super(NacmPrefix.NAMESPACE, "group");
        Leaf name = new Leaf(NacmPrefix.NAMESPACE, "name");
        name.setValue(new com.airlenet.yang.model.ietfNetconfAcm.GroupNameType(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Group clone() {
        Group copy;
        try {
            copy = new Group(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Group)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Group cloneShallow() {
        Group copy;
        try {
            copy = new Group(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Group)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "user-name",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.GroupNameType getNameValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconfAcm.GroupNameType)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using a JNC type value.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.airlenet.yang.model.ietfNetconfAcm.GroupNameType nameValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.airlenet.yang.model.ietfNetconfAcm.GroupNameType(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf-list child: "user-name". */

    /**
     * Iterator method for the leaf-list "user-name".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator userNameIterator() {
        return new ElementLeafListValueIterator(children, "user-name");
    }

    /**
     * List method for the leaf-list "user-name".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfNetconfAcm.UserNameType> getUserNameList() {
        List<com.airlenet.yang.model.ietfNetconfAcm.UserNameType> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = userNameIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfNetconfAcm.UserNameType next =(com.airlenet.yang.model.ietfNetconfAcm.UserNameType) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "user-name",
     * using a JNC type value.
     * @param userNameValue The value to set.
     * @param userNameValue used during instantiation.
     */
    public void setUserNameValue(com.airlenet.yang.model.ietfNetconfAcm.UserNameType userNameValue)
            throws JNCException {
        setLeafListValue(NacmPrefix.NAMESPACE,
            "user-name",
            userNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "user-name",
     * using a String value.
     * @param userNameValue used during instantiation.
     */
    public void setUserNameValue(String userNameValue) throws JNCException {
        setUserNameValue(new com.airlenet.yang.model.ietfNetconfAcm.UserNameType(userNameValue));
    }

    /**
     * Deletes leaf-list entry "userName".
     * @param userNameValue Value to delete.
     */
    public void deleteUserName(UserNameType userNameValue) throws JNCException {
        String path = "user-name[userNameValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "userName".
     * The value is specified as a string.
     * @param userNameValue Value to delete.
     */
    public void deleteUserName(String userNameValue) throws JNCException {
        String path = "user-name[userNameValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "user-name" leaf-list will not have a value.
     */
    public void addUserName() throws JNCException {
        setLeafListValue(NacmPrefix.NAMESPACE,
            "user-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "user-name" with operation "replace".
     * @param userNameValue The value to mark
     */
    public void markUserNameReplace(UserNameType userNameValue)
            throws JNCException {
        markLeafReplace("user-name[name='" + userNameValue + "']");
    }

    /**
     * Marks the leaf-list "user-name" with operation "merge".
     * @param userNameValue The value to mark
     */
    public void markUserNameMerge(UserNameType userNameValue)
            throws JNCException {
        markLeafMerge("user-name[name='" + userNameValue + "']");
    }

    /**
     * Marks the leaf-list "user-name" with operation "create".
     * @param userNameValue The value to mark
     */
    public void markUserNameCreate(UserNameType userNameValue)
            throws JNCException {
        markLeafCreate("user-name[name='" + userNameValue + "']");
    }

    /**
     * Marks the leaf-list "user-name" with operation "delete".
     * @param userNameValue The value to mark
     */
    public void markUserNameDelete(UserNameType userNameValue)
            throws JNCException {
        markLeafDelete("user-name[name='" + userNameValue + "']");
    }

    /**
     * Marks the leaf-list "user-name" with operation "remove".
     * @param userNameValue The value to mark
     */
    public void markUserNameRemove(UserNameType userNameValue)
            throws JNCException {
        markLeafRemove("user-name[name='" + userNameValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
