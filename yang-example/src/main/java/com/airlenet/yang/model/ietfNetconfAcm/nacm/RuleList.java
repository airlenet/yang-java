/* 
 * @(#)RuleList.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-acm", revision: "2012-02-22".
 */

package com.airlenet.yang.model.ietfNetconfAcm.nacm;

import com.airlenet.yang.model.ietfNetconfAcm.NacmPrefix;
import com.airlenet.yang.model.ietfNetconfAcm.nacm.ruleList.Rule;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfAcm/nacm/rule-list"
 * <p>
 * See line 310 in
 * src/main/yang/module/ietf/ietf-netconf-acm.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class RuleList extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty RuleList object.
     */
    public RuleList() {
        super(NacmPrefix.NAMESPACE, "rule-list");
    }

    /**
     * Constructor for an initialized RuleList object,
     * 
     * @param nameValue Key argument of child.
     */
    public RuleList(YangString nameValue) throws JNCException {
        super(NacmPrefix.NAMESPACE, "rule-list");
        Leaf name = new Leaf(NacmPrefix.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized RuleList object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public RuleList(String nameValue) throws JNCException {
        super(NacmPrefix.NAMESPACE, "rule-list");
        Leaf name = new Leaf(NacmPrefix.NAMESPACE, "name");
        name.setValue(new com.tailf.jnc.YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public RuleList clone() {
        RuleList copy;
        try {
            copy = new RuleList(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (RuleList)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public RuleList cloneShallow() {
        RuleList copy;
        try {
            copy = new RuleList(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (RuleList)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "group",
            "rule",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf-list child: "group". */

    /**
     * Iterator method for the leaf-list "group".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator groupIterator() {
        return new ElementLeafListValueIterator(children, "group");
    }

    /**
     * List method for the leaf-list "group".
     * @return An List for the leaf-list.
     */
    public List<com.tailf.jnc.YangUnion> getGroupList() {
        List<com.tailf.jnc.YangUnion> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = groupIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.tailf.jnc.YangUnion next =(com.tailf.jnc.YangUnion) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "group",
     * using instance of generated typedef class.
     * @param groupValue The value to set.
     * @param groupValue used during instantiation.
     */
    public void setGroupValue(com.tailf.jnc.YangUnion groupValue)
            throws JNCException {
        setLeafListValue(NacmPrefix.NAMESPACE,
            "group",
            groupValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "group",
     * using a String value.
     * @param groupValue used during instantiation.
     */
    public void setGroupValue(String groupValue) throws JNCException {
        setGroupValue(new com.tailf.jnc.YangUnion(groupValue, new String[] {
             "com.airlenet.yang.model.ietfNetconfAcm.MatchallStringType",
             "com.airlenet.yang.model.ietfNetconfAcm.GroupNameType",
        }));
    }

    /**
     * Deletes leaf-list entry "group".
     * @param groupValue Value to delete.
     */
    public void deleteGroup(YangUnion groupValue) throws JNCException {
        String path = "group[groupValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "group".
     * The value is specified as a string.
     * @param groupValue Value to delete.
     */
    public void deleteGroup(String groupValue) throws JNCException {
        String path = "group[groupValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "group" leaf-list will not have a value.
     */
    public void addGroup() throws JNCException {
        setLeafListValue(NacmPrefix.NAMESPACE,
            "group",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "group" with operation "replace".
     * @param groupValue The value to mark
     */
    public void markGroupReplace(YangUnion groupValue) throws JNCException {
        markLeafReplace("group[name='" + groupValue + "']");
    }

    /**
     * Marks the leaf-list "group" with operation "merge".
     * @param groupValue The value to mark
     */
    public void markGroupMerge(YangUnion groupValue) throws JNCException {
        markLeafMerge("group[name='" + groupValue + "']");
    }

    /**
     * Marks the leaf-list "group" with operation "create".
     * @param groupValue The value to mark
     */
    public void markGroupCreate(YangUnion groupValue) throws JNCException {
        markLeafCreate("group[name='" + groupValue + "']");
    }

    /**
     * Marks the leaf-list "group" with operation "delete".
     * @param groupValue The value to mark
     */
    public void markGroupDelete(YangUnion groupValue) throws JNCException {
        markLeafDelete("group[name='" + groupValue + "']");
    }

    /**
     * Marks the leaf-list "group" with operation "remove".
     * @param groupValue The value to mark
     */
    public void markGroupRemove(YangUnion groupValue) throws JNCException {
        markLeafRemove("group[name='" + groupValue + "']");
    }

    /* Access methods for list child: "rule". */

    /**
     * Gets list entry "rule", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Rule getRule(com.tailf.jnc.YangString nameValue) throws JNCException {
        String path = "rule[name='" + nameValue + "']";
        return (Rule)searchOne(path);
    }

    /**
     * Gets list entry "rule", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Rule getRule(String nameValue) throws JNCException {
        String path = "rule[name='" + nameValue + "']";
        return (Rule)searchOne(path);
    }

    /**
     * Iterator method for the list "rule".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator ruleIterator() {
        return new ElementChildrenIterator(children, "rule");
    }

    /**
     * List method for the list "rule".
     * @return An List for the list.
     */
    public List<Rule> getRuleList() {
        List<Rule> list = new ArrayList<>();
        ElementChildrenIterator iterator = ruleIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Rule next =(Rule) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "rule", using an existing object.
     * @param rule The object to add.
     * @return The added child.
     */
    public Rule addRule(Rule rule) throws JNCException {
        insertChild(rule, childrenNames());
        return rule;
    }

    /**
     * Adds list entry "rule", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Rule addRule(com.tailf.jnc.YangString nameValue) throws JNCException {
        Rule rule = new Rule(nameValue);
        return addRule(rule);
    }

    /**
     * Adds list entry "rule", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Rule addRule(String nameValue) throws JNCException {
        Rule rule = new Rule(nameValue);
        return addRule(rule);
    }

    /**
     * Adds list entry "rule".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Rule addRule() throws JNCException {
        Rule rule = new Rule();
        insertChild(rule, childrenNames());
        return rule;
    }

    /**
     * Deletes list entry "rule", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteRule(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "rule[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "rule", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteRule(String nameValue) throws JNCException {
        String path = "rule[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
