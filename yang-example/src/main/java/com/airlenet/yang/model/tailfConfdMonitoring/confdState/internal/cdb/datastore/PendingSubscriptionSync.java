/* 
 * @(#)PendingSubscriptionSync.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.cdb.datastore;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.internal.cdb.datastore.pendingSubscriptionSync.Notification;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangInt32;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/internal/cdb/datastore/pending-subscription-sync"
 * <p>
 * See line 683 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class PendingSubscriptionSync extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty PendingSubscriptionSync object.
     */
    public PendingSubscriptionSync() {
        super(TfcgPrefix.NAMESPACE, "pending-subscription-sync");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PendingSubscriptionSync clone() {
        return (PendingSubscriptionSync)cloneContent(new PendingSubscriptionSync());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PendingSubscriptionSync cloneShallow() {
        return (PendingSubscriptionSync)cloneShallowContent(new PendingSubscriptionSync());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "priority",
            "notification",
            "time-remaining",
        };
    }

    /* Access methods for optional leaf child: "priority". */

    /**
     * Gets the value for child leaf "priority".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangInt32 getPriorityValue() throws JNCException {
        return (com.tailf.jnc.YangInt32)getValue("priority");
    }

    /**
     * Sets the value for child leaf "priority",
     * using a JNC type value.
     * @param priorityValue The value to set.
     * @param priorityValue used during instantiation.
     */
    public void setPriorityValue(com.tailf.jnc.YangInt32 priorityValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "priority",
            priorityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "priority",
     * using Java primitive values.
     * @param priorityValue used during instantiation.
     */
    public void setPriorityValue(int priorityValue) throws JNCException {
        setPriorityValue(new com.tailf.jnc.YangInt32(priorityValue));
    }

    /**
     * Sets the value for child leaf "priority",
     * using a String value.
     * @param priorityValue used during instantiation.
     */
    public void setPriorityValue(String priorityValue) throws JNCException {
        setPriorityValue(new com.tailf.jnc.YangInt32(priorityValue));
    }

    /**
     * Unsets the value for child leaf "priority".
     */
    public void unsetPriorityValue() throws JNCException {
        delete("priority");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "priority" leaf will not have a value.
     */
    public void addPriority() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "priority",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "priority" with operation "replace".
     */
    public void markPriorityReplace() throws JNCException {
        markLeafReplace("priority");
    }

    /**
     * Marks the leaf "priority" with operation "merge".
     */
    public void markPriorityMerge() throws JNCException {
        markLeafMerge("priority");
    }

    /**
     * Marks the leaf "priority" with operation "create".
     */
    public void markPriorityCreate() throws JNCException {
        markLeafCreate("priority");
    }

    /**
     * Marks the leaf "priority" with operation "delete".
     */
    public void markPriorityDelete() throws JNCException {
        markLeafDelete("priority");
    }

    /**
     * Marks the leaf "priority" with operation "remove".
     */
    public void markPriorityRemove() throws JNCException {
        markLeafRemove("priority");
    }

    /* Access methods for list child: "notification". */

    /**
     * Gets list entry "notification", with specified keys.
     */
    public Notification getNotification() throws JNCException {
        String path = "notification";
        return (Notification)searchOne(path);
    }

    /**
     * Iterator method for the list "notification".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator notificationIterator() {
        return new ElementChildrenIterator(children, "notification");
    }

    /**
     * List method for the list "notification".
     * @return An List for the list.
     */
    public List<Notification> getNotificationList() {
        List<Notification> list = new ArrayList<>();
        ElementChildrenIterator iterator = notificationIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Notification next =(Notification) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "notification", using an existing object.
     * @param notification The object to add.
     * @return The added child.
     */
    public Notification addNotification(Notification notification)
            throws JNCException {
        insertChild(notification, childrenNames());
        return notification;
    }

    /**
     * Adds list entry "notification".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Notification addNotification() throws JNCException {
        Notification notification = new Notification();
        insertChild(notification, childrenNames());
        return notification;
    }

    /**
     * Deletes list entry "notification", with specified keys.
     */
    public void deleteNotification() throws JNCException {
        String path = "notification";
        delete(path);
    }

    /* Access methods for optional leaf child: "time-remaining". */

    /**
     * Gets the value for child leaf "time-remaining".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUnion getTimeRemainingValue() throws JNCException {
        return (com.tailf.jnc.YangUnion)getValue("time-remaining");
    }

    /**
     * Sets the value for child leaf "time-remaining",
     * using instance of generated typedef class.
     * @param timeRemainingValue The value to set.
     * @param timeRemainingValue used during instantiation.
     */
    public void setTimeRemainingValue(com.tailf.jnc.YangUnion timeRemainingValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "time-remaining",
            timeRemainingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "time-remaining",
     * using a String value.
     * @param timeRemainingValue used during instantiation.
     */
    public void setTimeRemainingValue(String timeRemainingValue)
            throws JNCException {
        setTimeRemainingValue(new com.tailf.jnc.YangUnion(timeRemainingValue, new String[] {
             "com.tailf.jnc.YangUInt64",
             "com.tailf.jnc.YangEnumeration",
        }));
    }

    /**
     * Unsets the value for child leaf "time-remaining".
     */
    public void unsetTimeRemainingValue() throws JNCException {
        delete("time-remaining");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "time-remaining" leaf will not have a value.
     */
    public void addTimeRemaining() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "time-remaining",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "time-remaining" with operation "replace".
     */
    public void markTimeRemainingReplace() throws JNCException {
        markLeafReplace("time-remaining");
    }

    /**
     * Marks the leaf "time-remaining" with operation "merge".
     */
    public void markTimeRemainingMerge() throws JNCException {
        markLeafMerge("time-remaining");
    }

    /**
     * Marks the leaf "time-remaining" with operation "create".
     */
    public void markTimeRemainingCreate() throws JNCException {
        markLeafCreate("time-remaining");
    }

    /**
     * Marks the leaf "time-remaining" with operation "delete".
     */
    public void markTimeRemainingDelete() throws JNCException {
        markLeafDelete("time-remaining");
    }

    /**
     * Marks the leaf "time-remaining" with operation "remove".
     */
    public void markTimeRemainingRemove() throws JNCException {
        markLeafRemove("time-remaining");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
