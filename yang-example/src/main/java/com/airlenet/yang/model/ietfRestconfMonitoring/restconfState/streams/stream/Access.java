/* 
 * @(#)Access.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-restconf-monitoring", revision: "2016-08-15".
 */

package com.airlenet.yang.model.ietfRestconfMonitoring.restconfState.streams.stream;

import com.airlenet.yang.model.ietfInetTypes.Uri;
import com.airlenet.yang.model.ietfRestconfMonitoring.RcmonPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfRestconfMonitoring/restconfState/streams/stream/access"
 * <p>
 * See line 122 in
 * src/main/yang/module/ietf/ietf-restconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Access extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Access object.
     */
    public Access() {
        super(RcmonPrefix.NAMESPACE, "access");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Access clone() {
        return (Access)cloneContent(new Access());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Access cloneShallow() {
        return (Access)cloneShallowContent(new Access());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "encoding",
            "location",
        };
    }

    /* Access methods for leaf child: "encoding". */

    /**
     * Gets the value for child leaf "encoding".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getEncodingValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("encoding");
    }

    /**
     * Sets the value for child leaf "encoding",
     * using instance of generated typedef class.
     * @param encodingValue The value to set.
     * @param encodingValue used during instantiation.
     */
    public void setEncodingValue(com.tailf.jnc.YangString encodingValue)
            throws JNCException {
        setLeafValue(RcmonPrefix.NAMESPACE,
            "encoding",
            encodingValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "encoding",
     * using a String value.
     * @param encodingValue used during instantiation.
     */
    public void setEncodingValue(String encodingValue) throws JNCException {
        setEncodingValue(new com.tailf.jnc.YangString(encodingValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "encoding" leaf will not have a value.
     */
    public void addEncoding() throws JNCException {
        setLeafValue(RcmonPrefix.NAMESPACE,
            "encoding",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "location". */

    /**
     * Gets the value for child leaf "location".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.Uri getLocationValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.Uri)getValue("location");
    }

    /**
     * Sets the value for child leaf "location",
     * using a JNC type value.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(com.airlenet.yang.model.ietfInetTypes.Uri locationValue)
            throws JNCException {
        setLeafValue(RcmonPrefix.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new com.airlenet.yang.model.ietfInetTypes.Uri(locationValue));
    }

    /**
     * Unsets the value for child leaf "location".
     */
    public void unsetLocationValue() throws JNCException {
        delete("location");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafValue(RcmonPrefix.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "location" with operation "replace".
     */
    public void markLocationReplace() throws JNCException {
        markLeafReplace("location");
    }

    /**
     * Marks the leaf "location" with operation "merge".
     */
    public void markLocationMerge() throws JNCException {
        markLeafMerge("location");
    }

    /**
     * Marks the leaf "location" with operation "create".
     */
    public void markLocationCreate() throws JNCException {
        markLeafCreate("location");
    }

    /**
     * Marks the leaf "location" with operation "delete".
     */
    public void markLocationDelete() throws JNCException {
        markLeafDelete("location");
    }

    /**
     * Marks the leaf "location" with operation "remove".
     */
    public void markLocationRemove() throws JNCException {
        markLeafRemove("location");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
