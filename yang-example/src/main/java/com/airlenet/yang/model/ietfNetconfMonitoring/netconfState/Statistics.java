/* 
 * @(#)Statistics.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState;

import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.airlenet.yang.model.ietfYangTypes.DateAndTime;
import com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/statistics"
 * <p>
 * See line 463 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Statistics extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Statistics object.
     */
    public Statistics() {
        super(NcmPrefix.NAMESPACE, "statistics");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Statistics clone() {
        return (Statistics)cloneContent(new Statistics());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Statistics cloneShallow() {
        return (Statistics)cloneShallowContent(new Statistics());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "netconf-start-time",
            "in-bad-hellos",
            "in-sessions",
            "dropped-sessions",
            "in-rpcs",
            "in-bad-rpcs",
            "out-rpc-errors",
            "out-notifications",
        };
    }

    /* Access methods for optional leaf child: "netconf-start-time". */

    /**
     * Gets the value for child leaf "netconf-start-time".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.DateAndTime getNetconfStartTimeValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.DateAndTime)getValue("netconf-start-time");
    }

    /**
     * Sets the value for child leaf "netconf-start-time",
     * using a JNC type value.
     * @param netconfStartTimeValue The value to set.
     * @param netconfStartTimeValue used during instantiation.
     */
    public void setNetconfStartTimeValue(com.airlenet.yang.model.ietfYangTypes.DateAndTime netconfStartTimeValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "netconf-start-time",
            netconfStartTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "netconf-start-time",
     * using a String value.
     * @param netconfStartTimeValue used during instantiation.
     */
    public void setNetconfStartTimeValue(String netconfStartTimeValue)
            throws JNCException {
        setNetconfStartTimeValue(new com.airlenet.yang.model.ietfYangTypes.DateAndTime(netconfStartTimeValue));
    }

    /**
     * Unsets the value for child leaf "netconf-start-time".
     */
    public void unsetNetconfStartTimeValue() throws JNCException {
        delete("netconf-start-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "netconf-start-time" leaf will not have a value.
     */
    public void addNetconfStartTime() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "netconf-start-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "netconf-start-time" with operation "replace".
     */
    public void markNetconfStartTimeReplace() throws JNCException {
        markLeafReplace("netconf-start-time");
    }

    /**
     * Marks the leaf "netconf-start-time" with operation "merge".
     */
    public void markNetconfStartTimeMerge() throws JNCException {
        markLeafMerge("netconf-start-time");
    }

    /**
     * Marks the leaf "netconf-start-time" with operation "create".
     */
    public void markNetconfStartTimeCreate() throws JNCException {
        markLeafCreate("netconf-start-time");
    }

    /**
     * Marks the leaf "netconf-start-time" with operation "delete".
     */
    public void markNetconfStartTimeDelete() throws JNCException {
        markLeafDelete("netconf-start-time");
    }

    /**
     * Marks the leaf "netconf-start-time" with operation "remove".
     */
    public void markNetconfStartTimeRemove() throws JNCException {
        markLeafRemove("netconf-start-time");
    }

    /* Access methods for optional leaf child: "in-bad-hellos". */

    /**
     * Gets the value for child leaf "in-bad-hellos".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getInBadHellosValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("in-bad-hellos");
    }

    /**
     * Sets the value for child leaf "in-bad-hellos",
     * using a JNC type value.
     * @param inBadHellosValue The value to set.
     * @param inBadHellosValue used during instantiation.
     */
    public void setInBadHellosValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 inBadHellosValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-bad-hellos",
            inBadHellosValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-bad-hellos",
     * using Java primitive values.
     * @param inBadHellosValue used during instantiation.
     */
    public void setInBadHellosValue(long inBadHellosValue) throws JNCException {
        setInBadHellosValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inBadHellosValue));
    }

    /**
     * Sets the value for child leaf "in-bad-hellos",
     * using a String value.
     * @param inBadHellosValue used during instantiation.
     */
    public void setInBadHellosValue(String inBadHellosValue)
            throws JNCException {
        setInBadHellosValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inBadHellosValue));
    }

    /**
     * Unsets the value for child leaf "in-bad-hellos".
     */
    public void unsetInBadHellosValue() throws JNCException {
        delete("in-bad-hellos");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-bad-hellos" leaf will not have a value.
     */
    public void addInBadHellos() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-bad-hellos",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-bad-hellos" with operation "replace".
     */
    public void markInBadHellosReplace() throws JNCException {
        markLeafReplace("in-bad-hellos");
    }

    /**
     * Marks the leaf "in-bad-hellos" with operation "merge".
     */
    public void markInBadHellosMerge() throws JNCException {
        markLeafMerge("in-bad-hellos");
    }

    /**
     * Marks the leaf "in-bad-hellos" with operation "create".
     */
    public void markInBadHellosCreate() throws JNCException {
        markLeafCreate("in-bad-hellos");
    }

    /**
     * Marks the leaf "in-bad-hellos" with operation "delete".
     */
    public void markInBadHellosDelete() throws JNCException {
        markLeafDelete("in-bad-hellos");
    }

    /**
     * Marks the leaf "in-bad-hellos" with operation "remove".
     */
    public void markInBadHellosRemove() throws JNCException {
        markLeafRemove("in-bad-hellos");
    }

    /* Access methods for optional leaf child: "in-sessions". */

    /**
     * Gets the value for child leaf "in-sessions".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getInSessionsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("in-sessions");
    }

    /**
     * Sets the value for child leaf "in-sessions",
     * using a JNC type value.
     * @param inSessionsValue The value to set.
     * @param inSessionsValue used during instantiation.
     */
    public void setInSessionsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 inSessionsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-sessions",
            inSessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-sessions",
     * using Java primitive values.
     * @param inSessionsValue used during instantiation.
     */
    public void setInSessionsValue(long inSessionsValue) throws JNCException {
        setInSessionsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inSessionsValue));
    }

    /**
     * Sets the value for child leaf "in-sessions",
     * using a String value.
     * @param inSessionsValue used during instantiation.
     */
    public void setInSessionsValue(String inSessionsValue) throws JNCException {
        setInSessionsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inSessionsValue));
    }

    /**
     * Unsets the value for child leaf "in-sessions".
     */
    public void unsetInSessionsValue() throws JNCException {
        delete("in-sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-sessions" leaf will not have a value.
     */
    public void addInSessions() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-sessions" with operation "replace".
     */
    public void markInSessionsReplace() throws JNCException {
        markLeafReplace("in-sessions");
    }

    /**
     * Marks the leaf "in-sessions" with operation "merge".
     */
    public void markInSessionsMerge() throws JNCException {
        markLeafMerge("in-sessions");
    }

    /**
     * Marks the leaf "in-sessions" with operation "create".
     */
    public void markInSessionsCreate() throws JNCException {
        markLeafCreate("in-sessions");
    }

    /**
     * Marks the leaf "in-sessions" with operation "delete".
     */
    public void markInSessionsDelete() throws JNCException {
        markLeafDelete("in-sessions");
    }

    /**
     * Marks the leaf "in-sessions" with operation "remove".
     */
    public void markInSessionsRemove() throws JNCException {
        markLeafRemove("in-sessions");
    }

    /* Access methods for optional leaf child: "dropped-sessions". */

    /**
     * Gets the value for child leaf "dropped-sessions".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getDroppedSessionsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("dropped-sessions");
    }

    /**
     * Sets the value for child leaf "dropped-sessions",
     * using a JNC type value.
     * @param droppedSessionsValue The value to set.
     * @param droppedSessionsValue used during instantiation.
     */
    public void setDroppedSessionsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 droppedSessionsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "dropped-sessions",
            droppedSessionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "dropped-sessions",
     * using Java primitive values.
     * @param droppedSessionsValue used during instantiation.
     */
    public void setDroppedSessionsValue(long droppedSessionsValue)
            throws JNCException {
        setDroppedSessionsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(droppedSessionsValue));
    }

    /**
     * Sets the value for child leaf "dropped-sessions",
     * using a String value.
     * @param droppedSessionsValue used during instantiation.
     */
    public void setDroppedSessionsValue(String droppedSessionsValue)
            throws JNCException {
        setDroppedSessionsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(droppedSessionsValue));
    }

    /**
     * Unsets the value for child leaf "dropped-sessions".
     */
    public void unsetDroppedSessionsValue() throws JNCException {
        delete("dropped-sessions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "dropped-sessions" leaf will not have a value.
     */
    public void addDroppedSessions() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "dropped-sessions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "dropped-sessions" with operation "replace".
     */
    public void markDroppedSessionsReplace() throws JNCException {
        markLeafReplace("dropped-sessions");
    }

    /**
     * Marks the leaf "dropped-sessions" with operation "merge".
     */
    public void markDroppedSessionsMerge() throws JNCException {
        markLeafMerge("dropped-sessions");
    }

    /**
     * Marks the leaf "dropped-sessions" with operation "create".
     */
    public void markDroppedSessionsCreate() throws JNCException {
        markLeafCreate("dropped-sessions");
    }

    /**
     * Marks the leaf "dropped-sessions" with operation "delete".
     */
    public void markDroppedSessionsDelete() throws JNCException {
        markLeafDelete("dropped-sessions");
    }

    /**
     * Marks the leaf "dropped-sessions" with operation "remove".
     */
    public void markDroppedSessionsRemove() throws JNCException {
        markLeafRemove("dropped-sessions");
    }

    /* Access methods for optional leaf child: "in-rpcs". */

    /**
     * Gets the value for child leaf "in-rpcs".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getInRpcsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("in-rpcs");
    }

    /**
     * Sets the value for child leaf "in-rpcs",
     * using a JNC type value.
     * @param inRpcsValue The value to set.
     * @param inRpcsValue used during instantiation.
     */
    public void setInRpcsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 inRpcsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-rpcs",
            inRpcsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-rpcs",
     * using Java primitive values.
     * @param inRpcsValue used during instantiation.
     */
    public void setInRpcsValue(long inRpcsValue) throws JNCException {
        setInRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inRpcsValue));
    }

    /**
     * Sets the value for child leaf "in-rpcs",
     * using a String value.
     * @param inRpcsValue used during instantiation.
     */
    public void setInRpcsValue(String inRpcsValue) throws JNCException {
        setInRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inRpcsValue));
    }

    /**
     * Unsets the value for child leaf "in-rpcs".
     */
    public void unsetInRpcsValue() throws JNCException {
        delete("in-rpcs");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-rpcs" leaf will not have a value.
     */
    public void addInRpcs() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-rpcs",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-rpcs" with operation "replace".
     */
    public void markInRpcsReplace() throws JNCException {
        markLeafReplace("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "merge".
     */
    public void markInRpcsMerge() throws JNCException {
        markLeafMerge("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "create".
     */
    public void markInRpcsCreate() throws JNCException {
        markLeafCreate("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "delete".
     */
    public void markInRpcsDelete() throws JNCException {
        markLeafDelete("in-rpcs");
    }

    /**
     * Marks the leaf "in-rpcs" with operation "remove".
     */
    public void markInRpcsRemove() throws JNCException {
        markLeafRemove("in-rpcs");
    }

    /* Access methods for optional leaf child: "in-bad-rpcs". */

    /**
     * Gets the value for child leaf "in-bad-rpcs".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getInBadRpcsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("in-bad-rpcs");
    }

    /**
     * Sets the value for child leaf "in-bad-rpcs",
     * using a JNC type value.
     * @param inBadRpcsValue The value to set.
     * @param inBadRpcsValue used during instantiation.
     */
    public void setInBadRpcsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 inBadRpcsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-bad-rpcs",
            inBadRpcsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-bad-rpcs",
     * using Java primitive values.
     * @param inBadRpcsValue used during instantiation.
     */
    public void setInBadRpcsValue(long inBadRpcsValue) throws JNCException {
        setInBadRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inBadRpcsValue));
    }

    /**
     * Sets the value for child leaf "in-bad-rpcs",
     * using a String value.
     * @param inBadRpcsValue used during instantiation.
     */
    public void setInBadRpcsValue(String inBadRpcsValue) throws JNCException {
        setInBadRpcsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(inBadRpcsValue));
    }

    /**
     * Unsets the value for child leaf "in-bad-rpcs".
     */
    public void unsetInBadRpcsValue() throws JNCException {
        delete("in-bad-rpcs");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-bad-rpcs" leaf will not have a value.
     */
    public void addInBadRpcs() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "in-bad-rpcs",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "replace".
     */
    public void markInBadRpcsReplace() throws JNCException {
        markLeafReplace("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "merge".
     */
    public void markInBadRpcsMerge() throws JNCException {
        markLeafMerge("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "create".
     */
    public void markInBadRpcsCreate() throws JNCException {
        markLeafCreate("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "delete".
     */
    public void markInBadRpcsDelete() throws JNCException {
        markLeafDelete("in-bad-rpcs");
    }

    /**
     * Marks the leaf "in-bad-rpcs" with operation "remove".
     */
    public void markInBadRpcsRemove() throws JNCException {
        markLeafRemove("in-bad-rpcs");
    }

    /* Access methods for optional leaf child: "out-rpc-errors". */

    /**
     * Gets the value for child leaf "out-rpc-errors".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getOutRpcErrorsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("out-rpc-errors");
    }

    /**
     * Sets the value for child leaf "out-rpc-errors",
     * using a JNC type value.
     * @param outRpcErrorsValue The value to set.
     * @param outRpcErrorsValue used during instantiation.
     */
    public void setOutRpcErrorsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 outRpcErrorsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-rpc-errors",
            outRpcErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-rpc-errors",
     * using Java primitive values.
     * @param outRpcErrorsValue used during instantiation.
     */
    public void setOutRpcErrorsValue(long outRpcErrorsValue)
            throws JNCException {
        setOutRpcErrorsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outRpcErrorsValue));
    }

    /**
     * Sets the value for child leaf "out-rpc-errors",
     * using a String value.
     * @param outRpcErrorsValue used during instantiation.
     */
    public void setOutRpcErrorsValue(String outRpcErrorsValue)
            throws JNCException {
        setOutRpcErrorsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outRpcErrorsValue));
    }

    /**
     * Unsets the value for child leaf "out-rpc-errors".
     */
    public void unsetOutRpcErrorsValue() throws JNCException {
        delete("out-rpc-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-rpc-errors" leaf will not have a value.
     */
    public void addOutRpcErrors() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-rpc-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "replace".
     */
    public void markOutRpcErrorsReplace() throws JNCException {
        markLeafReplace("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "merge".
     */
    public void markOutRpcErrorsMerge() throws JNCException {
        markLeafMerge("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "create".
     */
    public void markOutRpcErrorsCreate() throws JNCException {
        markLeafCreate("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "delete".
     */
    public void markOutRpcErrorsDelete() throws JNCException {
        markLeafDelete("out-rpc-errors");
    }

    /**
     * Marks the leaf "out-rpc-errors" with operation "remove".
     */
    public void markOutRpcErrorsRemove() throws JNCException {
        markLeafRemove("out-rpc-errors");
    }

    /* Access methods for optional leaf child: "out-notifications". */

    /**
     * Gets the value for child leaf "out-notifications".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getOutNotificationsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("out-notifications");
    }

    /**
     * Sets the value for child leaf "out-notifications",
     * using a JNC type value.
     * @param outNotificationsValue The value to set.
     * @param outNotificationsValue used during instantiation.
     */
    public void setOutNotificationsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 outNotificationsValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-notifications",
            outNotificationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-notifications",
     * using Java primitive values.
     * @param outNotificationsValue used during instantiation.
     */
    public void setOutNotificationsValue(long outNotificationsValue)
            throws JNCException {
        setOutNotificationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outNotificationsValue));
    }

    /**
     * Sets the value for child leaf "out-notifications",
     * using a String value.
     * @param outNotificationsValue used during instantiation.
     */
    public void setOutNotificationsValue(String outNotificationsValue)
            throws JNCException {
        setOutNotificationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(outNotificationsValue));
    }

    /**
     * Unsets the value for child leaf "out-notifications".
     */
    public void unsetOutNotificationsValue() throws JNCException {
        delete("out-notifications");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-notifications" leaf will not have a value.
     */
    public void addOutNotifications() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "out-notifications",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-notifications" with operation "replace".
     */
    public void markOutNotificationsReplace() throws JNCException {
        markLeafReplace("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "merge".
     */
    public void markOutNotificationsMerge() throws JNCException {
        markLeafMerge("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "create".
     */
    public void markOutNotificationsCreate() throws JNCException {
        markLeafCreate("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "delete".
     */
    public void markOutNotificationsDelete() throws JNCException {
        markLeafDelete("out-notifications");
    }

    /**
     * Marks the leaf "out-notifications" with operation "remove".
     */
    public void markOutNotificationsRemove() throws JNCException {
        markLeafRemove("out-notifications");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
