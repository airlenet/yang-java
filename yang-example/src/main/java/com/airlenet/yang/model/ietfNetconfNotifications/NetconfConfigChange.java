/* 
 * @(#)NetconfConfigChange.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-notifications", revision: "2012-02-06".
 */

package com.airlenet.yang.model.ietfNetconfNotifications;

import com.airlenet.yang.model.ietfNetconfNotifications.NcnPrefix;
import com.airlenet.yang.model.ietfNetconfNotifications.netconfConfigChange.ChangedBy;
import com.airlenet.yang.model.ietfNetconfNotifications.netconfConfigChange.Edit;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-notifications
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfNotifications/netconf-config-change"
 * <p>
 * See line 110 in
 * src/main/yang/module/ietf/ietf-netconf-notifications.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class NetconfConfigChange extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "changed-by".
     */
    public ChangedBy changedBy = null;
    public ChangedBy getChangedBy() {
        return this.changedBy;
    }

    /**
     * Constructor for an empty NetconfConfigChange object.
     */
    public NetconfConfigChange() {
        super(NcnPrefix.NAMESPACE, "netconf-config-change");
        setDefaultPrefix();
        setPrefix(NcnPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NetconfConfigChange clone() {
        return (NetconfConfigChange)cloneContent(new NetconfConfigChange());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NetconfConfigChange cloneShallow() {
        return (NetconfConfigChange)cloneShallowContent(new NetconfConfigChange());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "changed-by",
            "datastore",
            "edit",
        };
    }

    /* Access methods for container child: "changed-by". */

    /**
     * Adds container entry "changedBy", using an existing object.
     * @param changedBy The object to add.
     * @return The added child.
     */
    public ChangedBy addChangedBy(ChangedBy changedBy) throws JNCException {
        this.changedBy = changedBy;
        insertChild(changedBy, childrenNames());
        return changedBy;
    }

    /**
     * Adds container entry "changedBy".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ChangedBy addChangedBy() throws JNCException {
        ChangedBy changedBy = new ChangedBy();
        this.changedBy = changedBy;
        insertChild(changedBy, childrenNames());
        return changedBy;
    }

    /**
     * Deletes container entry "changedBy".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteChangedBy() throws JNCException {
        this.changedBy = null;
        String path = "changed-by";
        return delete(path);
    }

    /* Access methods for optional leaf child: "datastore". */

    /**
     * Gets the value for child leaf "datastore".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getDatastoreValue()
            throws JNCException {
        com.tailf.jnc.YangEnumeration datastore = (com.tailf.jnc.YangEnumeration)getValue("datastore");
        if (datastore == null) {
            datastore = new com.tailf.jnc.YangEnumeration("running", new String[] {  // default
                "running",
                "startup",
            });
        }
        return datastore;
    }

    /**
     * Sets the value for child leaf "datastore",
     * using instance of generated typedef class.
     * @param datastoreValue The value to set.
     * @param datastoreValue used during instantiation.
     */
    public void setDatastoreValue(com.tailf.jnc.YangEnumeration datastoreValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "datastore",
            datastoreValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "datastore",
     * using a String value.
     * @param datastoreValue used during instantiation.
     */
    public void setDatastoreValue(String datastoreValue) throws JNCException {
        setDatastoreValue(new com.tailf.jnc.YangEnumeration(datastoreValue, new String[] {
             "running",
             "startup",
        }));
    }

    /**
     * Unsets the value for child leaf "datastore".
     */
    public void unsetDatastoreValue() throws JNCException {
        delete("datastore");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "datastore" leaf will not have a value.
     */
    public void addDatastore() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "datastore",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "datastore" with operation "replace".
     */
    public void markDatastoreReplace() throws JNCException {
        markLeafReplace("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "merge".
     */
    public void markDatastoreMerge() throws JNCException {
        markLeafMerge("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "create".
     */
    public void markDatastoreCreate() throws JNCException {
        markLeafCreate("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "delete".
     */
    public void markDatastoreDelete() throws JNCException {
        markLeafDelete("datastore");
    }

    /**
     * Marks the leaf "datastore" with operation "remove".
     */
    public void markDatastoreRemove() throws JNCException {
        markLeafRemove("datastore");
    }

    /* Access methods for list child: "edit". */

    /**
     * Gets list entry "edit", with specified keys.
     */
    public Edit getEdit() throws JNCException {
        String path = "edit";
        return (Edit)searchOne(path);
    }

    /**
     * Iterator method for the list "edit".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator editIterator() {
        return new ElementChildrenIterator(children, "edit");
    }

    /**
     * List method for the list "edit".
     * @return An List for the list.
     */
    public List<Edit> getEditList() {
        List<Edit> list = new ArrayList<>();
        ElementChildrenIterator iterator = editIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Edit next =(Edit) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "edit", using an existing object.
     * @param edit The object to add.
     * @return The added child.
     */
    public Edit addEdit(Edit edit) throws JNCException {
        insertChild(edit, childrenNames());
        return edit;
    }

    /**
     * Adds list entry "edit".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Edit addEdit() throws JNCException {
        Edit edit = new Edit();
        insertChild(edit, childrenNames());
        return edit;
    }

    /**
     * Deletes list entry "edit", with specified keys.
     */
    public void deleteEdit() throws JNCException {
        String path = "edit";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof ChangedBy) changedBy = (ChangedBy)child;
    }

}
