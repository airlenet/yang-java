/* 
 * @(#)Ha.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState;

import com.airlenet.yang.model.tailfCommonMonitoring.HaNodeId;
import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/ha"
 * <p>
 * See line 261 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Ha extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Ha object.
     */
    public Ha() {
        super(TfcgPrefix.NAMESPACE, "ha");
        setDefaultPrefix();
        setPrefix(TfcgPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Ha clone() {
        return (Ha)cloneContent(new Ha());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Ha cloneShallow() {
        return (Ha)cloneShallowContent(new Ha());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mode",
            "node-id",
            "master-node-id",
            "connected-slave",
            "pending-slave",
        };
    }

    /* Access methods for optional leaf child: "mode". */

    /**
     * Gets the value for child leaf "mode".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getModeValue() throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("mode");
    }

    /**
     * Sets the value for child leaf "mode",
     * using instance of generated typedef class.
     * @param modeValue The value to set.
     * @param modeValue used during instantiation.
     */
    public void setModeValue(com.tailf.jnc.YangEnumeration modeValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "mode",
            modeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mode",
     * using a String value.
     * @param modeValue used during instantiation.
     */
    public void setModeValue(String modeValue) throws JNCException {
        setModeValue(new com.tailf.jnc.YangEnumeration(modeValue, new String[] {
             "none",
             "slave",
             "master",
             "relay-slave",
        }));
    }

    /**
     * Unsets the value for child leaf "mode".
     */
    public void unsetModeValue() throws JNCException {
        delete("mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mode" leaf will not have a value.
     */
    public void addMode() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mode" with operation "replace".
     */
    public void markModeReplace() throws JNCException {
        markLeafReplace("mode");
    }

    /**
     * Marks the leaf "mode" with operation "merge".
     */
    public void markModeMerge() throws JNCException {
        markLeafMerge("mode");
    }

    /**
     * Marks the leaf "mode" with operation "create".
     */
    public void markModeCreate() throws JNCException {
        markLeafCreate("mode");
    }

    /**
     * Marks the leaf "mode" with operation "delete".
     */
    public void markModeDelete() throws JNCException {
        markLeafDelete("mode");
    }

    /**
     * Marks the leaf "mode" with operation "remove".
     */
    public void markModeRemove() throws JNCException {
        markLeafRemove("mode");
    }

    /* Access methods for optional leaf child: "node-id". */

    /**
     * Gets the value for child leaf "node-id".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.tailfCommonMonitoring.HaNodeId getNodeIdValue()
            throws JNCException {
        return (com.airlenet.yang.model.tailfCommonMonitoring.HaNodeId)getValue("node-id");
    }

    /**
     * Sets the value for child leaf "node-id",
     * using a JNC type value.
     * @param nodeIdValue The value to set.
     * @param nodeIdValue used during instantiation.
     */
    public void setNodeIdValue(com.airlenet.yang.model.tailfCommonMonitoring.HaNodeId nodeIdValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "node-id",
            nodeIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "node-id",
     * using a String value.
     * @param nodeIdValue used during instantiation.
     */
    public void setNodeIdValue(String nodeIdValue) throws JNCException {
        setNodeIdValue(new com.airlenet.yang.model.tailfCommonMonitoring.HaNodeId(nodeIdValue));
    }

    /**
     * Unsets the value for child leaf "node-id".
     */
    public void unsetNodeIdValue() throws JNCException {
        delete("node-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "node-id" leaf will not have a value.
     */
    public void addNodeId() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "node-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "node-id" with operation "replace".
     */
    public void markNodeIdReplace() throws JNCException {
        markLeafReplace("node-id");
    }

    /**
     * Marks the leaf "node-id" with operation "merge".
     */
    public void markNodeIdMerge() throws JNCException {
        markLeafMerge("node-id");
    }

    /**
     * Marks the leaf "node-id" with operation "create".
     */
    public void markNodeIdCreate() throws JNCException {
        markLeafCreate("node-id");
    }

    /**
     * Marks the leaf "node-id" with operation "delete".
     */
    public void markNodeIdDelete() throws JNCException {
        markLeafDelete("node-id");
    }

    /**
     * Marks the leaf "node-id" with operation "remove".
     */
    public void markNodeIdRemove() throws JNCException {
        markLeafRemove("node-id");
    }

    /* Access methods for optional leaf child: "master-node-id". */

    /**
     * Gets the value for child leaf "master-node-id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getMasterNodeIdValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("master-node-id");
    }

    /**
     * Sets the value for child leaf "master-node-id",
     * using instance of generated typedef class.
     * @param masterNodeIdValue The value to set.
     * @param masterNodeIdValue used during instantiation.
     */
    public void setMasterNodeIdValue(com.tailf.jnc.YangString masterNodeIdValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "master-node-id",
            masterNodeIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "master-node-id",
     * using a String value.
     * @param masterNodeIdValue used during instantiation.
     */
    public void setMasterNodeIdValue(String masterNodeIdValue)
            throws JNCException {
        setMasterNodeIdValue(new com.tailf.jnc.YangString(masterNodeIdValue));
    }

    /**
     * Unsets the value for child leaf "master-node-id".
     */
    public void unsetMasterNodeIdValue() throws JNCException {
        delete("master-node-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "master-node-id" leaf will not have a value.
     */
    public void addMasterNodeId() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "master-node-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "master-node-id" with operation "replace".
     */
    public void markMasterNodeIdReplace() throws JNCException {
        markLeafReplace("master-node-id");
    }

    /**
     * Marks the leaf "master-node-id" with operation "merge".
     */
    public void markMasterNodeIdMerge() throws JNCException {
        markLeafMerge("master-node-id");
    }

    /**
     * Marks the leaf "master-node-id" with operation "create".
     */
    public void markMasterNodeIdCreate() throws JNCException {
        markLeafCreate("master-node-id");
    }

    /**
     * Marks the leaf "master-node-id" with operation "delete".
     */
    public void markMasterNodeIdDelete() throws JNCException {
        markLeafDelete("master-node-id");
    }

    /**
     * Marks the leaf "master-node-id" with operation "remove".
     */
    public void markMasterNodeIdRemove() throws JNCException {
        markLeafRemove("master-node-id");
    }

    /* Access methods for optional leaf-list child: "connected-slave". */

    /**
     * Iterator method for the leaf-list "connected-slave".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator connectedSlaveIterator() {
        return new ElementLeafListValueIterator(children, "connected-slave");
    }

    /**
     * List method for the leaf-list "connected-slave".
     * @return An List for the leaf-list.
     */
    public List<com.tailf.jnc.YangString> getConnectedSlaveList() {
        List<com.tailf.jnc.YangString> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = connectedSlaveIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.tailf.jnc.YangString next =(com.tailf.jnc.YangString) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "connected-slave",
     * using instance of generated typedef class.
     * @param connectedSlaveValue The value to set.
     * @param connectedSlaveValue used during instantiation.
     */
    public void setConnectedSlaveValue(com.tailf.jnc.YangString connectedSlaveValue)
            throws JNCException {
        setLeafListValue(TfcgPrefix.NAMESPACE,
            "connected-slave",
            connectedSlaveValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "connected-slave",
     * using a String value.
     * @param connectedSlaveValue used during instantiation.
     */
    public void setConnectedSlaveValue(String connectedSlaveValue)
            throws JNCException {
        setConnectedSlaveValue(new com.tailf.jnc.YangString(connectedSlaveValue));
    }

    /**
     * Deletes leaf-list entry "connectedSlave".
     * @param connectedSlaveValue Value to delete.
     */
    public void deleteConnectedSlave(YangString connectedSlaveValue)
            throws JNCException {
        String path = "connected-slave[connectedSlaveValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "connectedSlave".
     * The value is specified as a string.
     * @param connectedSlaveValue Value to delete.
     */
    public void deleteConnectedSlave(String connectedSlaveValue)
            throws JNCException {
        String path = "connected-slave[connectedSlaveValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connected-slave" leaf-list will not have a value.
     */
    public void addConnectedSlave() throws JNCException {
        setLeafListValue(TfcgPrefix.NAMESPACE,
            "connected-slave",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "connected-slave" with operation "replace".
     * @param connectedSlaveValue The value to mark
     */
    public void markConnectedSlaveReplace(YangString connectedSlaveValue)
            throws JNCException {
        markLeafReplace("connected-slave[name='" + connectedSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "connected-slave" with operation "merge".
     * @param connectedSlaveValue The value to mark
     */
    public void markConnectedSlaveMerge(YangString connectedSlaveValue)
            throws JNCException {
        markLeafMerge("connected-slave[name='" + connectedSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "connected-slave" with operation "create".
     * @param connectedSlaveValue The value to mark
     */
    public void markConnectedSlaveCreate(YangString connectedSlaveValue)
            throws JNCException {
        markLeafCreate("connected-slave[name='" + connectedSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "connected-slave" with operation "delete".
     * @param connectedSlaveValue The value to mark
     */
    public void markConnectedSlaveDelete(YangString connectedSlaveValue)
            throws JNCException {
        markLeafDelete("connected-slave[name='" + connectedSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "connected-slave" with operation "remove".
     * @param connectedSlaveValue The value to mark
     */
    public void markConnectedSlaveRemove(YangString connectedSlaveValue)
            throws JNCException {
        markLeafRemove("connected-slave[name='" + connectedSlaveValue + "']");
    }

    /* Access methods for optional leaf-list child: "pending-slave". */

    /**
     * Iterator method for the leaf-list "pending-slave".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator pendingSlaveIterator() {
        return new ElementLeafListValueIterator(children, "pending-slave");
    }

    /**
     * List method for the leaf-list "pending-slave".
     * @return An List for the leaf-list.
     */
    public List<com.tailf.jnc.YangString> getPendingSlaveList() {
        List<com.tailf.jnc.YangString> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = pendingSlaveIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.tailf.jnc.YangString next =(com.tailf.jnc.YangString) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "pending-slave",
     * using instance of generated typedef class.
     * @param pendingSlaveValue The value to set.
     * @param pendingSlaveValue used during instantiation.
     */
    public void setPendingSlaveValue(com.tailf.jnc.YangString pendingSlaveValue)
            throws JNCException {
        setLeafListValue(TfcgPrefix.NAMESPACE,
            "pending-slave",
            pendingSlaveValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "pending-slave",
     * using a String value.
     * @param pendingSlaveValue used during instantiation.
     */
    public void setPendingSlaveValue(String pendingSlaveValue)
            throws JNCException {
        setPendingSlaveValue(new com.tailf.jnc.YangString(pendingSlaveValue));
    }

    /**
     * Deletes leaf-list entry "pendingSlave".
     * @param pendingSlaveValue Value to delete.
     */
    public void deletePendingSlave(YangString pendingSlaveValue)
            throws JNCException {
        String path = "pending-slave[pendingSlaveValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "pendingSlave".
     * The value is specified as a string.
     * @param pendingSlaveValue Value to delete.
     */
    public void deletePendingSlave(String pendingSlaveValue)
            throws JNCException {
        String path = "pending-slave[pendingSlaveValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "pending-slave" leaf-list will not have a value.
     */
    public void addPendingSlave() throws JNCException {
        setLeafListValue(TfcgPrefix.NAMESPACE,
            "pending-slave",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "pending-slave" with operation "replace".
     * @param pendingSlaveValue The value to mark
     */
    public void markPendingSlaveReplace(YangString pendingSlaveValue)
            throws JNCException {
        markLeafReplace("pending-slave[name='" + pendingSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "pending-slave" with operation "merge".
     * @param pendingSlaveValue The value to mark
     */
    public void markPendingSlaveMerge(YangString pendingSlaveValue)
            throws JNCException {
        markLeafMerge("pending-slave[name='" + pendingSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "pending-slave" with operation "create".
     * @param pendingSlaveValue The value to mark
     */
    public void markPendingSlaveCreate(YangString pendingSlaveValue)
            throws JNCException {
        markLeafCreate("pending-slave[name='" + pendingSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "pending-slave" with operation "delete".
     * @param pendingSlaveValue The value to mark
     */
    public void markPendingSlaveDelete(YangString pendingSlaveValue)
            throws JNCException {
        markLeafDelete("pending-slave[name='" + pendingSlaveValue + "']");
    }

    /**
     * Marks the leaf-list "pending-slave" with operation "remove".
     * @param pendingSlaveValue The value to mark
     */
    public void markPendingSlaveRemove(YangString pendingSlaveValue)
            throws JNCException {
        markLeafRemove("pending-slave[name='" + pendingSlaveValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
