/* 
 * @(#)NetconfState.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring;

import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.Capabilities;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.Datastores;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.Schemas;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.Sessions;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.Statistics;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconf-state"
 * <p>
 * See line 193 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class NetconfState extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "capabilities".
     */
    public Capabilities capabilities = null;
    public Capabilities getCapabilities() {
        return this.capabilities;
    }

    /**
     * Field for child container "datastores".
     */
    public Datastores datastores = null;
    public Datastores getDatastores() {
        return this.datastores;
    }

    /**
     * Field for child container "schemas".
     */
    public Schemas schemas = null;
    public Schemas getSchemas() {
        return this.schemas;
    }

    /**
     * Field for child container "sessions".
     */
    public Sessions sessions = null;
    public Sessions getSessions() {
        return this.sessions;
    }

    /**
     * Field for child container "statistics".
     */
    public Statistics statistics = null;
    public Statistics getStatistics() {
        return this.statistics;
    }

    /**
     * Constructor for an empty NetconfState object.
     */
    public NetconfState() {
        super(NcmPrefix.NAMESPACE, "netconf-state");
        setDefaultPrefix();
        setPrefix(NcmPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NetconfState clone() {
        return (NetconfState)cloneContent(new NetconfState());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NetconfState cloneShallow() {
        return (NetconfState)cloneShallowContent(new NetconfState());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "capabilities",
            "datastores",
            "schemas",
            "sessions",
            "statistics",
        };
    }

    /* Access methods for container child: "capabilities". */

    /**
     * Adds container entry "capabilities", using an existing object.
     * @param capabilities The object to add.
     * @return The added child.
     */
    public Capabilities addCapabilities(Capabilities capabilities)
            throws JNCException {
        this.capabilities = capabilities;
        insertChild(capabilities, childrenNames());
        return capabilities;
    }

    /**
     * Adds container entry "capabilities".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Capabilities addCapabilities() throws JNCException {
        Capabilities capabilities = new Capabilities();
        this.capabilities = capabilities;
        insertChild(capabilities, childrenNames());
        return capabilities;
    }

    /**
     * Deletes container entry "capabilities".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCapabilities() throws JNCException {
        this.capabilities = null;
        String path = "capabilities";
        return delete(path);
    }

    /* Access methods for container child: "datastores". */

    /**
     * Adds container entry "datastores", using an existing object.
     * @param datastores The object to add.
     * @return The added child.
     */
    public Datastores addDatastores(Datastores datastores) throws JNCException {
        this.datastores = datastores;
        insertChild(datastores, childrenNames());
        return datastores;
    }

    /**
     * Adds container entry "datastores".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Datastores addDatastores() throws JNCException {
        Datastores datastores = new Datastores();
        this.datastores = datastores;
        insertChild(datastores, childrenNames());
        return datastores;
    }

    /**
     * Deletes container entry "datastores".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDatastores() throws JNCException {
        this.datastores = null;
        String path = "datastores";
        return delete(path);
    }

    /* Access methods for container child: "schemas". */

    /**
     * Adds container entry "schemas", using an existing object.
     * @param schemas The object to add.
     * @return The added child.
     */
    public Schemas addSchemas(Schemas schemas) throws JNCException {
        this.schemas = schemas;
        insertChild(schemas, childrenNames());
        return schemas;
    }

    /**
     * Adds container entry "schemas".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Schemas addSchemas() throws JNCException {
        Schemas schemas = new Schemas();
        this.schemas = schemas;
        insertChild(schemas, childrenNames());
        return schemas;
    }

    /**
     * Deletes container entry "schemas".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSchemas() throws JNCException {
        this.schemas = null;
        String path = "schemas";
        return delete(path);
    }

    /* Access methods for container child: "sessions". */

    /**
     * Adds container entry "sessions", using an existing object.
     * @param sessions The object to add.
     * @return The added child.
     */
    public Sessions addSessions(Sessions sessions) throws JNCException {
        this.sessions = sessions;
        insertChild(sessions, childrenNames());
        return sessions;
    }

    /**
     * Adds container entry "sessions".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Sessions addSessions() throws JNCException {
        Sessions sessions = new Sessions();
        this.sessions = sessions;
        insertChild(sessions, childrenNames());
        return sessions;
    }

    /**
     * Deletes container entry "sessions".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSessions() throws JNCException {
        this.sessions = null;
        String path = "sessions";
        return delete(path);
    }

    /* Access methods for container child: "statistics". */

    /**
     * Adds container entry "statistics", using an existing object.
     * @param statistics The object to add.
     * @return The added child.
     */
    public Statistics addStatistics(Statistics statistics) throws JNCException {
        this.statistics = statistics;
        insertChild(statistics, childrenNames());
        return statistics;
    }

    /**
     * Adds container entry "statistics".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Statistics addStatistics() throws JNCException {
        Statistics statistics = new Statistics();
        this.statistics = statistics;
        insertChild(statistics, childrenNames());
        return statistics;
    }

    /**
     * Deletes container entry "statistics".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteStatistics() throws JNCException {
        this.statistics = null;
        String path = "statistics";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Capabilities) capabilities = (Capabilities)child;
        else if (child instanceof Datastores) datastores = (Datastores)child;
        else if (child instanceof Schemas) schemas = (Schemas)child;
        else if (child instanceof Sessions) sessions = (Sessions)child;
        else if (child instanceof Statistics) statistics = (Statistics)child;
    }

}
