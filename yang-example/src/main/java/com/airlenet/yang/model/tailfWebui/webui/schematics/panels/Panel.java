/* 
 * @(#)Panel.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics.panels;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.Components;
import com.airlenet.yang.model.tailfWebui.webui.schematics.panels.panel.Properties;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/panels/panel"
 * <p>
 * See line 32 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Panel extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "properties".
     */
    public Properties properties = null;
    public Properties getProperties() {
        return this.properties;
    }

    /**
     * Field for child container "components".
     */
    public Components components = null;
    public Components getComponents() {
        return this.components;
    }

    /**
     * Constructor for an empty Panel object.
     */
    public Panel() {
        super(WebuiPrefix.NAMESPACE, "panel");
    }

    /**
     * Constructor for an initialized Panel object,
     * 
     * @param nameValue Key argument of child.
     */
    public Panel(YangString nameValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "panel");
        Leaf name = new Leaf(WebuiPrefix.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized Panel object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public Panel(String nameValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "panel");
        Leaf name = new Leaf(WebuiPrefix.NAMESPACE, "name");
        name.setValue(new com.tailf.jnc.YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Panel clone() {
        Panel copy;
        try {
            copy = new Panel(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Panel)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Panel cloneShallow() {
        Panel copy;
        try {
            copy = new Panel(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Panel)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "properties",
            "components",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for container child: "properties". */

    /**
     * Adds container entry "properties", using an existing object.
     * @param properties The object to add.
     * @return The added child.
     */
    public Properties addProperties(Properties properties) throws JNCException {
        this.properties = properties;
        insertChild(properties, childrenNames());
        return properties;
    }

    /**
     * Adds container entry "properties".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Properties addProperties() throws JNCException {
        Properties properties = new Properties();
        this.properties = properties;
        insertChild(properties, childrenNames());
        return properties;
    }

    /**
     * Deletes container entry "properties".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteProperties() throws JNCException {
        this.properties = null;
        String path = "properties";
        return delete(path);
    }

    /* Access methods for container child: "components". */

    /**
     * Adds container entry "components", using an existing object.
     * @param components The object to add.
     * @return The added child.
     */
    public Components addComponents(Components components) throws JNCException {
        this.components = components;
        insertChild(components, childrenNames());
        return components;
    }

    /**
     * Adds container entry "components".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Components addComponents() throws JNCException {
        Components components = new Components();
        this.components = components;
        insertChild(components, childrenNames());
        return components;
    }

    /**
     * Deletes container entry "components".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteComponents() throws JNCException {
        this.components = null;
        String path = "components";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Properties) properties = (Properties)child;
        else if (child instanceof Components) components = (Components)child;
    }

}
