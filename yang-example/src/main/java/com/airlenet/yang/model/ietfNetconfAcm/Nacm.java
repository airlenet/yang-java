/* 
 * @(#)Nacm.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-acm", revision: "2012-02-22".
 */

package com.airlenet.yang.model.ietfNetconfAcm;

import com.airlenet.yang.model.ietfNetconfAcm.ActionType;
import com.airlenet.yang.model.ietfNetconfAcm.NacmPrefix;
import com.airlenet.yang.model.ietfNetconfAcm.nacm.Groups;
import com.airlenet.yang.model.ietfNetconfAcm.nacm.RuleList;
import com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-acm
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfAcm/nacm"
 * <p>
 * See line 200 in
 * src/main/yang/module/ietf/ietf-netconf-acm.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Nacm extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "groups".
     */
    public Groups groups = null;
    public Groups getGroups() {
        return this.groups;
    }

    /**
     * Constructor for an empty Nacm object.
     */
    public Nacm() {
        super(NacmPrefix.NAMESPACE, "nacm");
        setDefaultPrefix();
        setPrefix(NacmPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Nacm clone() {
        return (Nacm)cloneContent(new Nacm());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Nacm cloneShallow() {
        return (Nacm)cloneShallowContent(new Nacm());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "enable-nacm",
            "read-default",
            "write-default",
            "exec-default",
            "enable-external-groups",
            "denied-operations",
            "denied-data-writes",
            "denied-notifications",
            "groups",
            "rule-list",
        };
    }

    /* Access methods for optional leaf child: "enable-nacm". */

    /**
     * Gets the value for child leaf "enable-nacm".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangBoolean getEnableNacmValue() throws JNCException {
        com.tailf.jnc.YangBoolean enableNacm = (com.tailf.jnc.YangBoolean)getValue("enable-nacm");
        if (enableNacm == null) {
            enableNacm = new com.tailf.jnc.YangBoolean("true");  // default
        }
        return enableNacm;
    }

    /**
     * Sets the value for child leaf "enable-nacm",
     * using instance of generated typedef class.
     * @param enableNacmValue The value to set.
     * @param enableNacmValue used during instantiation.
     */
    public void setEnableNacmValue(com.tailf.jnc.YangBoolean enableNacmValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "enable-nacm",
            enableNacmValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enable-nacm",
     * using Java primitive values.
     * @param enableNacmValue used during instantiation.
     */
    public void setEnableNacmValue(Boolean enableNacmValue) throws JNCException {
        setEnableNacmValue(new com.tailf.jnc.YangBoolean(enableNacmValue));
    }

    /**
     * Sets the value for child leaf "enable-nacm",
     * using a String value.
     * @param enableNacmValue used during instantiation.
     */
    public void setEnableNacmValue(String enableNacmValue) throws JNCException {
        setEnableNacmValue(new com.tailf.jnc.YangBoolean(enableNacmValue));
    }

    /**
     * Unsets the value for child leaf "enable-nacm".
     */
    public void unsetEnableNacmValue() throws JNCException {
        delete("enable-nacm");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enable-nacm" leaf will not have a value.
     */
    public void addEnableNacm() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "enable-nacm",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enable-nacm" with operation "replace".
     */
    public void markEnableNacmReplace() throws JNCException {
        markLeafReplace("enable-nacm");
    }

    /**
     * Marks the leaf "enable-nacm" with operation "merge".
     */
    public void markEnableNacmMerge() throws JNCException {
        markLeafMerge("enable-nacm");
    }

    /**
     * Marks the leaf "enable-nacm" with operation "create".
     */
    public void markEnableNacmCreate() throws JNCException {
        markLeafCreate("enable-nacm");
    }

    /**
     * Marks the leaf "enable-nacm" with operation "delete".
     */
    public void markEnableNacmDelete() throws JNCException {
        markLeafDelete("enable-nacm");
    }

    /**
     * Marks the leaf "enable-nacm" with operation "remove".
     */
    public void markEnableNacmRemove() throws JNCException {
        markLeafRemove("enable-nacm");
    }

    /* Access methods for optional leaf child: "read-default". */

    /**
     * Gets the value for child leaf "read-default".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.ActionType getReadDefaultValue()
            throws JNCException {
        com.airlenet.yang.model.ietfNetconfAcm.ActionType readDefault = (com.airlenet.yang.model.ietfNetconfAcm.ActionType)getValue("read-default");
        if (readDefault == null) {
            readDefault = new com.airlenet.yang.model.ietfNetconfAcm.ActionType("permit");  // default
        }
        return readDefault;
    }

    /**
     * Sets the value for child leaf "read-default",
     * using a JNC type value.
     * @param readDefaultValue The value to set.
     * @param readDefaultValue used during instantiation.
     */
    public void setReadDefaultValue(com.airlenet.yang.model.ietfNetconfAcm.ActionType readDefaultValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "read-default",
            readDefaultValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "read-default",
     * using a String value.
     * @param readDefaultValue used during instantiation.
     */
    public void setReadDefaultValue(String readDefaultValue)
            throws JNCException {
        setReadDefaultValue(new com.airlenet.yang.model.ietfNetconfAcm.ActionType(readDefaultValue));
    }

    /**
     * Unsets the value for child leaf "read-default".
     */
    public void unsetReadDefaultValue() throws JNCException {
        delete("read-default");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "read-default" leaf will not have a value.
     */
    public void addReadDefault() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "read-default",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "read-default" with operation "replace".
     */
    public void markReadDefaultReplace() throws JNCException {
        markLeafReplace("read-default");
    }

    /**
     * Marks the leaf "read-default" with operation "merge".
     */
    public void markReadDefaultMerge() throws JNCException {
        markLeafMerge("read-default");
    }

    /**
     * Marks the leaf "read-default" with operation "create".
     */
    public void markReadDefaultCreate() throws JNCException {
        markLeafCreate("read-default");
    }

    /**
     * Marks the leaf "read-default" with operation "delete".
     */
    public void markReadDefaultDelete() throws JNCException {
        markLeafDelete("read-default");
    }

    /**
     * Marks the leaf "read-default" with operation "remove".
     */
    public void markReadDefaultRemove() throws JNCException {
        markLeafRemove("read-default");
    }

    /* Access methods for optional leaf child: "write-default". */

    /**
     * Gets the value for child leaf "write-default".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.ActionType getWriteDefaultValue()
            throws JNCException {
        com.airlenet.yang.model.ietfNetconfAcm.ActionType writeDefault = (com.airlenet.yang.model.ietfNetconfAcm.ActionType)getValue("write-default");
        if (writeDefault == null) {
            writeDefault = new com.airlenet.yang.model.ietfNetconfAcm.ActionType("deny");  // default
        }
        return writeDefault;
    }

    /**
     * Sets the value for child leaf "write-default",
     * using a JNC type value.
     * @param writeDefaultValue The value to set.
     * @param writeDefaultValue used during instantiation.
     */
    public void setWriteDefaultValue(com.airlenet.yang.model.ietfNetconfAcm.ActionType writeDefaultValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "write-default",
            writeDefaultValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "write-default",
     * using a String value.
     * @param writeDefaultValue used during instantiation.
     */
    public void setWriteDefaultValue(String writeDefaultValue)
            throws JNCException {
        setWriteDefaultValue(new com.airlenet.yang.model.ietfNetconfAcm.ActionType(writeDefaultValue));
    }

    /**
     * Unsets the value for child leaf "write-default".
     */
    public void unsetWriteDefaultValue() throws JNCException {
        delete("write-default");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "write-default" leaf will not have a value.
     */
    public void addWriteDefault() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "write-default",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "write-default" with operation "replace".
     */
    public void markWriteDefaultReplace() throws JNCException {
        markLeafReplace("write-default");
    }

    /**
     * Marks the leaf "write-default" with operation "merge".
     */
    public void markWriteDefaultMerge() throws JNCException {
        markLeafMerge("write-default");
    }

    /**
     * Marks the leaf "write-default" with operation "create".
     */
    public void markWriteDefaultCreate() throws JNCException {
        markLeafCreate("write-default");
    }

    /**
     * Marks the leaf "write-default" with operation "delete".
     */
    public void markWriteDefaultDelete() throws JNCException {
        markLeafDelete("write-default");
    }

    /**
     * Marks the leaf "write-default" with operation "remove".
     */
    public void markWriteDefaultRemove() throws JNCException {
        markLeafRemove("write-default");
    }

    /* Access methods for optional leaf child: "exec-default". */

    /**
     * Gets the value for child leaf "exec-default".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfAcm.ActionType getExecDefaultValue()
            throws JNCException {
        com.airlenet.yang.model.ietfNetconfAcm.ActionType execDefault = (com.airlenet.yang.model.ietfNetconfAcm.ActionType)getValue("exec-default");
        if (execDefault == null) {
            execDefault = new com.airlenet.yang.model.ietfNetconfAcm.ActionType("permit");  // default
        }
        return execDefault;
    }

    /**
     * Sets the value for child leaf "exec-default",
     * using a JNC type value.
     * @param execDefaultValue The value to set.
     * @param execDefaultValue used during instantiation.
     */
    public void setExecDefaultValue(com.airlenet.yang.model.ietfNetconfAcm.ActionType execDefaultValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "exec-default",
            execDefaultValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "exec-default",
     * using a String value.
     * @param execDefaultValue used during instantiation.
     */
    public void setExecDefaultValue(String execDefaultValue)
            throws JNCException {
        setExecDefaultValue(new com.airlenet.yang.model.ietfNetconfAcm.ActionType(execDefaultValue));
    }

    /**
     * Unsets the value for child leaf "exec-default".
     */
    public void unsetExecDefaultValue() throws JNCException {
        delete("exec-default");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "exec-default" leaf will not have a value.
     */
    public void addExecDefault() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "exec-default",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "exec-default" with operation "replace".
     */
    public void markExecDefaultReplace() throws JNCException {
        markLeafReplace("exec-default");
    }

    /**
     * Marks the leaf "exec-default" with operation "merge".
     */
    public void markExecDefaultMerge() throws JNCException {
        markLeafMerge("exec-default");
    }

    /**
     * Marks the leaf "exec-default" with operation "create".
     */
    public void markExecDefaultCreate() throws JNCException {
        markLeafCreate("exec-default");
    }

    /**
     * Marks the leaf "exec-default" with operation "delete".
     */
    public void markExecDefaultDelete() throws JNCException {
        markLeafDelete("exec-default");
    }

    /**
     * Marks the leaf "exec-default" with operation "remove".
     */
    public void markExecDefaultRemove() throws JNCException {
        markLeafRemove("exec-default");
    }

    /* Access methods for optional leaf child: "enable-external-groups". */

    /**
     * Gets the value for child leaf "enable-external-groups".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangBoolean getEnableExternalGroupsValue()
            throws JNCException {
        com.tailf.jnc.YangBoolean enableExternalGroups = (com.tailf.jnc.YangBoolean)getValue("enable-external-groups");
        if (enableExternalGroups == null) {
            enableExternalGroups = new com.tailf.jnc.YangBoolean("true");  // default
        }
        return enableExternalGroups;
    }

    /**
     * Sets the value for child leaf "enable-external-groups",
     * using instance of generated typedef class.
     * @param enableExternalGroupsValue The value to set.
     * @param enableExternalGroupsValue used during instantiation.
     */
    public void setEnableExternalGroupsValue(com.tailf.jnc.YangBoolean enableExternalGroupsValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "enable-external-groups",
            enableExternalGroupsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enable-external-groups",
     * using Java primitive values.
     * @param enableExternalGroupsValue used during instantiation.
     */
    public void setEnableExternalGroupsValue(Boolean enableExternalGroupsValue)
            throws JNCException {
        setEnableExternalGroupsValue(new com.tailf.jnc.YangBoolean(enableExternalGroupsValue));
    }

    /**
     * Sets the value for child leaf "enable-external-groups",
     * using a String value.
     * @param enableExternalGroupsValue used during instantiation.
     */
    public void setEnableExternalGroupsValue(String enableExternalGroupsValue)
            throws JNCException {
        setEnableExternalGroupsValue(new com.tailf.jnc.YangBoolean(enableExternalGroupsValue));
    }

    /**
     * Unsets the value for child leaf "enable-external-groups".
     */
    public void unsetEnableExternalGroupsValue() throws JNCException {
        delete("enable-external-groups");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enable-external-groups" leaf will not have a value.
     */
    public void addEnableExternalGroups() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "enable-external-groups",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enable-external-groups" with operation "replace".
     */
    public void markEnableExternalGroupsReplace() throws JNCException {
        markLeafReplace("enable-external-groups");
    }

    /**
     * Marks the leaf "enable-external-groups" with operation "merge".
     */
    public void markEnableExternalGroupsMerge() throws JNCException {
        markLeafMerge("enable-external-groups");
    }

    /**
     * Marks the leaf "enable-external-groups" with operation "create".
     */
    public void markEnableExternalGroupsCreate() throws JNCException {
        markLeafCreate("enable-external-groups");
    }

    /**
     * Marks the leaf "enable-external-groups" with operation "delete".
     */
    public void markEnableExternalGroupsDelete() throws JNCException {
        markLeafDelete("enable-external-groups");
    }

    /**
     * Marks the leaf "enable-external-groups" with operation "remove".
     */
    public void markEnableExternalGroupsRemove() throws JNCException {
        markLeafRemove("enable-external-groups");
    }

    /* Access methods for optional leaf child: "denied-operations". */

    /**
     * Gets the value for child leaf "denied-operations".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getDeniedOperationsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("denied-operations");
    }

    /**
     * Sets the value for child leaf "denied-operations",
     * using a JNC type value.
     * @param deniedOperationsValue The value to set.
     * @param deniedOperationsValue used during instantiation.
     */
    public void setDeniedOperationsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 deniedOperationsValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "denied-operations",
            deniedOperationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "denied-operations",
     * using Java primitive values.
     * @param deniedOperationsValue used during instantiation.
     */
    public void setDeniedOperationsValue(long deniedOperationsValue)
            throws JNCException {
        setDeniedOperationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(deniedOperationsValue));
    }

    /**
     * Sets the value for child leaf "denied-operations",
     * using a String value.
     * @param deniedOperationsValue used during instantiation.
     */
    public void setDeniedOperationsValue(String deniedOperationsValue)
            throws JNCException {
        setDeniedOperationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(deniedOperationsValue));
    }

    /**
     * Unsets the value for child leaf "denied-operations".
     */
    public void unsetDeniedOperationsValue() throws JNCException {
        delete("denied-operations");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "denied-operations" leaf will not have a value.
     */
    public void addDeniedOperations() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "denied-operations",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "denied-operations" with operation "replace".
     */
    public void markDeniedOperationsReplace() throws JNCException {
        markLeafReplace("denied-operations");
    }

    /**
     * Marks the leaf "denied-operations" with operation "merge".
     */
    public void markDeniedOperationsMerge() throws JNCException {
        markLeafMerge("denied-operations");
    }

    /**
     * Marks the leaf "denied-operations" with operation "create".
     */
    public void markDeniedOperationsCreate() throws JNCException {
        markLeafCreate("denied-operations");
    }

    /**
     * Marks the leaf "denied-operations" with operation "delete".
     */
    public void markDeniedOperationsDelete() throws JNCException {
        markLeafDelete("denied-operations");
    }

    /**
     * Marks the leaf "denied-operations" with operation "remove".
     */
    public void markDeniedOperationsRemove() throws JNCException {
        markLeafRemove("denied-operations");
    }

    /* Access methods for optional leaf child: "denied-data-writes". */

    /**
     * Gets the value for child leaf "denied-data-writes".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getDeniedDataWritesValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("denied-data-writes");
    }

    /**
     * Sets the value for child leaf "denied-data-writes",
     * using a JNC type value.
     * @param deniedDataWritesValue The value to set.
     * @param deniedDataWritesValue used during instantiation.
     */
    public void setDeniedDataWritesValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 deniedDataWritesValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "denied-data-writes",
            deniedDataWritesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "denied-data-writes",
     * using Java primitive values.
     * @param deniedDataWritesValue used during instantiation.
     */
    public void setDeniedDataWritesValue(long deniedDataWritesValue)
            throws JNCException {
        setDeniedDataWritesValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(deniedDataWritesValue));
    }

    /**
     * Sets the value for child leaf "denied-data-writes",
     * using a String value.
     * @param deniedDataWritesValue used during instantiation.
     */
    public void setDeniedDataWritesValue(String deniedDataWritesValue)
            throws JNCException {
        setDeniedDataWritesValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(deniedDataWritesValue));
    }

    /**
     * Unsets the value for child leaf "denied-data-writes".
     */
    public void unsetDeniedDataWritesValue() throws JNCException {
        delete("denied-data-writes");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "denied-data-writes" leaf will not have a value.
     */
    public void addDeniedDataWrites() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "denied-data-writes",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "denied-data-writes" with operation "replace".
     */
    public void markDeniedDataWritesReplace() throws JNCException {
        markLeafReplace("denied-data-writes");
    }

    /**
     * Marks the leaf "denied-data-writes" with operation "merge".
     */
    public void markDeniedDataWritesMerge() throws JNCException {
        markLeafMerge("denied-data-writes");
    }

    /**
     * Marks the leaf "denied-data-writes" with operation "create".
     */
    public void markDeniedDataWritesCreate() throws JNCException {
        markLeafCreate("denied-data-writes");
    }

    /**
     * Marks the leaf "denied-data-writes" with operation "delete".
     */
    public void markDeniedDataWritesDelete() throws JNCException {
        markLeafDelete("denied-data-writes");
    }

    /**
     * Marks the leaf "denied-data-writes" with operation "remove".
     */
    public void markDeniedDataWritesRemove() throws JNCException {
        markLeafRemove("denied-data-writes");
    }

    /* Access methods for optional leaf child: "denied-notifications". */

    /**
     * Gets the value for child leaf "denied-notifications".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 getDeniedNotificationsValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32)getValue("denied-notifications");
    }

    /**
     * Sets the value for child leaf "denied-notifications",
     * using a JNC type value.
     * @param deniedNotificationsValue The value to set.
     * @param deniedNotificationsValue used during instantiation.
     */
    public void setDeniedNotificationsValue(com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32 deniedNotificationsValue)
            throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "denied-notifications",
            deniedNotificationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "denied-notifications",
     * using Java primitive values.
     * @param deniedNotificationsValue used during instantiation.
     */
    public void setDeniedNotificationsValue(long deniedNotificationsValue)
            throws JNCException {
        setDeniedNotificationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(deniedNotificationsValue));
    }

    /**
     * Sets the value for child leaf "denied-notifications",
     * using a String value.
     * @param deniedNotificationsValue used during instantiation.
     */
    public void setDeniedNotificationsValue(String deniedNotificationsValue)
            throws JNCException {
        setDeniedNotificationsValue(new com.airlenet.yang.model.ietfYangTypes.ZeroBasedCounter32(deniedNotificationsValue));
    }

    /**
     * Unsets the value for child leaf "denied-notifications".
     */
    public void unsetDeniedNotificationsValue() throws JNCException {
        delete("denied-notifications");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "denied-notifications" leaf will not have a value.
     */
    public void addDeniedNotifications() throws JNCException {
        setLeafValue(NacmPrefix.NAMESPACE,
            "denied-notifications",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "denied-notifications" with operation "replace".
     */
    public void markDeniedNotificationsReplace() throws JNCException {
        markLeafReplace("denied-notifications");
    }

    /**
     * Marks the leaf "denied-notifications" with operation "merge".
     */
    public void markDeniedNotificationsMerge() throws JNCException {
        markLeafMerge("denied-notifications");
    }

    /**
     * Marks the leaf "denied-notifications" with operation "create".
     */
    public void markDeniedNotificationsCreate() throws JNCException {
        markLeafCreate("denied-notifications");
    }

    /**
     * Marks the leaf "denied-notifications" with operation "delete".
     */
    public void markDeniedNotificationsDelete() throws JNCException {
        markLeafDelete("denied-notifications");
    }

    /**
     * Marks the leaf "denied-notifications" with operation "remove".
     */
    public void markDeniedNotificationsRemove() throws JNCException {
        markLeafRemove("denied-notifications");
    }

    /* Access methods for container child: "groups". */

    /**
     * Adds container entry "groups", using an existing object.
     * @param groups The object to add.
     * @return The added child.
     */
    public Groups addGroups(Groups groups) throws JNCException {
        this.groups = groups;
        insertChild(groups, childrenNames());
        return groups;
    }

    /**
     * Adds container entry "groups".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Groups addGroups() throws JNCException {
        Groups groups = new Groups();
        this.groups = groups;
        insertChild(groups, childrenNames());
        return groups;
    }

    /**
     * Deletes container entry "groups".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteGroups() throws JNCException {
        this.groups = null;
        String path = "groups";
        return delete(path);
    }

    /* Access methods for list child: "rule-list". */

    /**
     * Gets list entry "ruleList", with specified keys.
     * @param nameValue Key argument of child.
     */
    public RuleList getRuleList(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "rule-list[name='" + nameValue + "']";
        return (RuleList)searchOne(path);
    }

    /**
     * Gets list entry "ruleList", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public RuleList getRuleList(String nameValue) throws JNCException {
        String path = "rule-list[name='" + nameValue + "']";
        return (RuleList)searchOne(path);
    }

    /**
     * Iterator method for the list "rule-list".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator ruleListIterator() {
        return new ElementChildrenIterator(children, "rule-list");
    }

    /**
     * List method for the list "rule-list".
     * @return An List for the list.
     */
    public List<RuleList> getRuleListList() {
        List<RuleList> list = new ArrayList<>();
        ElementChildrenIterator iterator = ruleListIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            RuleList next =(RuleList) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "ruleList", using an existing object.
     * @param ruleList The object to add.
     * @return The added child.
     */
    public RuleList addRuleList(RuleList ruleList) throws JNCException {
        insertChild(ruleList, childrenNames());
        return ruleList;
    }

    /**
     * Adds list entry "ruleList", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public RuleList addRuleList(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        RuleList ruleList = new RuleList(nameValue);
        return addRuleList(ruleList);
    }

    /**
     * Adds list entry "ruleList", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public RuleList addRuleList(String nameValue) throws JNCException {
        RuleList ruleList = new RuleList(nameValue);
        return addRuleList(ruleList);
    }

    /**
     * Adds list entry "ruleList".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public RuleList addRuleList() throws JNCException {
        RuleList ruleList = new RuleList();
        insertChild(ruleList, childrenNames());
        return ruleList;
    }

    /**
     * Deletes list entry "ruleList", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteRuleList(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "rule-list[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "ruleList", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteRuleList(String nameValue) throws JNCException {
        String path = "rule-list[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Groups) groups = (Groups)child;
    }

}
