/* 
 * @(#)Employee.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "demo", revision: "unknown".
 */

package com.airlenet.yang.model.demo.employees;

import com.airlenet.yang.model.demo.DemoPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/example/demo
 * generated to "src/main/java/com.airlenet.yang.model/demo/employees/employee"
 * <p>
 * See line 6 in
 * src/main/yang/demo.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Employee extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Employee object.
     */
    public Employee() {
        super(DemoPrefix.NAMESPACE, "employee");
    }

    /**
     * Constructor for an initialized Employee object,
     * 
     * @param idValue Key argument of child.
     */
    public Employee(YangUInt32 idValue) throws JNCException {
        super(DemoPrefix.NAMESPACE, "employee");
        Leaf id = new Leaf(DemoPrefix.NAMESPACE, "id");
        id.setValue(idValue);
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Employee object,
     * with String keys.
     * @param idValue Key argument of child.
     */
    public Employee(String idValue) throws JNCException {
        super(DemoPrefix.NAMESPACE, "employee");
        Leaf id = new Leaf(DemoPrefix.NAMESPACE, "id");
        id.setValue(new com.tailf.jnc.YangUInt32(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Constructor for an initialized Employee object,
     * with keys of built in Java types.
     * @param idValue Key argument of child.
     */
    public Employee(long idValue) throws JNCException {
        super(DemoPrefix.NAMESPACE, "employee");
        Leaf id = new Leaf(DemoPrefix.NAMESPACE, "id");
        id.setValue(new com.tailf.jnc.YangUInt32(idValue));
        insertChild(id, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Employee clone() {
        Employee copy;
        try {
            copy = new Employee(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Employee)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Employee cloneShallow() {
        Employee copy;
        try {
            copy = new Employee(getIdValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Employee)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "id",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "id",
            "name",
            "age",
            "title",
            "city",
        };
    }

    /* Access methods for leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt32 getIdValue() throws JNCException {
        return (com.tailf.jnc.YangUInt32)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(com.tailf.jnc.YangUInt32 idValue)
            throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using Java primitive values.
     * @param idValue used during instantiation.
     */
    public void setIdValue(long idValue) throws JNCException {
        setIdValue(new com.tailf.jnc.YangUInt32(idValue));
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new com.tailf.jnc.YangUInt32(idValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /**
     * Marks the leaf "name" with operation "remove".
     */
    public void markNameRemove() throws JNCException {
        markLeafRemove("name");
    }

    /* Access methods for optional leaf child: "age". */

    /**
     * Gets the value for child leaf "age".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt8 getAgeValue() throws JNCException {
        return (com.tailf.jnc.YangUInt8)getValue("age");
    }

    /**
     * Sets the value for child leaf "age",
     * using instance of generated typedef class.
     * @param ageValue The value to set.
     * @param ageValue used during instantiation.
     */
    public void setAgeValue(com.tailf.jnc.YangUInt8 ageValue)
            throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "age",
            ageValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "age",
     * using Java primitive values.
     * @param ageValue used during instantiation.
     */
    public void setAgeValue(short ageValue) throws JNCException {
        setAgeValue(new com.tailf.jnc.YangUInt8(ageValue));
    }

    /**
     * Sets the value for child leaf "age",
     * using a String value.
     * @param ageValue used during instantiation.
     */
    public void setAgeValue(String ageValue) throws JNCException {
        setAgeValue(new com.tailf.jnc.YangUInt8(ageValue));
    }

    /**
     * Unsets the value for child leaf "age".
     */
    public void unsetAgeValue() throws JNCException {
        delete("age");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "age" leaf will not have a value.
     */
    public void addAge() throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "age",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "age" with operation "replace".
     */
    public void markAgeReplace() throws JNCException {
        markLeafReplace("age");
    }

    /**
     * Marks the leaf "age" with operation "merge".
     */
    public void markAgeMerge() throws JNCException {
        markLeafMerge("age");
    }

    /**
     * Marks the leaf "age" with operation "create".
     */
    public void markAgeCreate() throws JNCException {
        markLeafCreate("age");
    }

    /**
     * Marks the leaf "age" with operation "delete".
     */
    public void markAgeDelete() throws JNCException {
        markLeafDelete("age");
    }

    /**
     * Marks the leaf "age" with operation "remove".
     */
    public void markAgeRemove() throws JNCException {
        markLeafRemove("age");
    }

    /* Access methods for optional leaf child: "title". */

    /**
     * Gets the value for child leaf "title".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getTitleValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("title");
    }

    /**
     * Sets the value for child leaf "title",
     * using instance of generated typedef class.
     * @param titleValue The value to set.
     * @param titleValue used during instantiation.
     */
    public void setTitleValue(com.tailf.jnc.YangString titleValue)
            throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "title",
            titleValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "title",
     * using a String value.
     * @param titleValue used during instantiation.
     */
    public void setTitleValue(String titleValue) throws JNCException {
        setTitleValue(new com.tailf.jnc.YangString(titleValue));
    }

    /**
     * Unsets the value for child leaf "title".
     */
    public void unsetTitleValue() throws JNCException {
        delete("title");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "title" leaf will not have a value.
     */
    public void addTitle() throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "title",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "title" with operation "replace".
     */
    public void markTitleReplace() throws JNCException {
        markLeafReplace("title");
    }

    /**
     * Marks the leaf "title" with operation "merge".
     */
    public void markTitleMerge() throws JNCException {
        markLeafMerge("title");
    }

    /**
     * Marks the leaf "title" with operation "create".
     */
    public void markTitleCreate() throws JNCException {
        markLeafCreate("title");
    }

    /**
     * Marks the leaf "title" with operation "delete".
     */
    public void markTitleDelete() throws JNCException {
        markLeafDelete("title");
    }

    /**
     * Marks the leaf "title" with operation "remove".
     */
    public void markTitleRemove() throws JNCException {
        markLeafRemove("title");
    }

    /* Access methods for optional leaf child: "city". */

    /**
     * Gets the value for child leaf "city".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getCityValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("city");
    }

    /**
     * Sets the value for child leaf "city",
     * using instance of generated typedef class.
     * @param cityValue The value to set.
     * @param cityValue used during instantiation.
     */
    public void setCityValue(com.tailf.jnc.YangString cityValue)
            throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "city",
            cityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "city",
     * using a String value.
     * @param cityValue used during instantiation.
     */
    public void setCityValue(String cityValue) throws JNCException {
        setCityValue(new com.tailf.jnc.YangString(cityValue));
    }

    /**
     * Unsets the value for child leaf "city".
     */
    public void unsetCityValue() throws JNCException {
        delete("city");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "city" leaf will not have a value.
     */
    public void addCity() throws JNCException {
        setLeafValue(DemoPrefix.NAMESPACE,
            "city",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "city" with operation "replace".
     */
    public void markCityReplace() throws JNCException {
        markLeafReplace("city");
    }

    /**
     * Marks the leaf "city" with operation "merge".
     */
    public void markCityMerge() throws JNCException {
        markLeafMerge("city");
    }

    /**
     * Marks the leaf "city" with operation "create".
     */
    public void markCityCreate() throws JNCException {
        markLeafCreate("city");
    }

    /**
     * Marks the leaf "city" with operation "delete".
     */
    public void markCityDelete() throws JNCException {
        markLeafDelete("city");
    }

    /**
     * Marks the leaf "city" with operation "remove".
     */
    public void markCityRemove() throws JNCException {
        markLeafRemove("city");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
