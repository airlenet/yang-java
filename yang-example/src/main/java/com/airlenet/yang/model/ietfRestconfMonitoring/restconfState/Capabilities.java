/* 
 * @(#)Capabilities.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-restconf-monitoring", revision: "2016-08-15".
 */

package com.airlenet.yang.model.ietfRestconfMonitoring.restconfState;

import com.airlenet.yang.model.ietfInetTypes.Uri;
import com.airlenet.yang.model.ietfRestconfMonitoring.RcmonPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfRestconfMonitoring/restconfState/capabilities"
 * <p>
 * See line 61 in
 * src/main/yang/module/ietf/ietf-restconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Capabilities extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Capabilities object.
     */
    public Capabilities() {
        super(RcmonPrefix.NAMESPACE, "capabilities");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Capabilities clone() {
        return (Capabilities)cloneContent(new Capabilities());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Capabilities cloneShallow() {
        return (Capabilities)cloneShallowContent(new Capabilities());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "capability",
        };
    }

    /* Access methods for optional leaf-list child: "capability". */

    /**
     * Iterator method for the leaf-list "capability".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator capabilityIterator() {
        return new ElementLeafListValueIterator(children, "capability");
    }

    /**
     * List method for the leaf-list "capability".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfInetTypes.Uri> getCapabilityList() {
        List<com.airlenet.yang.model.ietfInetTypes.Uri> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = capabilityIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfInetTypes.Uri next =(com.airlenet.yang.model.ietfInetTypes.Uri) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "capability",
     * using a JNC type value.
     * @param capabilityValue The value to set.
     * @param capabilityValue used during instantiation.
     */
    public void setCapabilityValue(com.airlenet.yang.model.ietfInetTypes.Uri capabilityValue)
            throws JNCException {
        setLeafListValue(RcmonPrefix.NAMESPACE,
            "capability",
            capabilityValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "capability",
     * using a String value.
     * @param capabilityValue used during instantiation.
     */
    public void setCapabilityValue(String capabilityValue) throws JNCException {
        setCapabilityValue(new com.airlenet.yang.model.ietfInetTypes.Uri(capabilityValue));
    }

    /**
     * Deletes leaf-list entry "capability".
     * @param capabilityValue Value to delete.
     */
    public void deleteCapability(Uri capabilityValue) throws JNCException {
        String path = "capability[capabilityValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "capability".
     * The value is specified as a string.
     * @param capabilityValue Value to delete.
     */
    public void deleteCapability(String capabilityValue) throws JNCException {
        String path = "capability[capabilityValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "capability" leaf-list will not have a value.
     */
    public void addCapability() throws JNCException {
        setLeafListValue(RcmonPrefix.NAMESPACE,
            "capability",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "capability" with operation "replace".
     * @param capabilityValue The value to mark
     */
    public void markCapabilityReplace(Uri capabilityValue) throws JNCException {
        markLeafReplace("capability[name='" + capabilityValue + "']");
    }

    /**
     * Marks the leaf-list "capability" with operation "merge".
     * @param capabilityValue The value to mark
     */
    public void markCapabilityMerge(Uri capabilityValue) throws JNCException {
        markLeafMerge("capability[name='" + capabilityValue + "']");
    }

    /**
     * Marks the leaf-list "capability" with operation "create".
     * @param capabilityValue The value to mark
     */
    public void markCapabilityCreate(Uri capabilityValue) throws JNCException {
        markLeafCreate("capability[name='" + capabilityValue + "']");
    }

    /**
     * Marks the leaf-list "capability" with operation "delete".
     * @param capabilityValue The value to mark
     */
    public void markCapabilityDelete(Uri capabilityValue) throws JNCException {
        markLeafDelete("capability[name='" + capabilityValue + "']");
    }

    /**
     * Marks the leaf-list "capability" with operation "remove".
     * @param capabilityValue The value to mark
     */
    public void markCapabilityRemove(Uri capabilityValue) throws JNCException {
        markLeafRemove("capability[name='" + capabilityValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
