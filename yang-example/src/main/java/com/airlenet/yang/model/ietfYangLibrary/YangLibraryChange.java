/* 
 * @(#)YangLibraryChange.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-yang-library", revision: "2016-06-21".
 */

package com.airlenet.yang.model.ietfYangLibrary;

import com.airlenet.yang.model.ietfYangLibrary.YanglibPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-yang-library
 * generated to "src/main/java/com.airlenet.yang.model/ietfYangLibrary/yang-library-change"
 * <p>
 * See line 228 in
 * src/main/yang/module/ietf/ietf-yang-library.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class YangLibraryChange extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty YangLibraryChange object.
     */
    public YangLibraryChange() {
        super(YanglibPrefix.NAMESPACE, "yang-library-change");
        setDefaultPrefix();
        setPrefix(YanglibPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public YangLibraryChange clone() {
        return (YangLibraryChange)cloneContent(new YangLibraryChange());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public YangLibraryChange cloneShallow() {
        return (YangLibraryChange)cloneShallowContent(new YangLibraryChange());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "module-set-id",
        };
    }

    /* Access methods for optional leaf child: "module-set-id". */

    /**
     * Gets the value for child leaf "module-set-id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getModuleSetIdValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("module-set-id");
    }

    /**
     * Sets the value for child leaf "module-set-id",
     * using instance of generated typedef class.
     * @param moduleSetIdValue The value to set.
     * @param moduleSetIdValue used during instantiation.
     */
    public void setModuleSetIdValue(com.tailf.jnc.YangString moduleSetIdValue)
            throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "module-set-id",
            moduleSetIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "module-set-id",
     * using a String value.
     * @param moduleSetIdValue used during instantiation.
     */
    public void setModuleSetIdValue(String moduleSetIdValue)
            throws JNCException {
        setModuleSetIdValue(new com.tailf.jnc.YangString(moduleSetIdValue));
    }

    /**
     * Unsets the value for child leaf "module-set-id".
     */
    public void unsetModuleSetIdValue() throws JNCException {
        delete("module-set-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "module-set-id" leaf will not have a value.
     */
    public void addModuleSetId() throws JNCException {
        setLeafValue(YanglibPrefix.NAMESPACE,
            "module-set-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "module-set-id" with operation "replace".
     */
    public void markModuleSetIdReplace() throws JNCException {
        markLeafReplace("module-set-id");
    }

    /**
     * Marks the leaf "module-set-id" with operation "merge".
     */
    public void markModuleSetIdMerge() throws JNCException {
        markLeafMerge("module-set-id");
    }

    /**
     * Marks the leaf "module-set-id" with operation "create".
     */
    public void markModuleSetIdCreate() throws JNCException {
        markLeafCreate("module-set-id");
    }

    /**
     * Marks the leaf "module-set-id" with operation "delete".
     */
    public void markModuleSetIdDelete() throws JNCException {
        markLeafDelete("module-set-id");
    }

    /**
     * Marks the leaf "module-set-id" with operation "remove".
     */
    public void markModuleSetIdRemove() throws JNCException {
        markLeafRemove("module-set-id");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
