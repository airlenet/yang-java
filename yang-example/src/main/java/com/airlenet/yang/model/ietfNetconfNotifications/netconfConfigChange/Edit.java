/* 
 * @(#)Edit.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-notifications", revision: "2012-02-06".
 */

package com.airlenet.yang.model.ietfNetconfNotifications.netconfConfigChange;

import com.airlenet.yang.model.ietfNetconf.EditOperationType;
import com.airlenet.yang.model.ietfNetconfNotifications.NcnPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-notifications
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfNotifications/netconfConfigChange/edit"
 * <p>
 * See line 138 in
 * src/main/yang/module/ietf/ietf-netconf-notifications.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Edit extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Edit object.
     */
    public Edit() {
        super(NcnPrefix.NAMESPACE, "edit");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Edit clone() {
        return (Edit)cloneContent(new Edit());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Edit cloneShallow() {
        return (Edit)cloneShallowContent(new Edit());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "target",
            "operation",
        };
    }

    /* Access methods for optional leaf child: "target". */

    /**
     * Gets the value for child leaf "target".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangInstanceIdentifier getTargetValue()
            throws JNCException {
        return (com.tailf.jnc.YangInstanceIdentifier)getValue("target");
    }

    /**
     * Sets the value for child leaf "target",
     * using instance of generated typedef class.
     * @param targetValue The value to set.
     * @param targetValue used during instantiation.
     */
    public void setTargetValue(com.tailf.jnc.YangInstanceIdentifier targetValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "target",
            targetValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target",
     * using a String value.
     * @param targetValue used during instantiation.
     */
    public void setTargetValue(String targetValue) throws JNCException {
        setTargetValue(new com.tailf.jnc.YangInstanceIdentifier(targetValue));
    }

    /**
     * Unsets the value for child leaf "target".
     */
    public void unsetTargetValue() throws JNCException {
        delete("target");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target" leaf will not have a value.
     */
    public void addTarget() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "target",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "target" with operation "replace".
     */
    public void markTargetReplace() throws JNCException {
        markLeafReplace("target");
    }

    /**
     * Marks the leaf "target" with operation "merge".
     */
    public void markTargetMerge() throws JNCException {
        markLeafMerge("target");
    }

    /**
     * Marks the leaf "target" with operation "create".
     */
    public void markTargetCreate() throws JNCException {
        markLeafCreate("target");
    }

    /**
     * Marks the leaf "target" with operation "delete".
     */
    public void markTargetDelete() throws JNCException {
        markLeafDelete("target");
    }

    /**
     * Marks the leaf "target" with operation "remove".
     */
    public void markTargetRemove() throws JNCException {
        markLeafRemove("target");
    }

    /* Access methods for optional leaf child: "operation". */

    /**
     * Gets the value for child leaf "operation".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconf.EditOperationType getOperationValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconf.EditOperationType)getValue("operation");
    }

    /**
     * Sets the value for child leaf "operation",
     * using a JNC type value.
     * @param operationValue The value to set.
     * @param operationValue used during instantiation.
     */
    public void setOperationValue(com.airlenet.yang.model.ietfNetconf.EditOperationType operationValue)
            throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "operation",
            operationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "operation",
     * using a String value.
     * @param operationValue used during instantiation.
     */
    public void setOperationValue(String operationValue) throws JNCException {
        setOperationValue(new com.airlenet.yang.model.ietfNetconf.EditOperationType(operationValue));
    }

    /**
     * Unsets the value for child leaf "operation".
     */
    public void unsetOperationValue() throws JNCException {
        delete("operation");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "operation" leaf will not have a value.
     */
    public void addOperation() throws JNCException {
        setLeafValue(NcnPrefix.NAMESPACE,
            "operation",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "operation" with operation "replace".
     */
    public void markOperationReplace() throws JNCException {
        markLeafReplace("operation");
    }

    /**
     * Marks the leaf "operation" with operation "merge".
     */
    public void markOperationMerge() throws JNCException {
        markLeafMerge("operation");
    }

    /**
     * Marks the leaf "operation" with operation "create".
     */
    public void markOperationCreate() throws JNCException {
        markLeafCreate("operation");
    }

    /**
     * Marks the leaf "operation" with operation "delete".
     */
    public void markOperationDelete() throws JNCException {
        markLeafDelete("operation");
    }

    /**
     * Marks the leaf "operation" with operation "remove".
     */
    public void markOperationRemove() throws JNCException {
        markLeafRemove("operation");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
