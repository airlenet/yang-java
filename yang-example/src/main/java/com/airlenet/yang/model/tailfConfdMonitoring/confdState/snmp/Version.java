/* 
 * @(#)Version.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState.snmp;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEmpty;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/snmp/version"
 * <p>
 * See line 479 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Version extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Version object.
     */
    public Version() {
        super(TfcgPrefix.NAMESPACE, "version");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Version clone() {
        return (Version)cloneContent(new Version());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Version cloneShallow() {
        return (Version)cloneShallowContent(new Version());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "v1",
            "v2c",
            "v3",
        };
    }

    /* Access methods for optional leaf child: "v1". */

    /**
     * Searches for leaf "v1".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getV1Value() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("v1");
    }

    /**
     * Sets the value for child leaf "v1",
     * using instance of generated typedef class.
     * @param v1Value The value to set.
     * @param v1Value used during instantiation.
     */
    public void setV1Value(com.tailf.jnc.YangEmpty v1Value) throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "v1",
            v1Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v1",
     * by instantiating it (value n/a).
     * @param v1Value ignored.
     */
    public void setV1Value(String v1Value) throws JNCException {
        setV1Value(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "v1".
     */
    public void unsetV1Value() throws JNCException {
        delete("v1");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v1" leaf will not have a value.
     */
    public void addV1() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "v1",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v1" with operation "replace".
     */
    public void markV1Replace() throws JNCException {
        markLeafReplace("v1");
    }

    /**
     * Marks the leaf "v1" with operation "merge".
     */
    public void markV1Merge() throws JNCException {
        markLeafMerge("v1");
    }

    /**
     * Marks the leaf "v1" with operation "create".
     */
    public void markV1Create() throws JNCException {
        markLeafCreate("v1");
    }

    /**
     * Marks the leaf "v1" with operation "delete".
     */
    public void markV1Delete() throws JNCException {
        markLeafDelete("v1");
    }

    /**
     * Marks the leaf "v1" with operation "remove".
     */
    public void markV1Remove() throws JNCException {
        markLeafRemove("v1");
    }

    /* Access methods for optional leaf child: "v2c". */

    /**
     * Searches for leaf "v2c".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getV2cValue() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("v2c");
    }

    /**
     * Sets the value for child leaf "v2c",
     * using instance of generated typedef class.
     * @param v2cValue The value to set.
     * @param v2cValue used during instantiation.
     */
    public void setV2cValue(com.tailf.jnc.YangEmpty v2cValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "v2c",
            v2cValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v2c",
     * by instantiating it (value n/a).
     * @param v2cValue ignored.
     */
    public void setV2cValue(String v2cValue) throws JNCException {
        setV2cValue(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "v2c".
     */
    public void unsetV2cValue() throws JNCException {
        delete("v2c");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v2c" leaf will not have a value.
     */
    public void addV2c() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "v2c",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v2c" with operation "replace".
     */
    public void markV2cReplace() throws JNCException {
        markLeafReplace("v2c");
    }

    /**
     * Marks the leaf "v2c" with operation "merge".
     */
    public void markV2cMerge() throws JNCException {
        markLeafMerge("v2c");
    }

    /**
     * Marks the leaf "v2c" with operation "create".
     */
    public void markV2cCreate() throws JNCException {
        markLeafCreate("v2c");
    }

    /**
     * Marks the leaf "v2c" with operation "delete".
     */
    public void markV2cDelete() throws JNCException {
        markLeafDelete("v2c");
    }

    /**
     * Marks the leaf "v2c" with operation "remove".
     */
    public void markV2cRemove() throws JNCException {
        markLeafRemove("v2c");
    }

    /* Access methods for optional leaf child: "v3". */

    /**
     * Searches for leaf "v3".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getV3Value() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("v3");
    }

    /**
     * Sets the value for child leaf "v3",
     * using instance of generated typedef class.
     * @param v3Value The value to set.
     * @param v3Value used during instantiation.
     */
    public void setV3Value(com.tailf.jnc.YangEmpty v3Value) throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "v3",
            v3Value,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "v3",
     * by instantiating it (value n/a).
     * @param v3Value ignored.
     */
    public void setV3Value(String v3Value) throws JNCException {
        setV3Value(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "v3".
     */
    public void unsetV3Value() throws JNCException {
        delete("v3");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "v3" leaf will not have a value.
     */
    public void addV3() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "v3",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "v3" with operation "replace".
     */
    public void markV3Replace() throws JNCException {
        markLeafReplace("v3");
    }

    /**
     * Marks the leaf "v3" with operation "merge".
     */
    public void markV3Merge() throws JNCException {
        markLeafMerge("v3");
    }

    /**
     * Marks the leaf "v3" with operation "create".
     */
    public void markV3Create() throws JNCException {
        markLeafCreate("v3");
    }

    /**
     * Marks the leaf "v3" with operation "delete".
     */
    public void markV3Delete() throws JNCException {
        markLeafDelete("v3");
    }

    /**
     * Marks the leaf "v3" with operation "remove".
     */
    public void markV3Remove() throws JNCException {
        markLeafRemove("v3");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
