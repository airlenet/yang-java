/* 
 * @(#)Stream.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.streams;

import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.streams.stream.Subscriber;
import com.airlenet.yang.model.ietfYangTypes.DateAndTime;
import com.airlenet.yang.model.tailfNetconfMonitoring.TncmPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/streams/stream"
 * <p>
 * See line 230 in
 * src/main/yang/module/tailf/tailf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Stream extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Stream object.
     */
    public Stream() {
        super(TncmPrefix.NAMESPACE, "stream");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Stream clone() {
        return (Stream)cloneContent(new Stream());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Stream cloneShallow() {
        return (Stream)cloneShallowContent(new Stream());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "description",
            "replay-support",
            "replay-log-creation-time",
            "replay-log-aged-time",
            "subscriber",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getNameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.tailf.jnc.YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getDescriptionValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(com.tailf.jnc.YangString descriptionValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new com.tailf.jnc.YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /**
     * Marks the leaf "description" with operation "remove".
     */
    public void markDescriptionRemove() throws JNCException {
        markLeafRemove("description");
    }

    /* Access methods for optional leaf child: "replay-support". */

    /**
     * Gets the value for child leaf "replay-support".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangBoolean getReplaySupportValue()
            throws JNCException {
        return (com.tailf.jnc.YangBoolean)getValue("replay-support");
    }

    /**
     * Sets the value for child leaf "replay-support",
     * using instance of generated typedef class.
     * @param replaySupportValue The value to set.
     * @param replaySupportValue used during instantiation.
     */
    public void setReplaySupportValue(com.tailf.jnc.YangBoolean replaySupportValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "replay-support",
            replaySupportValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "replay-support",
     * using Java primitive values.
     * @param replaySupportValue used during instantiation.
     */
    public void setReplaySupportValue(Boolean replaySupportValue)
            throws JNCException {
        setReplaySupportValue(new com.tailf.jnc.YangBoolean(replaySupportValue));
    }

    /**
     * Sets the value for child leaf "replay-support",
     * using a String value.
     * @param replaySupportValue used during instantiation.
     */
    public void setReplaySupportValue(String replaySupportValue)
            throws JNCException {
        setReplaySupportValue(new com.tailf.jnc.YangBoolean(replaySupportValue));
    }

    /**
     * Unsets the value for child leaf "replay-support".
     */
    public void unsetReplaySupportValue() throws JNCException {
        delete("replay-support");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "replay-support" leaf will not have a value.
     */
    public void addReplaySupport() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "replay-support",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "replay-support" with operation "replace".
     */
    public void markReplaySupportReplace() throws JNCException {
        markLeafReplace("replay-support");
    }

    /**
     * Marks the leaf "replay-support" with operation "merge".
     */
    public void markReplaySupportMerge() throws JNCException {
        markLeafMerge("replay-support");
    }

    /**
     * Marks the leaf "replay-support" with operation "create".
     */
    public void markReplaySupportCreate() throws JNCException {
        markLeafCreate("replay-support");
    }

    /**
     * Marks the leaf "replay-support" with operation "delete".
     */
    public void markReplaySupportDelete() throws JNCException {
        markLeafDelete("replay-support");
    }

    /**
     * Marks the leaf "replay-support" with operation "remove".
     */
    public void markReplaySupportRemove() throws JNCException {
        markLeafRemove("replay-support");
    }

    /* Access methods for optional leaf child: "replay-log-creation-time". */

    /**
     * Gets the value for child leaf "replay-log-creation-time".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.DateAndTime getReplayLogCreationTimeValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.DateAndTime)getValue("replay-log-creation-time");
    }

    /**
     * Sets the value for child leaf "replay-log-creation-time",
     * using a JNC type value.
     * @param replayLogCreationTimeValue The value to set.
     * @param replayLogCreationTimeValue used during instantiation.
     */
    public void setReplayLogCreationTimeValue(com.airlenet.yang.model.ietfYangTypes.DateAndTime replayLogCreationTimeValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "replay-log-creation-time",
            replayLogCreationTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "replay-log-creation-time",
     * using a String value.
     * @param replayLogCreationTimeValue used during instantiation.
     */
    public void setReplayLogCreationTimeValue(String replayLogCreationTimeValue)
            throws JNCException {
        setReplayLogCreationTimeValue(new com.airlenet.yang.model.ietfYangTypes.DateAndTime(replayLogCreationTimeValue));
    }

    /**
     * Unsets the value for child leaf "replay-log-creation-time".
     */
    public void unsetReplayLogCreationTimeValue() throws JNCException {
        delete("replay-log-creation-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "replay-log-creation-time" leaf will not have a value.
     */
    public void addReplayLogCreationTime() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "replay-log-creation-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "replay-log-creation-time" with operation "replace".
     */
    public void markReplayLogCreationTimeReplace() throws JNCException {
        markLeafReplace("replay-log-creation-time");
    }

    /**
     * Marks the leaf "replay-log-creation-time" with operation "merge".
     */
    public void markReplayLogCreationTimeMerge() throws JNCException {
        markLeafMerge("replay-log-creation-time");
    }

    /**
     * Marks the leaf "replay-log-creation-time" with operation "create".
     */
    public void markReplayLogCreationTimeCreate() throws JNCException {
        markLeafCreate("replay-log-creation-time");
    }

    /**
     * Marks the leaf "replay-log-creation-time" with operation "delete".
     */
    public void markReplayLogCreationTimeDelete() throws JNCException {
        markLeafDelete("replay-log-creation-time");
    }

    /**
     * Marks the leaf "replay-log-creation-time" with operation "remove".
     */
    public void markReplayLogCreationTimeRemove() throws JNCException {
        markLeafRemove("replay-log-creation-time");
    }

    /* Access methods for optional leaf child: "replay-log-aged-time". */

    /**
     * Gets the value for child leaf "replay-log-aged-time".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.DateAndTime getReplayLogAgedTimeValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.DateAndTime)getValue("replay-log-aged-time");
    }

    /**
     * Sets the value for child leaf "replay-log-aged-time",
     * using a JNC type value.
     * @param replayLogAgedTimeValue The value to set.
     * @param replayLogAgedTimeValue used during instantiation.
     */
    public void setReplayLogAgedTimeValue(com.airlenet.yang.model.ietfYangTypes.DateAndTime replayLogAgedTimeValue)
            throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "replay-log-aged-time",
            replayLogAgedTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "replay-log-aged-time",
     * using a String value.
     * @param replayLogAgedTimeValue used during instantiation.
     */
    public void setReplayLogAgedTimeValue(String replayLogAgedTimeValue)
            throws JNCException {
        setReplayLogAgedTimeValue(new com.airlenet.yang.model.ietfYangTypes.DateAndTime(replayLogAgedTimeValue));
    }

    /**
     * Unsets the value for child leaf "replay-log-aged-time".
     */
    public void unsetReplayLogAgedTimeValue() throws JNCException {
        delete("replay-log-aged-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "replay-log-aged-time" leaf will not have a value.
     */
    public void addReplayLogAgedTime() throws JNCException {
        setLeafValue(TncmPrefix.NAMESPACE,
            "replay-log-aged-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "replay-log-aged-time" with operation "replace".
     */
    public void markReplayLogAgedTimeReplace() throws JNCException {
        markLeafReplace("replay-log-aged-time");
    }

    /**
     * Marks the leaf "replay-log-aged-time" with operation "merge".
     */
    public void markReplayLogAgedTimeMerge() throws JNCException {
        markLeafMerge("replay-log-aged-time");
    }

    /**
     * Marks the leaf "replay-log-aged-time" with operation "create".
     */
    public void markReplayLogAgedTimeCreate() throws JNCException {
        markLeafCreate("replay-log-aged-time");
    }

    /**
     * Marks the leaf "replay-log-aged-time" with operation "delete".
     */
    public void markReplayLogAgedTimeDelete() throws JNCException {
        markLeafDelete("replay-log-aged-time");
    }

    /**
     * Marks the leaf "replay-log-aged-time" with operation "remove".
     */
    public void markReplayLogAgedTimeRemove() throws JNCException {
        markLeafRemove("replay-log-aged-time");
    }

    /* Access methods for list child: "subscriber". */

    /**
     * Gets list entry "subscriber", with specified keys.
     */
    public Subscriber getSubscriber() throws JNCException {
        String path = "subscriber";
        return (Subscriber)searchOne(path);
    }

    /**
     * Iterator method for the list "subscriber".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator subscriberIterator() {
        return new ElementChildrenIterator(children, "subscriber");
    }

    /**
     * List method for the list "subscriber".
     * @return An List for the list.
     */
    public List<Subscriber> getSubscriberList() {
        List<Subscriber> list = new ArrayList<>();
        ElementChildrenIterator iterator = subscriberIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Subscriber next =(Subscriber) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "subscriber", using an existing object.
     * @param subscriber The object to add.
     * @return The added child.
     */
    public Subscriber addSubscriber(Subscriber subscriber) throws JNCException {
        insertChild(subscriber, childrenNames());
        return subscriber;
    }

    /**
     * Adds list entry "subscriber".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Subscriber addSubscriber() throws JNCException {
        Subscriber subscriber = new Subscriber();
        insertChild(subscriber, childrenNames());
        return subscriber;
    }

    /**
     * Deletes list entry "subscriber", with specified keys.
     */
    public void deleteSubscriber() throws JNCException {
        String path = "subscriber";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
