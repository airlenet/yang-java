/* 
 * @(#)Listen.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring.confdState.snmp;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.snmp.listen.Udp;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confdState/snmp/listen"
 * <p>
 * See line 465 in
 * src/main/yang/module/tailf/tailf-common-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Listen extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Listen object.
     */
    public Listen() {
        super(TfcgPrefix.NAMESPACE, "listen");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Listen clone() {
        return (Listen)cloneContent(new Listen());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Listen cloneShallow() {
        return (Listen)cloneShallowContent(new Listen());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "udp",
        };
    }

    /* Access methods for list child: "udp". */

    /**
     * Gets list entry "udp", with specified keys.
     */
    public Udp getUdp() throws JNCException {
        String path = "udp";
        return (Udp)searchOne(path);
    }

    /**
     * Iterator method for the list "udp".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator udpIterator() {
        return new ElementChildrenIterator(children, "udp");
    }

    /**
     * List method for the list "udp".
     * @return An List for the list.
     */
    public List<Udp> getUdpList() {
        List<Udp> list = new ArrayList<>();
        ElementChildrenIterator iterator = udpIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Udp next =(Udp) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "udp", using an existing object.
     * @param udp The object to add.
     * @return The added child.
     */
    public Udp addUdp(Udp udp) throws JNCException {
        insertChild(udp, childrenNames());
        return udp;
    }

    /**
     * Adds list entry "udp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Udp addUdp() throws JNCException {
        Udp udp = new Udp();
        insertChild(udp, childrenNames());
        return udp;
    }

    /**
     * Deletes list entry "udp", with specified keys.
     */
    public void deleteUdp() throws JNCException {
        String path = "udp";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
