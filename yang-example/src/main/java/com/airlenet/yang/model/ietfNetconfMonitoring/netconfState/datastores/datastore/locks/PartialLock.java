/* 
 * @(#)PartialLock.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.datastores.datastore.locks;

import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.airlenet.yang.model.ietfYangTypes.DateAndTime;
import com.airlenet.yang.model.ietfYangTypes.Xpath10;
import com.tailf.jnc.*;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/datastores/datastore/locks/partial-lock"
 * <p>
 * See line 282 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class PartialLock extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty PartialLock object.
     */
    public PartialLock() {
        super(NcmPrefix.NAMESPACE, "partial-lock");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public PartialLock clone() {
        return (PartialLock)cloneContent(new PartialLock());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public PartialLock cloneShallow() {
        return (PartialLock)cloneShallowContent(new PartialLock());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "lock-id",
            "locked-by-session",
            "locked-time",
            "select",
            "locked-node",
        };
    }

    /* Access methods for leaf child: "lock-id". */

    /**
     * Gets the value for child leaf "lock-id".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt32 getLockIdValue() throws JNCException {
        return (com.tailf.jnc.YangUInt32)getValue("lock-id");
    }

    /**
     * Sets the value for child leaf "lock-id",
     * using instance of generated typedef class.
     * @param lockIdValue The value to set.
     * @param lockIdValue used during instantiation.
     */
    public void setLockIdValue(com.tailf.jnc.YangUInt32 lockIdValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "lock-id",
            lockIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "lock-id",
     * using Java primitive values.
     * @param lockIdValue used during instantiation.
     */
    public void setLockIdValue(long lockIdValue) throws JNCException {
        setLockIdValue(new com.tailf.jnc.YangUInt32(lockIdValue));
    }

    /**
     * Sets the value for child leaf "lock-id",
     * using a String value.
     * @param lockIdValue used during instantiation.
     */
    public void setLockIdValue(String lockIdValue) throws JNCException {
        setLockIdValue(new com.tailf.jnc.YangUInt32(lockIdValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "lock-id" leaf will not have a value.
     */
    public void addLockId() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "lock-id",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "locked-by-session". */

    /**
     * Gets the value for child leaf "locked-by-session".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangUInt32 getLockedBySessionValue()
            throws JNCException {
        return (com.tailf.jnc.YangUInt32)getValue("locked-by-session");
    }

    /**
     * Sets the value for child leaf "locked-by-session",
     * using instance of generated typedef class.
     * @param lockedBySessionValue The value to set.
     * @param lockedBySessionValue used during instantiation.
     */
    public void setLockedBySessionValue(com.tailf.jnc.YangUInt32 lockedBySessionValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "locked-by-session",
            lockedBySessionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "locked-by-session",
     * using Java primitive values.
     * @param lockedBySessionValue used during instantiation.
     */
    public void setLockedBySessionValue(long lockedBySessionValue)
            throws JNCException {
        setLockedBySessionValue(new com.tailf.jnc.YangUInt32(lockedBySessionValue));
    }

    /**
     * Sets the value for child leaf "locked-by-session",
     * using a String value.
     * @param lockedBySessionValue used during instantiation.
     */
    public void setLockedBySessionValue(String lockedBySessionValue)
            throws JNCException {
        setLockedBySessionValue(new com.tailf.jnc.YangUInt32(lockedBySessionValue));
    }

    /**
     * Unsets the value for child leaf "locked-by-session".
     */
    public void unsetLockedBySessionValue() throws JNCException {
        delete("locked-by-session");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "locked-by-session" leaf will not have a value.
     */
    public void addLockedBySession() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "locked-by-session",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "locked-by-session" with operation "replace".
     */
    public void markLockedBySessionReplace() throws JNCException {
        markLeafReplace("locked-by-session");
    }

    /**
     * Marks the leaf "locked-by-session" with operation "merge".
     */
    public void markLockedBySessionMerge() throws JNCException {
        markLeafMerge("locked-by-session");
    }

    /**
     * Marks the leaf "locked-by-session" with operation "create".
     */
    public void markLockedBySessionCreate() throws JNCException {
        markLeafCreate("locked-by-session");
    }

    /**
     * Marks the leaf "locked-by-session" with operation "delete".
     */
    public void markLockedBySessionDelete() throws JNCException {
        markLeafDelete("locked-by-session");
    }

    /**
     * Marks the leaf "locked-by-session" with operation "remove".
     */
    public void markLockedBySessionRemove() throws JNCException {
        markLeafRemove("locked-by-session");
    }

    /* Access methods for optional leaf child: "locked-time". */

    /**
     * Gets the value for child leaf "locked-time".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfYangTypes.DateAndTime getLockedTimeValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfYangTypes.DateAndTime)getValue("locked-time");
    }

    /**
     * Sets the value for child leaf "locked-time",
     * using a JNC type value.
     * @param lockedTimeValue The value to set.
     * @param lockedTimeValue used during instantiation.
     */
    public void setLockedTimeValue(com.airlenet.yang.model.ietfYangTypes.DateAndTime lockedTimeValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "locked-time",
            lockedTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "locked-time",
     * using a String value.
     * @param lockedTimeValue used during instantiation.
     */
    public void setLockedTimeValue(String lockedTimeValue) throws JNCException {
        setLockedTimeValue(new com.airlenet.yang.model.ietfYangTypes.DateAndTime(lockedTimeValue));
    }

    /**
     * Unsets the value for child leaf "locked-time".
     */
    public void unsetLockedTimeValue() throws JNCException {
        delete("locked-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "locked-time" leaf will not have a value.
     */
    public void addLockedTime() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "locked-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "locked-time" with operation "replace".
     */
    public void markLockedTimeReplace() throws JNCException {
        markLeafReplace("locked-time");
    }

    /**
     * Marks the leaf "locked-time" with operation "merge".
     */
    public void markLockedTimeMerge() throws JNCException {
        markLeafMerge("locked-time");
    }

    /**
     * Marks the leaf "locked-time" with operation "create".
     */
    public void markLockedTimeCreate() throws JNCException {
        markLeafCreate("locked-time");
    }

    /**
     * Marks the leaf "locked-time" with operation "delete".
     */
    public void markLockedTimeDelete() throws JNCException {
        markLeafDelete("locked-time");
    }

    /**
     * Marks the leaf "locked-time" with operation "remove".
     */
    public void markLockedTimeRemove() throws JNCException {
        markLeafRemove("locked-time");
    }

    /* Access methods for optional leaf-list child: "select". */

    /**
     * Iterator method for the leaf-list "select".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator selectIterator() {
        return new ElementLeafListValueIterator(children, "select");
    }

    /**
     * List method for the leaf-list "select".
     * @return An List for the leaf-list.
     */
    public List<com.airlenet.yang.model.ietfYangTypes.Xpath10> getSelectList() {
        List<com.airlenet.yang.model.ietfYangTypes.Xpath10> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = selectIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.airlenet.yang.model.ietfYangTypes.Xpath10 next =(com.airlenet.yang.model.ietfYangTypes.Xpath10) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "select",
     * using a JNC type value.
     * @param selectValue The value to set.
     * @param selectValue used during instantiation.
     */
    public void setSelectValue(com.airlenet.yang.model.ietfYangTypes.Xpath10 selectValue)
            throws JNCException {
        setLeafListValue(NcmPrefix.NAMESPACE,
            "select",
            selectValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "select",
     * using a String value.
     * @param selectValue used during instantiation.
     */
    public void setSelectValue(String selectValue) throws JNCException {
        setSelectValue(new com.airlenet.yang.model.ietfYangTypes.Xpath10(selectValue));
    }

    /**
     * Deletes leaf-list entry "select".
     * @param selectValue Value to delete.
     */
    public void deleteSelect(Xpath10 selectValue) throws JNCException {
        String path = "select[selectValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "select".
     * The value is specified as a string.
     * @param selectValue Value to delete.
     */
    public void deleteSelect(String selectValue) throws JNCException {
        String path = "select[selectValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "select" leaf-list will not have a value.
     */
    public void addSelect() throws JNCException {
        setLeafListValue(NcmPrefix.NAMESPACE,
            "select",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "select" with operation "replace".
     * @param selectValue The value to mark
     */
    public void markSelectReplace(Xpath10 selectValue) throws JNCException {
        markLeafReplace("select[name='" + selectValue + "']");
    }

    /**
     * Marks the leaf-list "select" with operation "merge".
     * @param selectValue The value to mark
     */
    public void markSelectMerge(Xpath10 selectValue) throws JNCException {
        markLeafMerge("select[name='" + selectValue + "']");
    }

    /**
     * Marks the leaf-list "select" with operation "create".
     * @param selectValue The value to mark
     */
    public void markSelectCreate(Xpath10 selectValue) throws JNCException {
        markLeafCreate("select[name='" + selectValue + "']");
    }

    /**
     * Marks the leaf-list "select" with operation "delete".
     * @param selectValue The value to mark
     */
    public void markSelectDelete(Xpath10 selectValue) throws JNCException {
        markLeafDelete("select[name='" + selectValue + "']");
    }

    /**
     * Marks the leaf-list "select" with operation "remove".
     * @param selectValue The value to mark
     */
    public void markSelectRemove(Xpath10 selectValue) throws JNCException {
        markLeafRemove("select[name='" + selectValue + "']");
    }

    /* Access methods for optional leaf-list child: "locked-node". */

    /**
     * Iterator method for the leaf-list "locked-node".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator lockedNodeIterator() {
        return new ElementLeafListValueIterator(children, "locked-node");
    }

    /**
     * List method for the leaf-list "locked-node".
     * @return An List for the leaf-list.
     */
    public List<com.tailf.jnc.YangInstanceIdentifier> getLockedNodeList() {
        List<com.tailf.jnc.YangInstanceIdentifier> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = lockedNodeIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.tailf.jnc.YangInstanceIdentifier next =(com.tailf.jnc.YangInstanceIdentifier) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "locked-node",
     * using instance of generated typedef class.
     * @param lockedNodeValue The value to set.
     * @param lockedNodeValue used during instantiation.
     */
    public void setLockedNodeValue(com.tailf.jnc.YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        setLeafListValue(NcmPrefix.NAMESPACE,
            "locked-node",
            lockedNodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "locked-node",
     * using a String value.
     * @param lockedNodeValue used during instantiation.
     */
    public void setLockedNodeValue(String lockedNodeValue) throws JNCException {
        setLockedNodeValue(new com.tailf.jnc.YangInstanceIdentifier(lockedNodeValue));
    }

    /**
     * Deletes leaf-list entry "lockedNode".
     * @param lockedNodeValue Value to delete.
     */
    public void deleteLockedNode(YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        String path = "locked-node[lockedNodeValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "lockedNode".
     * The value is specified as a string.
     * @param lockedNodeValue Value to delete.
     */
    public void deleteLockedNode(String lockedNodeValue) throws JNCException {
        String path = "locked-node[lockedNodeValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "locked-node" leaf-list will not have a value.
     */
    public void addLockedNode() throws JNCException {
        setLeafListValue(NcmPrefix.NAMESPACE,
            "locked-node",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "locked-node" with operation "replace".
     * @param lockedNodeValue The value to mark
     */
    public void markLockedNodeReplace(YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        markLeafReplace("locked-node[name='" + lockedNodeValue + "']");
    }

    /**
     * Marks the leaf-list "locked-node" with operation "merge".
     * @param lockedNodeValue The value to mark
     */
    public void markLockedNodeMerge(YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        markLeafMerge("locked-node[name='" + lockedNodeValue + "']");
    }

    /**
     * Marks the leaf-list "locked-node" with operation "create".
     * @param lockedNodeValue The value to mark
     */
    public void markLockedNodeCreate(YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        markLeafCreate("locked-node[name='" + lockedNodeValue + "']");
    }

    /**
     * Marks the leaf-list "locked-node" with operation "delete".
     * @param lockedNodeValue The value to mark
     */
    public void markLockedNodeDelete(YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        markLeafDelete("locked-node[name='" + lockedNodeValue + "']");
    }

    /**
     * Marks the leaf-list "locked-node" with operation "remove".
     * @param lockedNodeValue The value to mark
     */
    public void markLockedNodeRemove(YangInstanceIdentifier lockedNodeValue)
            throws JNCException {
        markLeafRemove("locked-node[name='" + lockedNodeValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
