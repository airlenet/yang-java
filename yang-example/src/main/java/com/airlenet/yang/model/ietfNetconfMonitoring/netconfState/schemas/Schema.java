/* 
 * @(#)Schema.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.schemas;

import com.airlenet.yang.model.ietfInetTypes.Uri;
import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/schemas/schema"
 * <p>
 * See line 325 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Schema extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Schema object.
     */
    public Schema() {
        super(NcmPrefix.NAMESPACE, "schema");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Schema clone() {
        return (Schema)cloneContent(new Schema());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Schema cloneShallow() {
        return (Schema)cloneShallowContent(new Schema());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "identifier",
            "version",
            "format",
            "namespace",
            "location",
        };
    }

    /* Access methods for leaf child: "identifier". */

    /**
     * Gets the value for child leaf "identifier".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getIdentifierValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("identifier");
    }

    /**
     * Sets the value for child leaf "identifier",
     * using instance of generated typedef class.
     * @param identifierValue The value to set.
     * @param identifierValue used during instantiation.
     */
    public void setIdentifierValue(com.tailf.jnc.YangString identifierValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "identifier",
            identifierValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "identifier",
     * using a String value.
     * @param identifierValue used during instantiation.
     */
    public void setIdentifierValue(String identifierValue) throws JNCException {
        setIdentifierValue(new com.tailf.jnc.YangString(identifierValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "identifier" leaf will not have a value.
     */
    public void addIdentifier() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "identifier",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getVersionValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("version");
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(com.tailf.jnc.YangString versionValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new com.tailf.jnc.YangString(versionValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /* Access methods for leaf child: "format". */

    /**
     * Gets the value for child leaf "format".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangIdentityref getFormatValue() throws JNCException {
        return (com.tailf.jnc.YangIdentityref)getValue("format");
    }

    /**
     * Sets the value for child leaf "format",
     * using instance of generated typedef class.
     * @param formatValue The value to set.
     * @param formatValue used during instantiation.
     */
    public void setFormatValue(com.tailf.jnc.YangIdentityref formatValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "format",
            formatValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "format",
     * using a String value.
     * @param formatValue used during instantiation.
     */
    public void setFormatValue(String formatValue) throws JNCException {
        setFormatValue(new com.tailf.jnc.YangIdentityref(formatValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "format" leaf will not have a value.
     */
    public void addFormat() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "format",
            null,
            childrenNames());
    }

    /* Access methods for optional leaf child: "namespace". */

    /**
     * Gets the value for child leaf "namespace".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfInetTypes.Uri getNamespaceValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfInetTypes.Uri)getValue("namespace");
    }

    /**
     * Sets the value for child leaf "namespace",
     * using a JNC type value.
     * @param namespaceValue The value to set.
     * @param namespaceValue used during instantiation.
     */
    public void setNamespaceValue(com.airlenet.yang.model.ietfInetTypes.Uri namespaceValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "namespace",
            namespaceValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "namespace",
     * using a String value.
     * @param namespaceValue used during instantiation.
     */
    public void setNamespaceValue(String namespaceValue) throws JNCException {
        setNamespaceValue(new com.airlenet.yang.model.ietfInetTypes.Uri(namespaceValue));
    }

    /**
     * Unsets the value for child leaf "namespace".
     */
    public void unsetNamespaceValue() throws JNCException {
        delete("namespace");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "namespace" leaf will not have a value.
     */
    public void addNamespace() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "namespace",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "namespace" with operation "replace".
     */
    public void markNamespaceReplace() throws JNCException {
        markLeafReplace("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "merge".
     */
    public void markNamespaceMerge() throws JNCException {
        markLeafMerge("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "create".
     */
    public void markNamespaceCreate() throws JNCException {
        markLeafCreate("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "delete".
     */
    public void markNamespaceDelete() throws JNCException {
        markLeafDelete("namespace");
    }

    /**
     * Marks the leaf "namespace" with operation "remove".
     */
    public void markNamespaceRemove() throws JNCException {
        markLeafRemove("namespace");
    }

    /* Access methods for optional leaf-list child: "location". */

    /**
     * Iterator method for the leaf-list "location".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator locationIterator() {
        return new ElementLeafListValueIterator(children, "location");
    }

    /**
     * List method for the leaf-list "location".
     * @return An List for the leaf-list.
     */
    public List<com.tailf.jnc.YangUnion> getLocationList() {
        List<com.tailf.jnc.YangUnion> list = new ArrayList<>();
        ElementLeafListValueIterator iterator = locationIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            com.tailf.jnc.YangUnion next =(com.tailf.jnc.YangUnion) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Sets the value for child leaf-list "location",
     * using instance of generated typedef class.
     * @param locationValue The value to set.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(com.tailf.jnc.YangUnion locationValue)
            throws JNCException {
        setLeafListValue(NcmPrefix.NAMESPACE,
            "location",
            locationValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "location",
     * using a String value.
     * @param locationValue used during instantiation.
     */
    public void setLocationValue(String locationValue) throws JNCException {
        setLocationValue(new com.tailf.jnc.YangUnion(locationValue, new String[] {
             "com.tailf.jnc.YangEnumeration",
             "com.airlenet.yang.model.ietfInetTypes.Uri",
        }));
    }

    /**
     * Deletes leaf-list entry "location".
     * @param locationValue Value to delete.
     */
    public void deleteLocation(YangUnion locationValue) throws JNCException {
        String path = "location[locationValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "location".
     * The value is specified as a string.
     * @param locationValue Value to delete.
     */
    public void deleteLocation(String locationValue) throws JNCException {
        String path = "location[locationValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "location" leaf-list will not have a value.
     */
    public void addLocation() throws JNCException {
        setLeafListValue(NcmPrefix.NAMESPACE,
            "location",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "location" with operation "replace".
     * @param locationValue The value to mark
     */
    public void markLocationReplace(YangUnion locationValue)
            throws JNCException {
        markLeafReplace("location[name='" + locationValue + "']");
    }

    /**
     * Marks the leaf-list "location" with operation "merge".
     * @param locationValue The value to mark
     */
    public void markLocationMerge(YangUnion locationValue) throws JNCException {
        markLeafMerge("location[name='" + locationValue + "']");
    }

    /**
     * Marks the leaf-list "location" with operation "create".
     * @param locationValue The value to mark
     */
    public void markLocationCreate(YangUnion locationValue) throws JNCException {
        markLeafCreate("location[name='" + locationValue + "']");
    }

    /**
     * Marks the leaf-list "location" with operation "delete".
     * @param locationValue The value to mark
     */
    public void markLocationDelete(YangUnion locationValue) throws JNCException {
        markLeafDelete("location[name='" + locationValue + "']");
    }

    /**
     * Marks the leaf-list "location" with operation "remove".
     * @param locationValue The value to mark
     */
    public void markLocationRemove(YangUnion locationValue) throws JNCException {
        markLeafRemove("location[name='" + locationValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
