/* 
 * @(#)Schematics.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.schematics.Assets;
import com.airlenet.yang.model.tailfWebui.webui.schematics.Panels;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics"
 * <p>
 * See line 28 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Schematics extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "panels".
     */
    public Panels panels = null;
    public Panels getPanels() {
        return this.panels;
    }

    /**
     * Field for child container "assets".
     */
    public Assets assets = null;
    public Assets getAssets() {
        return this.assets;
    }

    /**
     * Constructor for an empty Schematics object.
     */
    public Schematics() {
        super(WebuiPrefix.NAMESPACE, "schematics");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Schematics clone() {
        return (Schematics)cloneContent(new Schematics());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Schematics cloneShallow() {
        return (Schematics)cloneShallowContent(new Schematics());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "panels",
            "assets",
        };
    }

    /* Access methods for container child: "panels". */

    /**
     * Adds container entry "panels", using an existing object.
     * @param panels The object to add.
     * @return The added child.
     */
    public Panels addPanels(Panels panels) throws JNCException {
        this.panels = panels;
        insertChild(panels, childrenNames());
        return panels;
    }

    /**
     * Adds container entry "panels".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Panels addPanels() throws JNCException {
        Panels panels = new Panels();
        this.panels = panels;
        insertChild(panels, childrenNames());
        return panels;
    }

    /**
     * Deletes container entry "panels".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePanels() throws JNCException {
        this.panels = null;
        String path = "panels";
        return delete(path);
    }

    /* Access methods for container child: "assets". */

    /**
     * Adds container entry "assets", using an existing object.
     * @param assets The object to add.
     * @return The added child.
     */
    public Assets addAssets(Assets assets) throws JNCException {
        this.assets = assets;
        insertChild(assets, childrenNames());
        return assets;
    }

    /**
     * Adds container entry "assets".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Assets addAssets() throws JNCException {
        Assets assets = new Assets();
        this.assets = assets;
        insertChild(assets, childrenNames());
        return assets;
    }

    /**
     * Deletes container entry "assets".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAssets() throws JNCException {
        this.assets = null;
        String path = "assets";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Panels) panels = (Panels)child;
        else if (child instanceof Assets) assets = (Assets)child;
    }

}
