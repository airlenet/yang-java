/* 
 * @(#)UserProfile.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.dataStores;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.dataStores.userProfile.Profile;
import com.airlenet.yang.model.tailfWebui.webui.dataStores.userProfile.SavedQuery;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/dataStores/user-profile"
 * <p>
 * See line 154 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class UserProfile extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty UserProfile object.
     */
    public UserProfile() {
        super(WebuiPrefix.NAMESPACE, "user-profile");
    }

    /**
     * Constructor for an initialized UserProfile object,
     * 
     * @param usernameValue Key argument of child.
     */
    public UserProfile(YangString usernameValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "user-profile");
        Leaf username = new Leaf(WebuiPrefix.NAMESPACE, "username");
        username.setValue(usernameValue);
        insertChild(username, childrenNames());
    }

    /**
     * Constructor for an initialized UserProfile object,
     * with String keys.
     * @param usernameValue Key argument of child.
     */
    public UserProfile(String usernameValue) throws JNCException {
        super(WebuiPrefix.NAMESPACE, "user-profile");
        Leaf username = new Leaf(WebuiPrefix.NAMESPACE, "username");
        username.setValue(new com.tailf.jnc.YangString(usernameValue));
        insertChild(username, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public UserProfile clone() {
        UserProfile copy;
        try {
            copy = new UserProfile(getUsernameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (UserProfile)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public UserProfile cloneShallow() {
        UserProfile copy;
        try {
            copy = new UserProfile(getUsernameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (UserProfile)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "username",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "username",
            "profile",
            "saved-query",
        };
    }

    /* Access methods for leaf child: "username". */

    /**
     * Gets the value for child leaf "username".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getUsernameValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("username");
    }

    /**
     * Sets the value for child leaf "username",
     * using instance of generated typedef class.
     * @param usernameValue The value to set.
     * @param usernameValue used during instantiation.
     */
    public void setUsernameValue(com.tailf.jnc.YangString usernameValue)
            throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "username",
            usernameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "username",
     * using a String value.
     * @param usernameValue used during instantiation.
     */
    public void setUsernameValue(String usernameValue) throws JNCException {
        setUsernameValue(new com.tailf.jnc.YangString(usernameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "username" leaf will not have a value.
     */
    public void addUsername() throws JNCException {
        setLeafValue(WebuiPrefix.NAMESPACE,
            "username",
            null,
            childrenNames());
    }

    /* Access methods for list child: "profile". */

    /**
     * Gets list entry "profile", with specified keys.
     * @param keyValue Key argument of child.
     */
    public Profile getProfile(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        String path = "profile[key='" + keyValue + "']";
        return (Profile)searchOne(path);
    }

    /**
     * Gets list entry "profile", with specified keys.
     * The keys are specified as strings.
     * @param keyValue Key argument of child.
     */
    public Profile getProfile(String keyValue) throws JNCException {
        String path = "profile[key='" + keyValue + "']";
        return (Profile)searchOne(path);
    }

    /**
     * Iterator method for the list "profile".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator profileIterator() {
        return new ElementChildrenIterator(children, "profile");
    }

    /**
     * List method for the list "profile".
     * @return An List for the list.
     */
    public List<Profile> getProfileList() {
        List<Profile> list = new ArrayList<>();
        ElementChildrenIterator iterator = profileIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Profile next =(Profile) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "profile", using an existing object.
     * @param profile The object to add.
     * @return The added child.
     */
    public Profile addProfile(Profile profile) throws JNCException {
        insertChild(profile, childrenNames());
        return profile;
    }

    /**
     * Adds list entry "profile", with specified keys.
     * @param keyValue Key argument of child.
     * @return The added child.
     */
    public Profile addProfile(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        Profile profile = new Profile(keyValue);
        return addProfile(profile);
    }

    /**
     * Adds list entry "profile", with specified keys.
     * The keys are specified as strings.
     * @param keyValue Key argument of child.
     * @return The added child.
     */
    public Profile addProfile(String keyValue) throws JNCException {
        Profile profile = new Profile(keyValue);
        return addProfile(profile);
    }

    /**
     * Adds list entry "profile".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Profile addProfile() throws JNCException {
        Profile profile = new Profile();
        insertChild(profile, childrenNames());
        return profile;
    }

    /**
     * Deletes list entry "profile", with specified keys.
     * @param keyValue Key argument of child.
     */
    public void deleteProfile(com.tailf.jnc.YangString keyValue)
            throws JNCException {
        String path = "profile[key='" + keyValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "profile", with specified keys.
     * The keys are specified as strings.
     * @param keyValue Key argument of child.
     */
    public void deleteProfile(String keyValue) throws JNCException {
        String path = "profile[key='" + keyValue + "']";
        delete(path);
    }

    /* Access methods for list child: "saved-query". */

    /**
     * Gets list entry "savedQuery", with specified keys.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public SavedQuery getSavedQuery(com.tailf.jnc.YangString listPathValue, com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        return (SavedQuery)searchOne(path);
    }

    /**
     * Gets list entry "savedQuery", with specified keys.
     * The keys are specified as strings.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public SavedQuery getSavedQuery(String listPathValue, String nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        return (SavedQuery)searchOne(path);
    }

    /**
     * Iterator method for the list "saved-query".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator savedQueryIterator() {
        return new ElementChildrenIterator(children, "saved-query");
    }

    /**
     * List method for the list "saved-query".
     * @return An List for the list.
     */
    public List<SavedQuery> getSavedQueryList() {
        List<SavedQuery> list = new ArrayList<>();
        ElementChildrenIterator iterator = savedQueryIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            SavedQuery next =(SavedQuery) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "savedQuery", using an existing object.
     * @param savedQuery The object to add.
     * @return The added child.
     */
    public SavedQuery addSavedQuery(SavedQuery savedQuery) throws JNCException {
        insertChild(savedQuery, childrenNames());
        return savedQuery;
    }

    /**
     * Adds list entry "savedQuery", with specified keys.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public SavedQuery addSavedQuery(com.tailf.jnc.YangString listPathValue, com.tailf.jnc.YangString nameValue)
            throws JNCException {
        SavedQuery savedQuery = new SavedQuery(listPathValue, nameValue);
        return addSavedQuery(savedQuery);
    }

    /**
     * Adds list entry "savedQuery", with specified keys.
     * The keys are specified as strings.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public SavedQuery addSavedQuery(String listPathValue, String nameValue)
            throws JNCException {
        SavedQuery savedQuery = new SavedQuery(listPathValue, nameValue);
        return addSavedQuery(savedQuery);
    }

    /**
     * Adds list entry "savedQuery".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SavedQuery addSavedQuery() throws JNCException {
        SavedQuery savedQuery = new SavedQuery();
        insertChild(savedQuery, childrenNames());
        return savedQuery;
    }

    /**
     * Deletes list entry "savedQuery", with specified keys.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public void deleteSavedQuery(com.tailf.jnc.YangString listPathValue, com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "savedQuery", with specified keys.
     * The keys are specified as strings.
     * @param listPathValue Key argument of child.
     * @param nameValue Key argument of child.
     */
    public void deleteSavedQuery(String listPathValue, String nameValue)
            throws JNCException {
        String path = "saved-query[list-path='" + listPathValue + "'][name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
