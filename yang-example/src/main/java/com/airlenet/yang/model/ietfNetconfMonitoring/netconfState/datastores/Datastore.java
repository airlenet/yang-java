/* 
 * @(#)Datastore.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-netconf-monitoring", revision: "2010-10-04".
 */

package com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.datastores;

import com.airlenet.yang.model.ietfNetconfMonitoring.NcmPrefix;
import com.airlenet.yang.model.ietfNetconfMonitoring.NetconfDatastoreType;
import com.airlenet.yang.model.ietfNetconfMonitoring.netconfState.datastores.datastore.Locks;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/ietfNetconfMonitoring/netconfState/datastores/datastore"
 * <p>
 * See line 215 in
 * src/main/yang/module/ietf/ietf-netconf-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Datastore extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "locks".
     */
    public Locks locks = null;
    public Locks getLocks() {
        return this.locks;
    }

    /**
     * Constructor for an empty Datastore object.
     */
    public Datastore() {
        super(NcmPrefix.NAMESPACE, "datastore");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Datastore clone() {
        return (Datastore)cloneContent(new Datastore());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Datastore cloneShallow() {
        return (Datastore)cloneShallowContent(new Datastore());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "locks",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public com.airlenet.yang.model.ietfNetconfMonitoring.NetconfDatastoreType getNameValue()
            throws JNCException {
        return (com.airlenet.yang.model.ietfNetconfMonitoring.NetconfDatastoreType)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using a JNC type value.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(com.airlenet.yang.model.ietfNetconfMonitoring.NetconfDatastoreType nameValue)
            throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new com.airlenet.yang.model.ietfNetconfMonitoring.NetconfDatastoreType(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(NcmPrefix.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for container child: "locks". */

    /**
     * Adds container entry "locks", using an existing object.
     * @param locks The object to add.
     * @return The added child.
     */
    public Locks addLocks(Locks locks) throws JNCException {
        this.locks = locks;
        insertChild(locks, childrenNames());
        return locks;
    }

    /**
     * Adds container entry "locks".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Locks addLocks() throws JNCException {
        Locks locks = new Locks();
        this.locks = locks;
        insertChild(locks, childrenNames());
        return locks;
    }

    /**
     * Deletes container entry "locks".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLocks() throws JNCException {
        this.locks = null;
        String path = "locks";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Locks) locks = (Locks)child;
    }

}
