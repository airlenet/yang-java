/* 
 * @(#)Panels.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-webui", revision: "2013-03-07".
 */

package com.airlenet.yang.model.tailfWebui.webui.schematics;

import com.airlenet.yang.model.tailfWebui.WebuiPrefix;
import com.airlenet.yang.model.tailfWebui.webui.schematics.panels.Panel;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/ns/webui
 * generated to "src/main/java/com.airlenet.yang.model/tailfWebui/webui/schematics/panels"
 * <p>
 * See line 30 in
 * src/main/yang/module/tailf/tailf-webui.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class Panels extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Panels object.
     */
    public Panels() {
        super(WebuiPrefix.NAMESPACE, "panels");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Panels clone() {
        return (Panels)cloneContent(new Panels());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Panels cloneShallow() {
        return (Panels)cloneShallowContent(new Panels());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "panel",
        };
    }

    /* Access methods for list child: "panel". */

    /**
     * Gets list entry "panel", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Panel getPanel(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "panel[name='" + nameValue + "']";
        return (Panel)searchOne(path);
    }

    /**
     * Gets list entry "panel", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Panel getPanel(String nameValue) throws JNCException {
        String path = "panel[name='" + nameValue + "']";
        return (Panel)searchOne(path);
    }

    /**
     * Iterator method for the list "panel".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator panelIterator() {
        return new ElementChildrenIterator(children, "panel");
    }

    /**
     * List method for the list "panel".
     * @return An List for the list.
     */
    public List<Panel> getPanelList() {
        List<Panel> list = new ArrayList<>();
        ElementChildrenIterator iterator = panelIterator();
        if(iterator==null){
            return null;
        }
        while (iterator.hasNext()){
            Panel next =(Panel) iterator.next();
            list.add(next);
        }
        return list;
    }

    /**
     * Adds list entry "panel", using an existing object.
     * @param panel The object to add.
     * @return The added child.
     */
    public Panel addPanel(Panel panel) throws JNCException {
        insertChild(panel, childrenNames());
        return panel;
    }

    /**
     * Adds list entry "panel", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Panel addPanel(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        Panel panel = new Panel(nameValue);
        return addPanel(panel);
    }

    /**
     * Adds list entry "panel", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Panel addPanel(String nameValue) throws JNCException {
        Panel panel = new Panel(nameValue);
        return addPanel(panel);
    }

    /**
     * Adds list entry "panel".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Panel addPanel() throws JNCException {
        Panel panel = new Panel();
        insertChild(panel, childrenNames());
        return panel;
    }

    /**
     * Deletes list entry "panel", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deletePanel(com.tailf.jnc.YangString nameValue)
            throws JNCException {
        String path = "panel[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "panel", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deletePanel(String nameValue) throws JNCException {
        String path = "panel[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
