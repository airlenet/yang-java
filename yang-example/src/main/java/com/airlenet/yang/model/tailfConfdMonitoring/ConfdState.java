/* 
 * @(#)ConfdState.java        1.0
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "tailf-confd-monitoring", revision: "2013-06-14".
 */

package com.airlenet.yang.model.tailfConfdMonitoring;

import com.airlenet.yang.model.tailfCommonMonitoring.TfcgPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.TfcmPrefix;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Cli;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Ha;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Internal;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.LoadedDataModels;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Netconf;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Rest;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Smp;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Snmp;
import com.airlenet.yang.model.tailfConfdMonitoring.confdState.Webui;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEmpty;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://tail-f.com/yang/confd-monitoring
 * generated to "src/main/java/com.airlenet.yang.model/tailfConfdMonitoring/confd-state"
 * <p>
 * See line 55 in
 * src/main/yang/module/tailf/tailf-confd-monitoring.yang
 *
 * @version 1.0
 * @author Auto Generated
 */
public class ConfdState extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "smp".
     */
    public Smp smp = null;
    public Smp getSmp() {
        return this.smp;
    }

    /**
     * Field for child container "ha".
     */
    public Ha ha = null;
    public Ha getHa() {
        return this.ha;
    }

    /**
     * Field for child container "loaded-data-models".
     */
    public LoadedDataModels loadedDataModels = null;
    public LoadedDataModels getLoadedDataModels() {
        return this.loadedDataModels;
    }

    /**
     * Field for child container "netconf".
     */
    public Netconf netconf = null;
    public Netconf getNetconf() {
        return this.netconf;
    }

    /**
     * Field for child container "cli".
     */
    public Cli cli = null;
    public Cli getCli() {
        return this.cli;
    }

    /**
     * Field for child container "webui".
     */
    public Webui webui = null;
    public Webui getWebui() {
        return this.webui;
    }

    /**
     * Field for child container "rest".
     */
    public Rest rest = null;
    public Rest getRest() {
        return this.rest;
    }

    /**
     * Field for child container "snmp".
     */
    public Snmp snmp = null;
    public Snmp getSnmp() {
        return this.snmp;
    }

    /**
     * Field for child container "internal".
     */
    public Internal internal = null;
    public Internal getInternal() {
        return this.internal;
    }

    /**
     * Constructor for an empty ConfdState object.
     */
    public ConfdState() {
        super(TfcmPrefix.NAMESPACE, "confd-state");
        setDefaultPrefix();
        setPrefix(TfcmPrefix.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ConfdState clone() {
        return (ConfdState)cloneContent(new ConfdState());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ConfdState cloneShallow() {
        return (ConfdState)cloneShallowContent(new ConfdState());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "version",
            "smp",
            "epoll",
            "daemon-status",
            "read-only-mode",
            "upgrade-mode",
            "ha",
            "loaded-data-models",
            "netconf",
            "cli",
            "webui",
            "rest",
            "snmp",
            "internal",
        };
    }

    /* Access methods for optional leaf child: "version". */

    /**
     * Gets the value for child leaf "version".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangString getVersionValue() throws JNCException {
        return (com.tailf.jnc.YangString)getValue("version");
    }

    /**
     * Sets the value for child leaf "version",
     * using instance of generated typedef class.
     * @param versionValue The value to set.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(com.tailf.jnc.YangString versionValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "version",
            versionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "version",
     * using a String value.
     * @param versionValue used during instantiation.
     */
    public void setVersionValue(String versionValue) throws JNCException {
        setVersionValue(new com.tailf.jnc.YangString(versionValue));
    }

    /**
     * Unsets the value for child leaf "version".
     */
    public void unsetVersionValue() throws JNCException {
        delete("version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "version" leaf will not have a value.
     */
    public void addVersion() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "version" with operation "replace".
     */
    public void markVersionReplace() throws JNCException {
        markLeafReplace("version");
    }

    /**
     * Marks the leaf "version" with operation "merge".
     */
    public void markVersionMerge() throws JNCException {
        markLeafMerge("version");
    }

    /**
     * Marks the leaf "version" with operation "create".
     */
    public void markVersionCreate() throws JNCException {
        markLeafCreate("version");
    }

    /**
     * Marks the leaf "version" with operation "delete".
     */
    public void markVersionDelete() throws JNCException {
        markLeafDelete("version");
    }

    /**
     * Marks the leaf "version" with operation "remove".
     */
    public void markVersionRemove() throws JNCException {
        markLeafRemove("version");
    }

    /* Access methods for container child: "smp". */

    /**
     * Adds container entry "smp", using an existing object.
     * @param smp The object to add.
     * @return The added child.
     */
    public Smp addSmp(Smp smp) throws JNCException {
        this.smp = smp;
        insertChild(smp, childrenNames());
        return smp;
    }

    /**
     * Adds container entry "smp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Smp addSmp() throws JNCException {
        Smp smp = new Smp();
        this.smp = smp;
        insertChild(smp, childrenNames());
        return smp;
    }

    /**
     * Deletes container entry "smp".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSmp() throws JNCException {
        this.smp = null;
        String path = "smp";
        return delete(path);
    }

    /* Access methods for optional leaf child: "epoll". */

    /**
     * Gets the value for child leaf "epoll".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangBoolean getEpollValue() throws JNCException {
        return (com.tailf.jnc.YangBoolean)getValue("epoll");
    }

    /**
     * Sets the value for child leaf "epoll",
     * using instance of generated typedef class.
     * @param epollValue The value to set.
     * @param epollValue used during instantiation.
     */
    public void setEpollValue(com.tailf.jnc.YangBoolean epollValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "epoll",
            epollValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "epoll",
     * using Java primitive values.
     * @param epollValue used during instantiation.
     */
    public void setEpollValue(Boolean epollValue) throws JNCException {
        setEpollValue(new com.tailf.jnc.YangBoolean(epollValue));
    }

    /**
     * Sets the value for child leaf "epoll",
     * using a String value.
     * @param epollValue used during instantiation.
     */
    public void setEpollValue(String epollValue) throws JNCException {
        setEpollValue(new com.tailf.jnc.YangBoolean(epollValue));
    }

    /**
     * Unsets the value for child leaf "epoll".
     */
    public void unsetEpollValue() throws JNCException {
        delete("epoll");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "epoll" leaf will not have a value.
     */
    public void addEpoll() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "epoll",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "epoll" with operation "replace".
     */
    public void markEpollReplace() throws JNCException {
        markLeafReplace("epoll");
    }

    /**
     * Marks the leaf "epoll" with operation "merge".
     */
    public void markEpollMerge() throws JNCException {
        markLeafMerge("epoll");
    }

    /**
     * Marks the leaf "epoll" with operation "create".
     */
    public void markEpollCreate() throws JNCException {
        markLeafCreate("epoll");
    }

    /**
     * Marks the leaf "epoll" with operation "delete".
     */
    public void markEpollDelete() throws JNCException {
        markLeafDelete("epoll");
    }

    /**
     * Marks the leaf "epoll" with operation "remove".
     */
    public void markEpollRemove() throws JNCException {
        markLeafRemove("epoll");
    }

    /* Access methods for optional leaf child: "daemon-status". */

    /**
     * Gets the value for child leaf "daemon-status".
     * @return The value of the leaf.
     */
    public com.tailf.jnc.YangEnumeration getDaemonStatusValue()
            throws JNCException {
        return (com.tailf.jnc.YangEnumeration)getValue("daemon-status");
    }

    /**
     * Sets the value for child leaf "daemon-status",
     * using instance of generated typedef class.
     * @param daemonStatusValue The value to set.
     * @param daemonStatusValue used during instantiation.
     */
    public void setDaemonStatusValue(com.tailf.jnc.YangEnumeration daemonStatusValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "daemon-status",
            daemonStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "daemon-status",
     * using a String value.
     * @param daemonStatusValue used during instantiation.
     */
    public void setDaemonStatusValue(String daemonStatusValue)
            throws JNCException {
        setDaemonStatusValue(new com.tailf.jnc.YangEnumeration(daemonStatusValue, new String[] {
             "starting",
             "phase0",
             "phase1",
             "started",
             "stopping",
        }));
    }

    /**
     * Unsets the value for child leaf "daemon-status".
     */
    public void unsetDaemonStatusValue() throws JNCException {
        delete("daemon-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "daemon-status" leaf will not have a value.
     */
    public void addDaemonStatus() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "daemon-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "daemon-status" with operation "replace".
     */
    public void markDaemonStatusReplace() throws JNCException {
        markLeafReplace("daemon-status");
    }

    /**
     * Marks the leaf "daemon-status" with operation "merge".
     */
    public void markDaemonStatusMerge() throws JNCException {
        markLeafMerge("daemon-status");
    }

    /**
     * Marks the leaf "daemon-status" with operation "create".
     */
    public void markDaemonStatusCreate() throws JNCException {
        markLeafCreate("daemon-status");
    }

    /**
     * Marks the leaf "daemon-status" with operation "delete".
     */
    public void markDaemonStatusDelete() throws JNCException {
        markLeafDelete("daemon-status");
    }

    /**
     * Marks the leaf "daemon-status" with operation "remove".
     */
    public void markDaemonStatusRemove() throws JNCException {
        markLeafRemove("daemon-status");
    }

    /* Access methods for optional leaf child: "read-only-mode". */

    /**
     * Searches for leaf "read-only-mode".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getReadOnlyModeValue() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("read-only-mode");
    }

    /**
     * Sets the value for child leaf "read-only-mode",
     * using instance of generated typedef class.
     * @param readOnlyModeValue The value to set.
     * @param readOnlyModeValue used during instantiation.
     */
    public void setReadOnlyModeValue(com.tailf.jnc.YangEmpty readOnlyModeValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "read-only-mode",
            readOnlyModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "read-only-mode",
     * by instantiating it (value n/a).
     * @param readOnlyModeValue ignored.
     */
    public void setReadOnlyModeValue(String readOnlyModeValue)
            throws JNCException {
        setReadOnlyModeValue(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "read-only-mode".
     */
    public void unsetReadOnlyModeValue() throws JNCException {
        delete("read-only-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "read-only-mode" leaf will not have a value.
     */
    public void addReadOnlyMode() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "read-only-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "read-only-mode" with operation "replace".
     */
    public void markReadOnlyModeReplace() throws JNCException {
        markLeafReplace("read-only-mode");
    }

    /**
     * Marks the leaf "read-only-mode" with operation "merge".
     */
    public void markReadOnlyModeMerge() throws JNCException {
        markLeafMerge("read-only-mode");
    }

    /**
     * Marks the leaf "read-only-mode" with operation "create".
     */
    public void markReadOnlyModeCreate() throws JNCException {
        markLeafCreate("read-only-mode");
    }

    /**
     * Marks the leaf "read-only-mode" with operation "delete".
     */
    public void markReadOnlyModeDelete() throws JNCException {
        markLeafDelete("read-only-mode");
    }

    /**
     * Marks the leaf "read-only-mode" with operation "remove".
     */
    public void markReadOnlyModeRemove() throws JNCException {
        markLeafRemove("read-only-mode");
    }

    /* Access methods for optional leaf child: "upgrade-mode". */

    /**
     * Searches for leaf "upgrade-mode".
     * @return A YangEmpty object if leaf exists; <code>null</code> otherwise.
     */
    public com.tailf.jnc.YangEmpty getUpgradeModeValue() throws JNCException {
        return (com.tailf.jnc.YangEmpty)getValue("upgrade-mode");
    }

    /**
     * Sets the value for child leaf "upgrade-mode",
     * using instance of generated typedef class.
     * @param upgradeModeValue The value to set.
     * @param upgradeModeValue used during instantiation.
     */
    public void setUpgradeModeValue(com.tailf.jnc.YangEmpty upgradeModeValue)
            throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "upgrade-mode",
            upgradeModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "upgrade-mode",
     * by instantiating it (value n/a).
     * @param upgradeModeValue ignored.
     */
    public void setUpgradeModeValue(String upgradeModeValue)
            throws JNCException {
        setUpgradeModeValue(new YangEmpty());
    }

    /**
     * Unsets the value for child leaf "upgrade-mode".
     */
    public void unsetUpgradeModeValue() throws JNCException {
        delete("upgrade-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "upgrade-mode" leaf will not have a value.
     */
    public void addUpgradeMode() throws JNCException {
        setLeafValue(TfcgPrefix.NAMESPACE,
            "upgrade-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "upgrade-mode" with operation "replace".
     */
    public void markUpgradeModeReplace() throws JNCException {
        markLeafReplace("upgrade-mode");
    }

    /**
     * Marks the leaf "upgrade-mode" with operation "merge".
     */
    public void markUpgradeModeMerge() throws JNCException {
        markLeafMerge("upgrade-mode");
    }

    /**
     * Marks the leaf "upgrade-mode" with operation "create".
     */
    public void markUpgradeModeCreate() throws JNCException {
        markLeafCreate("upgrade-mode");
    }

    /**
     * Marks the leaf "upgrade-mode" with operation "delete".
     */
    public void markUpgradeModeDelete() throws JNCException {
        markLeafDelete("upgrade-mode");
    }

    /**
     * Marks the leaf "upgrade-mode" with operation "remove".
     */
    public void markUpgradeModeRemove() throws JNCException {
        markLeafRemove("upgrade-mode");
    }

    /* Access methods for container child: "ha". */

    /**
     * Adds container entry "ha", using an existing object.
     * @param ha The object to add.
     * @return The added child.
     */
    public Ha addHa(Ha ha) throws JNCException {
        this.ha = ha;
        insertChild(ha, childrenNames());
        return ha;
    }

    /**
     * Adds container entry "ha".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ha addHa() throws JNCException {
        Ha ha = new Ha();
        this.ha = ha;
        insertChild(ha, childrenNames());
        return ha;
    }

    /**
     * Deletes container entry "ha".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteHa() throws JNCException {
        this.ha = null;
        String path = "ha";
        return delete(path);
    }

    /* Access methods for container child: "loaded-data-models". */

    /**
     * Adds container entry "loadedDataModels", using an existing object.
     * @param loadedDataModels The object to add.
     * @return The added child.
     */
    public LoadedDataModels addLoadedDataModels(LoadedDataModels loadedDataModels)
            throws JNCException {
        this.loadedDataModels = loadedDataModels;
        insertChild(loadedDataModels, childrenNames());
        return loadedDataModels;
    }

    /**
     * Adds container entry "loadedDataModels".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LoadedDataModels addLoadedDataModels() throws JNCException {
        LoadedDataModels loadedDataModels = new LoadedDataModels();
        this.loadedDataModels = loadedDataModels;
        insertChild(loadedDataModels, childrenNames());
        return loadedDataModels;
    }

    /**
     * Deletes container entry "loadedDataModels".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLoadedDataModels() throws JNCException {
        this.loadedDataModels = null;
        String path = "loaded-data-models";
        return delete(path);
    }

    /* Access methods for container child: "netconf". */

    /**
     * Adds container entry "netconf", using an existing object.
     * @param netconf The object to add.
     * @return The added child.
     */
    public Netconf addNetconf(Netconf netconf) throws JNCException {
        this.netconf = netconf;
        insertChild(netconf, childrenNames());
        return netconf;
    }

    /**
     * Adds container entry "netconf".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Netconf addNetconf() throws JNCException {
        Netconf netconf = new Netconf();
        this.netconf = netconf;
        insertChild(netconf, childrenNames());
        return netconf;
    }

    /**
     * Deletes container entry "netconf".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteNetconf() throws JNCException {
        this.netconf = null;
        String path = "netconf";
        return delete(path);
    }

    /* Access methods for container child: "cli". */

    /**
     * Adds container entry "cli", using an existing object.
     * @param cli The object to add.
     * @return The added child.
     */
    public Cli addCli(Cli cli) throws JNCException {
        this.cli = cli;
        insertChild(cli, childrenNames());
        return cli;
    }

    /**
     * Adds container entry "cli".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Cli addCli() throws JNCException {
        Cli cli = new Cli();
        this.cli = cli;
        insertChild(cli, childrenNames());
        return cli;
    }

    /**
     * Deletes container entry "cli".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCli() throws JNCException {
        this.cli = null;
        String path = "cli";
        return delete(path);
    }

    /* Access methods for container child: "webui". */

    /**
     * Adds container entry "webui", using an existing object.
     * @param webui The object to add.
     * @return The added child.
     */
    public Webui addWebui(Webui webui) throws JNCException {
        this.webui = webui;
        insertChild(webui, childrenNames());
        return webui;
    }

    /**
     * Adds container entry "webui".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Webui addWebui() throws JNCException {
        Webui webui = new Webui();
        this.webui = webui;
        insertChild(webui, childrenNames());
        return webui;
    }

    /**
     * Deletes container entry "webui".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteWebui() throws JNCException {
        this.webui = null;
        String path = "webui";
        return delete(path);
    }

    /* Access methods for container child: "rest". */

    /**
     * Adds container entry "rest", using an existing object.
     * @param rest The object to add.
     * @return The added child.
     */
    public Rest addRest(Rest rest) throws JNCException {
        this.rest = rest;
        insertChild(rest, childrenNames());
        return rest;
    }

    /**
     * Adds container entry "rest".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Rest addRest() throws JNCException {
        Rest rest = new Rest();
        this.rest = rest;
        insertChild(rest, childrenNames());
        return rest;
    }

    /**
     * Deletes container entry "rest".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteRest() throws JNCException {
        this.rest = null;
        String path = "rest";
        return delete(path);
    }

    /* Access methods for container child: "snmp". */

    /**
     * Adds container entry "snmp", using an existing object.
     * @param snmp The object to add.
     * @return The added child.
     */
    public Snmp addSnmp(Snmp snmp) throws JNCException {
        this.snmp = snmp;
        insertChild(snmp, childrenNames());
        return snmp;
    }

    /**
     * Adds container entry "snmp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Snmp addSnmp() throws JNCException {
        Snmp snmp = new Snmp();
        this.snmp = snmp;
        insertChild(snmp, childrenNames());
        return snmp;
    }

    /**
     * Deletes container entry "snmp".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSnmp() throws JNCException {
        this.snmp = null;
        String path = "snmp";
        return delete(path);
    }

    /* Access methods for container child: "internal". */

    /**
     * Adds container entry "internal", using an existing object.
     * @param internal The object to add.
     * @return The added child.
     */
    public Internal addInternal(Internal internal) throws JNCException {
        this.internal = internal;
        insertChild(internal, childrenNames());
        return internal;
    }

    /**
     * Adds container entry "internal".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Internal addInternal() throws JNCException {
        Internal internal = new Internal();
        this.internal = internal;
        insertChild(internal, childrenNames());
        return internal;
    }

    /**
     * Deletes container entry "internal".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInternal() throws JNCException {
        this.internal = null;
        String path = "internal";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Smp) smp = (Smp)child;
        else if (child instanceof Ha) ha = (Ha)child;
        else if (child instanceof LoadedDataModels) loadedDataModels = (LoadedDataModels)child;
        else if (child instanceof Netconf) netconf = (Netconf)child;
        else if (child instanceof Cli) cli = (Cli)child;
        else if (child instanceof Webui) webui = (Webui)child;
        else if (child instanceof Rest) rest = (Rest)child;
        else if (child instanceof Snmp) snmp = (Snmp)child;
        else if (child instanceof Internal) internal = (Internal)child;
    }

}
